
Braille_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08006aa4  08006aa4  00007aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc8  08006dc8  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006dc8  08006dc8  00008060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006dc8  08006dc8  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc8  08006dc8  00007dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006dcc  08006dcc  00007dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006dd0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000060  08006e30  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08006e30  000084c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ac2  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb1  00000000  00000000  0001cb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0001f700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd4  00000000  00000000  00020848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015274  00000000  00000000  0002161c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167ca  00000000  00000000  00036890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083489  00000000  00000000  0004d05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d04e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  000d0528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d4a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a8c 	.word	0x08006a8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08006a8c 	.word	0x08006a8c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <Braille_DebugUpdateAllPins>:
}GPIODebugState;

// debug array
GPIODebugState gpio_db_array[BRAILLE_DOT_COUNT] = {0};

void Braille_DebugUpdateAllPins(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
    gpio_db_array[BRAILLE_A].pin_1_state = (HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin) == GPIO_PIN_SET);
 8000430:	2380      	movs	r3, #128	@ 0x80
 8000432:	011a      	lsls	r2, r3, #4
 8000434:	23a0      	movs	r3, #160	@ 0xa0
 8000436:	05db      	lsls	r3, r3, #23
 8000438:	0011      	movs	r1, r2
 800043a:	0018      	movs	r0, r3
 800043c:	f001 ff7a 	bl	8002334 <HAL_GPIO_ReadPin>
 8000440:	0003      	movs	r3, r0
 8000442:	3b01      	subs	r3, #1
 8000444:	425a      	negs	r2, r3
 8000446:	4153      	adcs	r3, r2
 8000448:	b2db      	uxtb	r3, r3
 800044a:	001a      	movs	r2, r3
 800044c:	4b4d      	ldr	r3, [pc, #308]	@ (8000584 <Braille_DebugUpdateAllPins+0x158>)
 800044e:	701a      	strb	r2, [r3, #0]
    gpio_db_array[BRAILLE_A].pin_2_state = (HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin) == GPIO_PIN_SET);
 8000450:	2380      	movs	r3, #128	@ 0x80
 8000452:	015a      	lsls	r2, r3, #5
 8000454:	23a0      	movs	r3, #160	@ 0xa0
 8000456:	05db      	lsls	r3, r3, #23
 8000458:	0011      	movs	r1, r2
 800045a:	0018      	movs	r0, r3
 800045c:	f001 ff6a 	bl	8002334 <HAL_GPIO_ReadPin>
 8000460:	0003      	movs	r3, r0
 8000462:	3b01      	subs	r3, #1
 8000464:	425a      	negs	r2, r3
 8000466:	4153      	adcs	r3, r2
 8000468:	b2db      	uxtb	r3, r3
 800046a:	001a      	movs	r2, r3
 800046c:	4b45      	ldr	r3, [pc, #276]	@ (8000584 <Braille_DebugUpdateAllPins+0x158>)
 800046e:	705a      	strb	r2, [r3, #1]

    gpio_db_array[BRAILLE_B].pin_1_state = (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET);
 8000470:	4b45      	ldr	r3, [pc, #276]	@ (8000588 <Braille_DebugUpdateAllPins+0x15c>)
 8000472:	2102      	movs	r1, #2
 8000474:	0018      	movs	r0, r3
 8000476:	f001 ff5d 	bl	8002334 <HAL_GPIO_ReadPin>
 800047a:	0003      	movs	r3, r0
 800047c:	3b01      	subs	r3, #1
 800047e:	425a      	negs	r2, r3
 8000480:	4153      	adcs	r3, r2
 8000482:	b2db      	uxtb	r3, r3
 8000484:	001a      	movs	r2, r3
 8000486:	4b3f      	ldr	r3, [pc, #252]	@ (8000584 <Braille_DebugUpdateAllPins+0x158>)
 8000488:	709a      	strb	r2, [r3, #2]
    gpio_db_array[BRAILLE_B].pin_2_state = (HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin) == GPIO_PIN_SET);
 800048a:	4b3f      	ldr	r3, [pc, #252]	@ (8000588 <Braille_DebugUpdateAllPins+0x15c>)
 800048c:	2101      	movs	r1, #1
 800048e:	0018      	movs	r0, r3
 8000490:	f001 ff50 	bl	8002334 <HAL_GPIO_ReadPin>
 8000494:	0003      	movs	r3, r0
 8000496:	3b01      	subs	r3, #1
 8000498:	425a      	negs	r2, r3
 800049a:	4153      	adcs	r3, r2
 800049c:	b2db      	uxtb	r3, r3
 800049e:	001a      	movs	r2, r3
 80004a0:	4b38      	ldr	r3, [pc, #224]	@ (8000584 <Braille_DebugUpdateAllPins+0x158>)
 80004a2:	70da      	strb	r2, [r3, #3]

    gpio_db_array[BRAILLE_C].pin_1_state = (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_SET);
 80004a4:	2380      	movs	r3, #128	@ 0x80
 80004a6:	005a      	lsls	r2, r3, #1
 80004a8:	23a0      	movs	r3, #160	@ 0xa0
 80004aa:	05db      	lsls	r3, r3, #23
 80004ac:	0011      	movs	r1, r2
 80004ae:	0018      	movs	r0, r3
 80004b0:	f001 ff40 	bl	8002334 <HAL_GPIO_ReadPin>
 80004b4:	0003      	movs	r3, r0
 80004b6:	3b01      	subs	r3, #1
 80004b8:	425a      	negs	r2, r3
 80004ba:	4153      	adcs	r3, r2
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	001a      	movs	r2, r3
 80004c0:	4b30      	ldr	r3, [pc, #192]	@ (8000584 <Braille_DebugUpdateAllPins+0x158>)
 80004c2:	711a      	strb	r2, [r3, #4]
    gpio_db_array[BRAILLE_C].pin_2_state = (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_SET);
 80004c4:	4b31      	ldr	r3, [pc, #196]	@ (800058c <Braille_DebugUpdateAllPins+0x160>)
 80004c6:	2140      	movs	r1, #64	@ 0x40
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 ff33 	bl	8002334 <HAL_GPIO_ReadPin>
 80004ce:	0003      	movs	r3, r0
 80004d0:	3b01      	subs	r3, #1
 80004d2:	425a      	negs	r2, r3
 80004d4:	4153      	adcs	r3, r2
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	001a      	movs	r2, r3
 80004da:	4b2a      	ldr	r3, [pc, #168]	@ (8000584 <Braille_DebugUpdateAllPins+0x158>)
 80004dc:	715a      	strb	r2, [r3, #5]

    gpio_db_array[BRAILLE_D].pin_1_state = (HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin) == GPIO_PIN_SET);
 80004de:	4b2a      	ldr	r3, [pc, #168]	@ (8000588 <Braille_DebugUpdateAllPins+0x15c>)
 80004e0:	2110      	movs	r1, #16
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 ff26 	bl	8002334 <HAL_GPIO_ReadPin>
 80004e8:	0003      	movs	r3, r0
 80004ea:	3b01      	subs	r3, #1
 80004ec:	425a      	negs	r2, r3
 80004ee:	4153      	adcs	r3, r2
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	001a      	movs	r2, r3
 80004f4:	4b23      	ldr	r3, [pc, #140]	@ (8000584 <Braille_DebugUpdateAllPins+0x158>)
 80004f6:	719a      	strb	r2, [r3, #6]
    gpio_db_array[BRAILLE_D].pin_2_state = (HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin) == GPIO_PIN_SET);
 80004f8:	4b23      	ldr	r3, [pc, #140]	@ (8000588 <Braille_DebugUpdateAllPins+0x15c>)
 80004fa:	2108      	movs	r1, #8
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 ff19 	bl	8002334 <HAL_GPIO_ReadPin>
 8000502:	0003      	movs	r3, r0
 8000504:	3b01      	subs	r3, #1
 8000506:	425a      	negs	r2, r3
 8000508:	4153      	adcs	r3, r2
 800050a:	b2db      	uxtb	r3, r3
 800050c:	001a      	movs	r2, r3
 800050e:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <Braille_DebugUpdateAllPins+0x158>)
 8000510:	71da      	strb	r2, [r3, #7]

    gpio_db_array[BRAILLE_E].pin_1_state = (HAL_GPIO_ReadPin(E1_GPIO_Port, E1_Pin) == GPIO_PIN_SET);
 8000512:	4b1d      	ldr	r3, [pc, #116]	@ (8000588 <Braille_DebugUpdateAllPins+0x15c>)
 8000514:	2120      	movs	r1, #32
 8000516:	0018      	movs	r0, r3
 8000518:	f001 ff0c 	bl	8002334 <HAL_GPIO_ReadPin>
 800051c:	0003      	movs	r3, r0
 800051e:	3b01      	subs	r3, #1
 8000520:	425a      	negs	r2, r3
 8000522:	4153      	adcs	r3, r2
 8000524:	b2db      	uxtb	r3, r3
 8000526:	001a      	movs	r2, r3
 8000528:	4b16      	ldr	r3, [pc, #88]	@ (8000584 <Braille_DebugUpdateAllPins+0x158>)
 800052a:	721a      	strb	r2, [r3, #8]
    gpio_db_array[BRAILLE_E].pin_2_state = (HAL_GPIO_ReadPin(E2_GPIO_Port, E2_Pin) == GPIO_PIN_SET);
 800052c:	4b16      	ldr	r3, [pc, #88]	@ (8000588 <Braille_DebugUpdateAllPins+0x15c>)
 800052e:	2140      	movs	r1, #64	@ 0x40
 8000530:	0018      	movs	r0, r3
 8000532:	f001 feff 	bl	8002334 <HAL_GPIO_ReadPin>
 8000536:	0003      	movs	r3, r0
 8000538:	3b01      	subs	r3, #1
 800053a:	425a      	negs	r2, r3
 800053c:	4153      	adcs	r3, r2
 800053e:	b2db      	uxtb	r3, r3
 8000540:	001a      	movs	r2, r3
 8000542:	4b10      	ldr	r3, [pc, #64]	@ (8000584 <Braille_DebugUpdateAllPins+0x158>)
 8000544:	725a      	strb	r2, [r3, #9]

    gpio_db_array[BRAILLE_F].pin_1_state = (HAL_GPIO_ReadPin(F1_GPIO_Port, F1_Pin) == GPIO_PIN_SET);
 8000546:	23a0      	movs	r3, #160	@ 0xa0
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	2110      	movs	r1, #16
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fef1 	bl	8002334 <HAL_GPIO_ReadPin>
 8000552:	0003      	movs	r3, r0
 8000554:	3b01      	subs	r3, #1
 8000556:	425a      	negs	r2, r3
 8000558:	4153      	adcs	r3, r2
 800055a:	b2db      	uxtb	r3, r3
 800055c:	001a      	movs	r2, r3
 800055e:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <Braille_DebugUpdateAllPins+0x158>)
 8000560:	729a      	strb	r2, [r3, #10]
    gpio_db_array[BRAILLE_F].pin_2_state = (HAL_GPIO_ReadPin(F2_GPIO_Port, F2_Pin) == GPIO_PIN_SET);
 8000562:	23a0      	movs	r3, #160	@ 0xa0
 8000564:	05db      	lsls	r3, r3, #23
 8000566:	2120      	movs	r1, #32
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fee3 	bl	8002334 <HAL_GPIO_ReadPin>
 800056e:	0003      	movs	r3, r0
 8000570:	3b01      	subs	r3, #1
 8000572:	425a      	negs	r2, r3
 8000574:	4153      	adcs	r3, r2
 8000576:	b2db      	uxtb	r3, r3
 8000578:	001a      	movs	r2, r3
 800057a:	4b02      	ldr	r3, [pc, #8]	@ (8000584 <Braille_DebugUpdateAllPins+0x158>)
 800057c:	72da      	strb	r2, [r3, #11]
}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000008c 	.word	0x2000008c
 8000588:	50000400 	.word	0x50000400
 800058c:	50000800 	.word	0x50000800

08000590 <Braille_IdleDot>:



// Poner punto en reposo
static void Braille_IdleDot(BrailleDot_t dot) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	0002      	movs	r2, r0
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(braille_pins[dot].port_1, braille_pins[dot].pin_1, GPIO_PIN_RESET);
 800059c:	1dfb      	adds	r3, r7, #7
 800059e:	781a      	ldrb	r2, [r3, #0]
 80005a0:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <Braille_IdleDot+0x58>)
 80005a2:	0112      	lsls	r2, r2, #4
 80005a4:	58d0      	ldr	r0, [r2, r3]
 80005a6:	1dfb      	adds	r3, r7, #7
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <Braille_IdleDot+0x58>)
 80005ac:	011b      	lsls	r3, r3, #4
 80005ae:	18d3      	adds	r3, r2, r3
 80005b0:	3304      	adds	r3, #4
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	2200      	movs	r2, #0
 80005b6:	0019      	movs	r1, r3
 80005b8:	f001 fed9 	bl	800236e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(braille_pins[dot].port_2, braille_pins[dot].pin_2, GPIO_PIN_RESET);
 80005bc:	1dfb      	adds	r3, r7, #7
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4a09      	ldr	r2, [pc, #36]	@ (80005e8 <Braille_IdleDot+0x58>)
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	18d3      	adds	r3, r2, r3
 80005c6:	3308      	adds	r3, #8
 80005c8:	6818      	ldr	r0, [r3, #0]
 80005ca:	1dfb      	adds	r3, r7, #7
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	4a06      	ldr	r2, [pc, #24]	@ (80005e8 <Braille_IdleDot+0x58>)
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	18d3      	adds	r3, r2, r3
 80005d4:	330c      	adds	r3, #12
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	2200      	movs	r2, #0
 80005da:	0019      	movs	r1, r3
 80005dc:	f001 fec7 	bl	800236e <HAL_GPIO_WritePin>
}
 80005e0:	46c0      	nop			@ (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b002      	add	sp, #8
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	08006b24 	.word	0x08006b24

080005ec <Braille_MoveDot>:

// Subir o bajar un punto (1: subir, 0: bajar)
static void Braille_MoveDot(BrailleDot_t dot, uint8_t up) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	0002      	movs	r2, r0
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	1dbb      	adds	r3, r7, #6
 80005fa:	1c0a      	adds	r2, r1, #0
 80005fc:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(braille_pins[dot].port_1, braille_pins[dot].pin_1, up ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	781a      	ldrb	r2, [r3, #0]
 8000602:	4b16      	ldr	r3, [pc, #88]	@ (800065c <Braille_MoveDot+0x70>)
 8000604:	0112      	lsls	r2, r2, #4
 8000606:	58d0      	ldr	r0, [r2, r3]
 8000608:	1dfb      	adds	r3, r7, #7
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4a13      	ldr	r2, [pc, #76]	@ (800065c <Braille_MoveDot+0x70>)
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	18d3      	adds	r3, r2, r3
 8000612:	3304      	adds	r3, #4
 8000614:	8819      	ldrh	r1, [r3, #0]
 8000616:	1dbb      	adds	r3, r7, #6
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	1e5a      	subs	r2, r3, #1
 800061c:	4193      	sbcs	r3, r2
 800061e:	b2db      	uxtb	r3, r3
 8000620:	001a      	movs	r2, r3
 8000622:	f001 fea4 	bl	800236e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(braille_pins[dot].port_2, braille_pins[dot].pin_2, up ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <Braille_MoveDot+0x70>)
 800062c:	011b      	lsls	r3, r3, #4
 800062e:	18d3      	adds	r3, r2, r3
 8000630:	3308      	adds	r3, #8
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4a08      	ldr	r2, [pc, #32]	@ (800065c <Braille_MoveDot+0x70>)
 800063a:	011b      	lsls	r3, r3, #4
 800063c:	18d3      	adds	r3, r2, r3
 800063e:	330c      	adds	r3, #12
 8000640:	8819      	ldrh	r1, [r3, #0]
 8000642:	1dbb      	adds	r3, r7, #6
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	425a      	negs	r2, r3
 8000648:	4153      	adcs	r3, r2
 800064a:	b2db      	uxtb	r3, r3
 800064c:	001a      	movs	r2, r3
 800064e:	f001 fe8e 	bl	800236e <HAL_GPIO_WritePin>
}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b002      	add	sp, #8
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	08006b24 	.word	0x08006b24

08000660 <Braille_GetCharPattern>:

static uint8_t Braille_GetCharPattern(char c){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	0002      	movs	r2, r0
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	701a      	strb	r2, [r3, #0]
	if(c>='A' && c<='Z'){
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b40      	cmp	r3, #64	@ 0x40
 8000672:	d909      	bls.n	8000688 <Braille_GetCharPattern+0x28>
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b5a      	cmp	r3, #90	@ 0x5a
 800067a:	d805      	bhi.n	8000688 <Braille_GetCharPattern+0x28>
		return braille_alphabet[c - 'A'];
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3b41      	subs	r3, #65	@ 0x41
 8000682:	4a04      	ldr	r2, [pc, #16]	@ (8000694 <Braille_GetCharPattern+0x34>)
 8000684:	5cd3      	ldrb	r3, [r2, r3]
 8000686:	e000      	b.n	800068a <Braille_GetCharPattern+0x2a>
	}
	return 0x00;
 8000688:	2300      	movs	r3, #0
}
 800068a:	0018      	movs	r0, r3
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	08006b08 	.word	0x08006b08

08000698 <Braille_Init>:



void Braille_Init(TIM_HandleTypeDef* htim) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    braille_timer = htim;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <Braille_Init+0x34>)
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < BRAILLE_DOT_COUNT; i++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e007      	b.n	80006bc <Braille_Init+0x24>
        Braille_IdleDot((BrailleDot_t)i);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	0018      	movs	r0, r3
 80006b2:	f7ff ff6d 	bl	8000590 <Braille_IdleDot>
    for (int i = 0; i < BRAILLE_DOT_COUNT; i++) {
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b05      	cmp	r3, #5
 80006c0:	ddf4      	ble.n	80006ac <Braille_Init+0x14>
    }
}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46c0      	nop			@ (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b004      	add	sp, #16
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	2000007c 	.word	0x2000007c

080006d0 <Braille_Display>:

void Braille_Display(char letter) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	0002      	movs	r2, r0
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	701a      	strb	r2, [r3, #0]
    //if (busy) return;
    active_pattern = Braille_GetCharPattern(letter);
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff ffbd 	bl	8000660 <Braille_GetCharPattern>
 80006e6:	0003      	movs	r3, r0
 80006e8:	001a      	movs	r2, r3
 80006ea:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <Braille_Display+0x38>)
 80006ec:	701a      	strb	r2, [r3, #0]
    current_step = 0;
 80006ee:	4b07      	ldr	r3, [pc, #28]	@ (800070c <Braille_Display+0x3c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
    busy = 1;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <Braille_Display+0x40>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
    activation_time = 0;
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <Braille_Display+0x44>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
}
 8000700:	46c0      	nop			@ (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b002      	add	sp, #8
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000080 	.word	0x20000080
 800070c:	20000000 	.word	0x20000000
 8000710:	20000088 	.word	0x20000088
 8000714:	20000084 	.word	0x20000084

08000718 <Braille_Update>:

void Braille_Update(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
    if (!busy || current_step == -1) return;
 800071e:	4b38      	ldr	r3, [pc, #224]	@ (8000800 <Braille_Update+0xe8>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d068      	beq.n	80007f8 <Braille_Update+0xe0>
 8000726:	4b37      	ldr	r3, [pc, #220]	@ (8000804 <Braille_Update+0xec>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b25b      	sxtb	r3, r3
 800072c:	3301      	adds	r3, #1
 800072e:	d063      	beq.n	80007f8 <Braille_Update+0xe0>

    uint32_t now = __HAL_TIM_GET_COUNTER(braille_timer);
 8000730:	4b35      	ldr	r3, [pc, #212]	@ (8000808 <Braille_Update+0xf0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000738:	60fb      	str	r3, [r7, #12]

    if (activation_time == 0) {
 800073a:	4b34      	ldr	r3, [pc, #208]	@ (800080c <Braille_Update+0xf4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d124      	bne.n	800078c <Braille_Update+0x74>
        Braille_IdleDot((BrailleDot_t)current_step); // Siempre iniciar limpio
 8000742:	4b30      	ldr	r3, [pc, #192]	@ (8000804 <Braille_Update+0xec>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	b25b      	sxtb	r3, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff ff20 	bl	8000590 <Braille_IdleDot>

        uint8_t bit = (active_pattern >> (5 - current_step)) & 0x01;
 8000750:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <Braille_Update+0xf8>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	001a      	movs	r2, r3
 8000756:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <Braille_Update+0xec>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b25b      	sxtb	r3, r3
 800075c:	0019      	movs	r1, r3
 800075e:	2305      	movs	r3, #5
 8000760:	1a5b      	subs	r3, r3, r1
 8000762:	411a      	asrs	r2, r3
 8000764:	0013      	movs	r3, r2
 8000766:	b2da      	uxtb	r2, r3
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	2101      	movs	r1, #1
 800076c:	400a      	ands	r2, r1
 800076e:	701a      	strb	r2, [r3, #0]
        Braille_MoveDot((BrailleDot_t)current_step, bit);
 8000770:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <Braille_Update+0xec>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b25b      	sxtb	r3, r3
 8000776:	b2da      	uxtb	r2, r3
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	0019      	movs	r1, r3
 800077e:	0010      	movs	r0, r2
 8000780:	f7ff ff34 	bl	80005ec <Braille_MoveDot>

        activation_time = now;
 8000784:	4b21      	ldr	r3, [pc, #132]	@ (800080c <Braille_Update+0xf4>)
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	601a      	str	r2, [r3, #0]
        return;
 800078a:	e036      	b.n	80007fa <Braille_Update+0xe2>
    }

    uint32_t elapsed = (now >= activation_time) ? now - activation_time : (0xFFFF - activation_time + now);
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <Braille_Update+0xf4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	429a      	cmp	r2, r3
 8000794:	d304      	bcc.n	80007a0 <Braille_Update+0x88>
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <Braille_Update+0xf4>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	e006      	b.n	80007ae <Braille_Update+0x96>
 80007a0:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <Braille_Update+0xf4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000814 <Braille_Update+0xfc>)
 80007aa:	4694      	mov	ip, r2
 80007ac:	4463      	add	r3, ip
 80007ae:	60bb      	str	r3, [r7, #8]

    if (elapsed >= BRAILLE_ACTIVE_TIME_MS) {
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	23fa      	movs	r3, #250	@ 0xfa
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d31f      	bcc.n	80007fa <Braille_Update+0xe2>
        Braille_IdleDot((BrailleDot_t)current_step);
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <Braille_Update+0xec>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b25b      	sxtb	r3, r3
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff fee4 	bl	8000590 <Braille_IdleDot>
        activation_time = 0;
 80007c8:	4b10      	ldr	r3, [pc, #64]	@ (800080c <Braille_Update+0xf4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
        current_step++;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <Braille_Update+0xec>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	3301      	adds	r3, #1
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	b25a      	sxtb	r2, r3
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <Braille_Update+0xec>)
 80007de:	701a      	strb	r2, [r3, #0]

        if (current_step >= BRAILLE_DOT_COUNT) {
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <Braille_Update+0xec>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	2b05      	cmp	r3, #5
 80007e8:	dd07      	ble.n	80007fa <Braille_Update+0xe2>
            current_step = 0;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <Braille_Update+0xec>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
            busy = 1;
 80007f0:	4b03      	ldr	r3, [pc, #12]	@ (8000800 <Braille_Update+0xe8>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	e000      	b.n	80007fa <Braille_Update+0xe2>
    if (!busy || current_step == -1) return;
 80007f8:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b004      	add	sp, #16
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000088 	.word	0x20000088
 8000804:	20000000 	.word	0x20000000
 8000808:	2000007c 	.word	0x2000007c
 800080c:	20000084 	.word	0x20000084
 8000810:	20000080 	.word	0x20000080
 8000814:	0000ffff 	.word	0x0000ffff

08000818 <ParseCommand>:
static char temp_buffer_left[UART_BUFFER_SIZE] = {0};
static char temp_buffer_right[UART_BUFFER_SIZE] = {0};


// Command Parser
static CommandType ParseCommand(char* msg){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	if (strncmp(msg, "CHAR:", 5) == 0) return CMD_CHAR;
 8000820:	4920      	ldr	r1, [pc, #128]	@ (80008a4 <ParseCommand+0x8c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2205      	movs	r2, #5
 8000826:	0018      	movs	r0, r3
 8000828:	f005 fc98 	bl	800615c <strncmp>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d101      	bne.n	8000834 <ParseCommand+0x1c>
 8000830:	2301      	movs	r3, #1
 8000832:	e032      	b.n	800089a <ParseCommand+0x82>
	    if (strncmp(msg, "WORD:", 5) == 0) return CMD_WORD;
 8000834:	491c      	ldr	r1, [pc, #112]	@ (80008a8 <ParseCommand+0x90>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2205      	movs	r2, #5
 800083a:	0018      	movs	r0, r3
 800083c:	f005 fc8e 	bl	800615c <strncmp>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d101      	bne.n	8000848 <ParseCommand+0x30>
 8000844:	2302      	movs	r3, #2
 8000846:	e028      	b.n	800089a <ParseCommand+0x82>
	    else if (strncmp(msg, "START", 5) == 0) return CMD_START;
 8000848:	4918      	ldr	r1, [pc, #96]	@ (80008ac <ParseCommand+0x94>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2205      	movs	r2, #5
 800084e:	0018      	movs	r0, r3
 8000850:	f005 fc84 	bl	800615c <strncmp>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d101      	bne.n	800085c <ParseCommand+0x44>
 8000858:	2303      	movs	r3, #3
 800085a:	e01e      	b.n	800089a <ParseCommand+0x82>
	    else if (strncmp(msg, "RESET", 5) == 0) return CMD_RESET;
 800085c:	4914      	ldr	r1, [pc, #80]	@ (80008b0 <ParseCommand+0x98>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2205      	movs	r2, #5
 8000862:	0018      	movs	r0, r3
 8000864:	f005 fc7a 	bl	800615c <strncmp>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d101      	bne.n	8000870 <ParseCommand+0x58>
 800086c:	2304      	movs	r3, #4
 800086e:	e014      	b.n	800089a <ParseCommand+0x82>
	    else if (strncmp(msg, "FIRST", 5) == 0) return CMD_FIRST;
 8000870:	4910      	ldr	r1, [pc, #64]	@ (80008b4 <ParseCommand+0x9c>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2205      	movs	r2, #5
 8000876:	0018      	movs	r0, r3
 8000878:	f005 fc70 	bl	800615c <strncmp>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d101      	bne.n	8000884 <ParseCommand+0x6c>
 8000880:	2305      	movs	r3, #5
 8000882:	e00a      	b.n	800089a <ParseCommand+0x82>
	    else if (strncmp(msg, "ANCHOR", 6) == 0) return CMD_ANCHOR;
 8000884:	490c      	ldr	r1, [pc, #48]	@ (80008b8 <ParseCommand+0xa0>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2206      	movs	r2, #6
 800088a:	0018      	movs	r0, r3
 800088c:	f005 fc66 	bl	800615c <strncmp>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d101      	bne.n	8000898 <ParseCommand+0x80>
 8000894:	2306      	movs	r3, #6
 8000896:	e000      	b.n	800089a <ParseCommand+0x82>
	    else return CMD_UNKNOWN;
 8000898:	2300      	movs	r3, #0
}
 800089a:	0018      	movs	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	b002      	add	sp, #8
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	08006aa4 	.word	0x08006aa4
 80008a8:	08006aac 	.word	0x08006aac
 80008ac:	08006ab4 	.word	0x08006ab4
 80008b0:	08006abc 	.word	0x08006abc
 80008b4:	08006ac4 	.word	0x08006ac4
 80008b8:	08006acc 	.word	0x08006acc

080008bc <StartBuzzer>:

// Buzzer start
void StartBuzzer(BuzzerState state){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	0002      	movs	r2, r0
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	701a      	strb	r2, [r3, #0]
	buzzer_state = state;
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <StartBuzzer+0x30>)
 80008ca:	1dfa      	adds	r2, r7, #7
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	701a      	strb	r2, [r3, #0]
	buzzer_start_time = __HAL_TIM_GET_COUNTER(buzzer_timer);
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <StartBuzzer+0x34>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <StartBuzzer+0x38>)
 80008da:	601a      	str	r2, [r3, #0]
	TIM1->CCR1 = 1500; // START Beep
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <StartBuzzer+0x3c>)
 80008de:	4a07      	ldr	r2, [pc, #28]	@ (80008fc <StartBuzzer+0x40>)
 80008e0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	200000a8 	.word	0x200000a8
 80008f0:	200000a4 	.word	0x200000a4
 80008f4:	200000ac 	.word	0x200000ac
 80008f8:	40012c00 	.word	0x40012c00
 80008fc:	000005dc 	.word	0x000005dc

08000900 <UpdateBuzzer>:

// Buzzer update
bool UpdateBuzzer(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
	uint32_t now = __HAL_TIM_GET_COUNTER(buzzer_timer);
 8000906:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <UpdateBuzzer+0x90>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800090e:	60bb      	str	r3, [r7, #8]
	uint32_t elapsed = (now >= buzzer_start_time) ? now - buzzer_start_time : (0xFFFF - buzzer_start_time + now);
 8000910:	4b20      	ldr	r3, [pc, #128]	@ (8000994 <UpdateBuzzer+0x94>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	429a      	cmp	r2, r3
 8000918:	d304      	bcc.n	8000924 <UpdateBuzzer+0x24>
 800091a:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <UpdateBuzzer+0x94>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	e006      	b.n	8000932 <UpdateBuzzer+0x32>
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <UpdateBuzzer+0x94>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	4a1a      	ldr	r2, [pc, #104]	@ (8000998 <UpdateBuzzer+0x98>)
 800092e:	4694      	mov	ip, r2
 8000930:	4463      	add	r3, ip
 8000932:	607b      	str	r3, [r7, #4]

	uint32_t duration = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]

	switch(buzzer_state){
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <UpdateBuzzer+0x9c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d00a      	beq.n	8000956 <UpdateBuzzer+0x56>
 8000940:	dc0d      	bgt.n	800095e <UpdateBuzzer+0x5e>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d002      	beq.n	800094c <UpdateBuzzer+0x4c>
 8000946:	2b01      	cmp	r3, #1
 8000948:	d002      	beq.n	8000950 <UpdateBuzzer+0x50>
 800094a:	e008      	b.n	800095e <UpdateBuzzer+0x5e>
		case BEEP_NONE:
			return true;
 800094c:	2301      	movs	r3, #1
 800094e:	e01b      	b.n	8000988 <UpdateBuzzer+0x88>
		case BEEP_READY:
			duration = READY_BEEP_TIME;
 8000950:	23c8      	movs	r3, #200	@ 0xc8
 8000952:	60fb      	str	r3, [r7, #12]
			break;
 8000954:	e00b      	b.n	800096e <UpdateBuzzer+0x6e>
		case BEEP_SUCCESS:
			duration = SUCCES_BEEP_TIME;
 8000956:	23fa      	movs	r3, #250	@ 0xfa
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
			break;
 800095c:	e007      	b.n	800096e <UpdateBuzzer+0x6e>
		default:
			TIM1->CCR1 = 0;
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <UpdateBuzzer+0xa0>)
 8000960:	2200      	movs	r2, #0
 8000962:	635a      	str	r2, [r3, #52]	@ 0x34
			buzzer_state = BEEP_NONE;
 8000964:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <UpdateBuzzer+0x9c>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
			return true;
 800096a:	2301      	movs	r3, #1
 800096c:	e00c      	b.n	8000988 <UpdateBuzzer+0x88>
			break;

	}

	if(elapsed >= duration){
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	429a      	cmp	r2, r3
 8000974:	d307      	bcc.n	8000986 <UpdateBuzzer+0x86>
		TIM1->CCR1 = 0;
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <UpdateBuzzer+0xa0>)
 8000978:	2200      	movs	r2, #0
 800097a:	635a      	str	r2, [r3, #52]	@ 0x34
		buzzer_state = BEEP_NONE;
 800097c:	4b07      	ldr	r3, [pc, #28]	@ (800099c <UpdateBuzzer+0x9c>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
		return true;
 8000982:	2301      	movs	r3, #1
 8000984:	e000      	b.n	8000988 <UpdateBuzzer+0x88>
	}

	return false;
 8000986:	2300      	movs	r3, #0
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	b004      	add	sp, #16
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000a4 	.word	0x200000a4
 8000994:	200000ac 	.word	0x200000ac
 8000998:	0000ffff 	.word	0x0000ffff
 800099c:	200000a8 	.word	0x200000a8
 80009a0:	40012c00 	.word	0x40012c00

080009a4 <CircularBuffer_Init>:


void CircularBuffer_Init(CircularBuffer* cb){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	cb->head=0;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2240      	movs	r2, #64	@ 0x40
 80009b0:	2100      	movs	r1, #0
 80009b2:	5299      	strh	r1, [r3, r2]
	cb->tail=0;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2242      	movs	r2, #66	@ 0x42
 80009b8:	2100      	movs	r1, #0
 80009ba:	5299      	strh	r1, [r3, r2]
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b002      	add	sp, #8
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <CircularBuffer_Push>:

void CircularBuffer_Push(CircularBuffer* cb, char c){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	000a      	movs	r2, r1
 80009ce:	1cfb      	adds	r3, r7, #3
 80009d0:	701a      	strb	r2, [r3, #0]
	uint16_t next_head = (cb->head +1) % UART_CIRC_BUFFER_SIZE;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2240      	movs	r2, #64	@ 0x40
 80009d6:	5a9b      	ldrh	r3, [r3, r2]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	3301      	adds	r3, #1
 80009dc:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <CircularBuffer_Push+0x64>)
 80009de:	4013      	ands	r3, r2
 80009e0:	d504      	bpl.n	80009ec <CircularBuffer_Push+0x28>
 80009e2:	3b01      	subs	r3, #1
 80009e4:	2240      	movs	r2, #64	@ 0x40
 80009e6:	4252      	negs	r2, r2
 80009e8:	4313      	orrs	r3, r2
 80009ea:	3301      	adds	r3, #1
 80009ec:	001a      	movs	r2, r3
 80009ee:	200e      	movs	r0, #14
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	801a      	strh	r2, [r3, #0]
	if (next_head != cb-> tail){
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2242      	movs	r2, #66	@ 0x42
 80009f8:	5a9b      	ldrh	r3, [r3, r2]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	183a      	adds	r2, r7, r0
 80009fe:	8812      	ldrh	r2, [r2, #0]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d00d      	beq.n	8000a20 <CircularBuffer_Push+0x5c>
		cb->buffer[cb->head]=c;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2240      	movs	r2, #64	@ 0x40
 8000a08:	5a9b      	ldrh	r3, [r3, r2]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	1cfa      	adds	r2, r7, #3
 8000a12:	7812      	ldrb	r2, [r2, #0]
 8000a14:	545a      	strb	r2, [r3, r1]
		cb->head =next_head;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	183a      	adds	r2, r7, r0
 8000a1a:	2140      	movs	r1, #64	@ 0x40
 8000a1c:	8812      	ldrh	r2, [r2, #0]
 8000a1e:	525a      	strh	r2, [r3, r1]
	}
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b004      	add	sp, #16
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	8000003f 	.word	0x8000003f

08000a2c <CircularBuffer_ReadLine>:

//ReadLine TODO
bool CircularBuffer_ReadLine(CircularBuffer* cb, char* out, size_t max_len) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
    size_t pos = cb->tail;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2242      	movs	r2, #66	@ 0x42
 8000a40:	5a9b      	ldrh	r3, [r3, r2]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	61bb      	str	r3, [r7, #24]

    // 1. Busca si hay un '\n' en el buffer
    int found = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
    while (pos != cb->head && i < max_len - 1) {
 8000a4a:	e015      	b.n	8000a78 <CircularBuffer_ReadLine+0x4c>
        char c = cb->buffer[pos];
 8000a4c:	2013      	movs	r0, #19
 8000a4e:	183b      	adds	r3, r7, r0
 8000a50:	68f9      	ldr	r1, [r7, #12]
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	188a      	adds	r2, r1, r2
 8000a56:	7812      	ldrb	r2, [r2, #0]
 8000a58:	701a      	strb	r2, [r3, #0]
        if (c == '\n') {
 8000a5a:	183b      	adds	r3, r7, r0
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b0a      	cmp	r3, #10
 8000a60:	d102      	bne.n	8000a68 <CircularBuffer_ReadLine+0x3c>
            found = 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
            break;
 8000a66:	e014      	b.n	8000a92 <CircularBuffer_ReadLine+0x66>
        }
        pos = (pos + 1) % UART_CIRC_BUFFER_SIZE;
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	223f      	movs	r2, #63	@ 0x3f
 8000a6e:	4013      	ands	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        i++;
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3301      	adds	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
    while (pos != cb->head && i < max_len - 1) {
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2240      	movs	r2, #64	@ 0x40
 8000a7c:	5a9b      	ldrh	r3, [r3, r2]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	001a      	movs	r2, r3
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d004      	beq.n	8000a92 <CircularBuffer_ReadLine+0x66>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	69fa      	ldr	r2, [r7, #28]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d3dc      	bcc.n	8000a4c <CircularBuffer_ReadLine+0x20>
    }
    if (!found) return false; // No hay línea completa
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <CircularBuffer_ReadLine+0x70>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e04c      	b.n	8000b36 <CircularBuffer_ReadLine+0x10a>

    // 2. Copia la línea completa
    i = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
    while (cb->tail != cb->head && i < max_len - 1) {
 8000aa0:	e02f      	b.n	8000b02 <CircularBuffer_ReadLine+0xd6>
        char c = cb->buffer[cb->tail];
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2242      	movs	r2, #66	@ 0x42
 8000aa6:	5a9b      	ldrh	r3, [r3, r2]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	0019      	movs	r1, r3
 8000aac:	2312      	movs	r3, #18
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	5c52      	ldrb	r2, [r2, r1]
 8000ab4:	701a      	strb	r2, [r3, #0]
        cb->tail = (cb->tail + 1) % UART_CIRC_BUFFER_SIZE;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2242      	movs	r2, #66	@ 0x42
 8000aba:	5a9b      	ldrh	r3, [r3, r2]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8000b40 <CircularBuffer_ReadLine+0x114>)
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	d504      	bpl.n	8000ad0 <CircularBuffer_ReadLine+0xa4>
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	2240      	movs	r2, #64	@ 0x40
 8000aca:	4252      	negs	r2, r2
 8000acc:	4313      	orrs	r3, r2
 8000ace:	3301      	adds	r3, #1
 8000ad0:	b299      	uxth	r1, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2242      	movs	r2, #66	@ 0x42
 8000ad6:	5299      	strh	r1, [r3, r2]
        if (c == '\n') break;
 8000ad8:	2112      	movs	r1, #18
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b0a      	cmp	r3, #10
 8000ae0:	d01f      	beq.n	8000b22 <CircularBuffer_ReadLine+0xf6>
        if (c != '\r' && c != '\0')
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b0d      	cmp	r3, #13
 8000ae8:	d00b      	beq.n	8000b02 <CircularBuffer_ReadLine+0xd6>
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <CircularBuffer_ReadLine+0xd6>
            out[i++] = c;
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	1c5a      	adds	r2, r3, #1
 8000af6:	61fa      	str	r2, [r7, #28]
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	18d3      	adds	r3, r2, r3
 8000afc:	187a      	adds	r2, r7, r1
 8000afe:	7812      	ldrb	r2, [r2, #0]
 8000b00:	701a      	strb	r2, [r3, #0]
    while (cb->tail != cb->head && i < max_len - 1) {
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2242      	movs	r2, #66	@ 0x42
 8000b06:	5a9b      	ldrh	r3, [r3, r2]
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2140      	movs	r1, #64	@ 0x40
 8000b0e:	5a5b      	ldrh	r3, [r3, r1]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d006      	beq.n	8000b24 <CircularBuffer_ReadLine+0xf8>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	69fa      	ldr	r2, [r7, #28]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d3c0      	bcc.n	8000aa2 <CircularBuffer_ReadLine+0x76>
 8000b20:	e000      	b.n	8000b24 <CircularBuffer_ReadLine+0xf8>
        if (c == '\n') break;
 8000b22:	46c0      	nop			@ (mov r8, r8)
    }
    out[i] = '\0';
 8000b24:	68ba      	ldr	r2, [r7, #8]
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	18d3      	adds	r3, r2, r3
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
    return (i > 0);
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	4193      	sbcs	r3, r2
 8000b34:	b2db      	uxtb	r3, r3
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b008      	add	sp, #32
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	8000003f 	.word	0x8000003f

08000b44 <Comms_Init>:


// Initialization
void Comms_Init(UART_HandleTypeDef* huart_left,UART_HandleTypeDef* huart_right, TIM_HandleTypeDef* htim){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
	uart_left = huart_left;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <Comms_Init+0x54>)
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	601a      	str	r2, [r3, #0]
	uart_right = huart_right;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <Comms_Init+0x58>)
 8000b58:	68ba      	ldr	r2, [r7, #8]
 8000b5a:	601a      	str	r2, [r3, #0]
	buzzer_timer = htim;
 8000b5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <Comms_Init+0x5c>)
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	601a      	str	r2, [r3, #0]

	CircularBuffer_Init(&circ_left);
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <Comms_Init+0x60>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff ff1d 	bl	80009a4 <CircularBuffer_Init>
	CircularBuffer_Init(&circ_right);
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <Comms_Init+0x64>)
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff ff19 	bl	80009a4 <CircularBuffer_Init>

	HAL_UART_Receive_IT(uart_left, &uart_byte_left, 1);  // antes: UART_BUFFER_SIZE
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <Comms_Init+0x54>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	490d      	ldr	r1, [pc, #52]	@ (8000bac <Comms_Init+0x68>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f003 fb0c 	bl	8004198 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(uart_right, &uart_byte_right, 1);
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <Comms_Init+0x58>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	490a      	ldr	r1, [pc, #40]	@ (8000bb0 <Comms_Init+0x6c>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f003 fb05 	bl	8004198 <HAL_UART_Receive_IT>
}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b004      	add	sp, #16
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	2000013c 	.word	0x2000013c
 8000b9c:	20000140 	.word	0x20000140
 8000ba0:	200000a4 	.word	0x200000a4
 8000ba4:	200000b0 	.word	0x200000b0
 8000ba8:	200000f4 	.word	0x200000f4
 8000bac:	20000138 	.word	0x20000138
 8000bb0:	20000139 	.word	0x20000139

08000bb4 <Comms_Process>:

// Comms processing
void Comms_Process(void){
 8000bb4:	b5b0      	push	{r4, r5, r7, lr}
 8000bb6:	b098      	sub	sp, #96	@ 0x60
 8000bb8:	af02      	add	r7, sp, #8
	switch (comms_state) {
 8000bba:	4bd3      	ldr	r3, [pc, #844]	@ (8000f08 <Comms_Process+0x354>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b05      	cmp	r3, #5
 8000bc2:	d900      	bls.n	8000bc6 <Comms_Process+0x12>
 8000bc4:	e23f      	b.n	8001046 <Comms_Process+0x492>
 8000bc6:	009a      	lsls	r2, r3, #2
 8000bc8:	4bd0      	ldr	r3, [pc, #832]	@ (8000f0c <Comms_Process+0x358>)
 8000bca:	18d3      	adds	r3, r2, r3
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	469f      	mov	pc, r3

	    case STATE_WAIT_ASSIGNMENT:
	        if (CircularBuffer_ReadLine(&circ_left, temp_buffer_left, UART_BUFFER_SIZE)) {
 8000bd0:	49cf      	ldr	r1, [pc, #828]	@ (8000f10 <Comms_Process+0x35c>)
 8000bd2:	4bd0      	ldr	r3, [pc, #832]	@ (8000f14 <Comms_Process+0x360>)
 8000bd4:	2210      	movs	r2, #16
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff ff28 	bl	8000a2c <CircularBuffer_ReadLine>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d100      	bne.n	8000be2 <Comms_Process+0x2e>
 8000be0:	e228      	b.n	8001034 <Comms_Process+0x480>

	            CMD = ParseCommand(temp_buffer_left);
 8000be2:	4bcb      	ldr	r3, [pc, #812]	@ (8000f10 <Comms_Process+0x35c>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fe17 	bl	8000818 <ParseCommand>
 8000bea:	0003      	movs	r3, r0
 8000bec:	001a      	movs	r2, r3
 8000bee:	4bca      	ldr	r3, [pc, #808]	@ (8000f18 <Comms_Process+0x364>)
 8000bf0:	701a      	strb	r2, [r3, #0]

	            switch(CMD) {
 8000bf2:	4bc9      	ldr	r3, [pc, #804]	@ (8000f18 <Comms_Process+0x364>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b06      	cmp	r3, #6
 8000bfa:	d900      	bls.n	8000bfe <Comms_Process+0x4a>
 8000bfc:	e0f3      	b.n	8000de6 <Comms_Process+0x232>
 8000bfe:	009a      	lsls	r2, r3, #2
 8000c00:	4bc6      	ldr	r3, [pc, #792]	@ (8000f1c <Comms_Process+0x368>)
 8000c02:	18d3      	adds	r3, r2, r3
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	469f      	mov	pc, r3

	    			case CMD_CHAR: {

						// Buscar los dos puntos
						char* index_str = &temp_buffer_left[5];
 8000c08:	4bc5      	ldr	r3, [pc, #788]	@ (8000f20 <Comms_Process+0x36c>)
 8000c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
						char* colon_ptr = strchr(index_str,':');
 8000c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c0e:	213a      	movs	r1, #58	@ 0x3a
 8000c10:	0018      	movs	r0, r3
 8000c12:	f005 fa95 	bl	8006140 <strchr>
 8000c16:	0003      	movs	r3, r0
 8000c18:	64bb      	str	r3, [r7, #72]	@ 0x48

						if(colon_ptr != NULL){
 8000c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d100      	bne.n	8000c22 <Comms_Process+0x6e>
 8000c20:	e0e3      	b.n	8000dea <Comms_Process+0x236>
							*colon_ptr = '\0';
 8000c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
							uint8_t index = atoi(index_str);
 8000c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f005 f9ae 	bl	8005f8c <atoi>
 8000c30:	0002      	movs	r2, r0
 8000c32:	2547      	movs	r5, #71	@ 0x47
 8000c34:	197b      	adds	r3, r7, r5
 8000c36:	701a      	strb	r2, [r3, #0]

							char* remaining_letters = colon_ptr + 1;
 8000c38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	643b      	str	r3, [r7, #64]	@ 0x40

							if(strlen(remaining_letters)>0){
 8000c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d100      	bne.n	8000c48 <Comms_Process+0x94>
 8000c46:	e0d0      	b.n	8000dea <Comms_Process+0x236>
								my_letter = remaining_letters[0];
 8000c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	4bb5      	ldr	r3, [pc, #724]	@ (8000f24 <Comms_Process+0x370>)
 8000c4e:	701a      	strb	r2, [r3, #0]
								my_index = index;
 8000c50:	4bb5      	ldr	r3, [pc, #724]	@ (8000f28 <Comms_Process+0x374>)
 8000c52:	197a      	adds	r2, r7, r5
 8000c54:	7812      	ldrb	r2, [r2, #0]
 8000c56:	701a      	strb	r2, [r3, #0]
								Braille_Display(my_letter);
 8000c58:	4bb2      	ldr	r3, [pc, #712]	@ (8000f24 <Comms_Process+0x370>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff fd36 	bl	80006d0 <Braille_Display>

								//Resends leftover
								if(strlen(&remaining_letters[1])>0 && uart_right != NULL){
 8000c64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c66:	3301      	adds	r3, #1
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d100      	bne.n	8000c70 <Comms_Process+0xbc>
 8000c6e:	e0bc      	b.n	8000dea <Comms_Process+0x236>
 8000c70:	4bae      	ldr	r3, [pc, #696]	@ (8000f2c <Comms_Process+0x378>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d100      	bne.n	8000c7a <Comms_Process+0xc6>
 8000c78:	e0b7      	b.n	8000dea <Comms_Process+0x236>
									char forward_msg[UART_BUFFER_SIZE] = {0};
 8000c7a:	2430      	movs	r4, #48	@ 0x30
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	0018      	movs	r0, r3
 8000c80:	2310      	movs	r3, #16
 8000c82:	001a      	movs	r2, r3
 8000c84:	2100      	movs	r1, #0
 8000c86:	f005 fa53 	bl	8006130 <memset>
									snprintf(forward_msg,sizeof(forward_msg), "CHAR:%d:%s", index+1,&remaining_letters[1]);
 8000c8a:	197b      	adds	r3, r7, r5
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	1c59      	adds	r1, r3, #1
 8000c90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c92:	3301      	adds	r3, #1
 8000c94:	4aa6      	ldr	r2, [pc, #664]	@ (8000f30 <Comms_Process+0x37c>)
 8000c96:	0025      	movs	r5, r4
 8000c98:	1978      	adds	r0, r7, r5
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	000b      	movs	r3, r1
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	f005 fa10 	bl	80060c4 <sniprintf>
									HAL_UART_Transmit(uart_right, (uint8_t*)forward_msg, strlen(forward_msg), HAL_MAX_DELAY);
 8000ca4:	4ba1      	ldr	r3, [pc, #644]	@ (8000f2c <Comms_Process+0x378>)
 8000ca6:	681c      	ldr	r4, [r3, #0]
 8000ca8:	197b      	adds	r3, r7, r5
 8000caa:	0018      	movs	r0, r3
 8000cac:	f7ff fa36 	bl	800011c <strlen>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	425b      	negs	r3, r3
 8000cb8:	1979      	adds	r1, r7, r5
 8000cba:	0020      	movs	r0, r4
 8000cbc:	f003 f9c8 	bl	8004050 <HAL_UART_Transmit>
								}

							}

						}
						break;
 8000cc0:	e093      	b.n	8000dea <Comms_Process+0x236>
					}

					// WORD COMMAND
	    			case CMD_WORD: {
						strncpy(original_word, &temp_buffer_left[5], MAX_WORD_LENGTH);
 8000cc2:	4997      	ldr	r1, [pc, #604]	@ (8000f20 <Comms_Process+0x36c>)
 8000cc4:	4b9b      	ldr	r3, [pc, #620]	@ (8000f34 <Comms_Process+0x380>)
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f005 fa58 	bl	800617e <strncpy>
						original_word[MAX_WORD_LENGTH] = '\0';
 8000cce:	4b99      	ldr	r3, [pc, #612]	@ (8000f34 <Comms_Process+0x380>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	711a      	strb	r2, [r3, #4]

						//Resends WORD
						if (uart_right != NULL) {
 8000cd4:	4b95      	ldr	r3, [pc, #596]	@ (8000f2c <Comms_Process+0x378>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d100      	bne.n	8000cde <Comms_Process+0x12a>
 8000cdc:	e087      	b.n	8000dee <Comms_Process+0x23a>
								HAL_UART_Transmit(uart_right, (uint8_t*)temp_buffer_left, strlen(temp_buffer_left), HAL_MAX_DELAY);
 8000cde:	4b93      	ldr	r3, [pc, #588]	@ (8000f2c <Comms_Process+0x378>)
 8000ce0:	681c      	ldr	r4, [r3, #0]
 8000ce2:	4b8b      	ldr	r3, [pc, #556]	@ (8000f10 <Comms_Process+0x35c>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fa19 	bl	800011c <strlen>
 8000cea:	0003      	movs	r3, r0
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	2301      	movs	r3, #1
 8000cf0:	425b      	negs	r3, r3
 8000cf2:	4987      	ldr	r1, [pc, #540]	@ (8000f10 <Comms_Process+0x35c>)
 8000cf4:	0020      	movs	r0, r4
 8000cf6:	f003 f9ab 	bl	8004050 <HAL_UART_Transmit>
							}

						break;
 8000cfa:	e078      	b.n	8000dee <Comms_Process+0x23a>

					}

	    			// START COMMAND
	    			case CMD_START:{
						if (my_letter != '\0' && original_word[0] != '\0') {
 8000cfc:	4b89      	ldr	r3, [pc, #548]	@ (8000f24 <Comms_Process+0x370>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <Comms_Process+0x160>
 8000d06:	4b8b      	ldr	r3, [pc, #556]	@ (8000f34 <Comms_Process+0x380>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <Comms_Process+0x160>
							comms_state = STATE_READY;
 8000d0e:	4b7e      	ldr	r3, [pc, #504]	@ (8000f08 <Comms_Process+0x354>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
						}
						//Resends START
						if (uart_right != NULL) {
 8000d14:	4b85      	ldr	r3, [pc, #532]	@ (8000f2c <Comms_Process+0x378>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d06a      	beq.n	8000df2 <Comms_Process+0x23e>
								HAL_UART_Transmit(uart_right, (uint8_t*)temp_buffer_left, strlen(temp_buffer_left), HAL_MAX_DELAY);
 8000d1c:	4b83      	ldr	r3, [pc, #524]	@ (8000f2c <Comms_Process+0x378>)
 8000d1e:	681c      	ldr	r4, [r3, #0]
 8000d20:	4b7b      	ldr	r3, [pc, #492]	@ (8000f10 <Comms_Process+0x35c>)
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff f9fa 	bl	800011c <strlen>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	425b      	negs	r3, r3
 8000d30:	4977      	ldr	r1, [pc, #476]	@ (8000f10 <Comms_Process+0x35c>)
 8000d32:	0020      	movs	r0, r4
 8000d34:	f003 f98c 	bl	8004050 <HAL_UART_Transmit>
							}
						break;
 8000d38:	e05b      	b.n	8000df2 <Comms_Process+0x23e>
	    			}

					// RESET COMMAND
	    			case CMD_RESET :{
						Comms_TriggerReset();
 8000d3a:	f000 f9d9 	bl	80010f0 <Comms_TriggerReset>

						// Resends RESET
						if (uart_right != NULL) {
 8000d3e:	4b7b      	ldr	r3, [pc, #492]	@ (8000f2c <Comms_Process+0x378>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d057      	beq.n	8000df6 <Comms_Process+0x242>
							HAL_UART_Transmit(uart_right, (uint8_t*)temp_buffer_left, strlen(temp_buffer_left), HAL_MAX_DELAY);
 8000d46:	4b79      	ldr	r3, [pc, #484]	@ (8000f2c <Comms_Process+0x378>)
 8000d48:	681c      	ldr	r4, [r3, #0]
 8000d4a:	4b71      	ldr	r3, [pc, #452]	@ (8000f10 <Comms_Process+0x35c>)
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff f9e5 	bl	800011c <strlen>
 8000d52:	0003      	movs	r3, r0
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	2301      	movs	r3, #1
 8000d58:	425b      	negs	r3, r3
 8000d5a:	496d      	ldr	r1, [pc, #436]	@ (8000f10 <Comms_Process+0x35c>)
 8000d5c:	0020      	movs	r0, r4
 8000d5e:	f003 f977 	bl	8004050 <HAL_UART_Transmit>
						}
						break;
 8000d62:	e048      	b.n	8000df6 <Comms_Process+0x242>
	    			}

					// FIRST ASSIGNMENT TODO
	    			case CMD_FIRST:{
							if (original_word[0] == my_letter && my_index == 0) {
 8000d64:	4b73      	ldr	r3, [pc, #460]	@ (8000f34 <Comms_Process+0x380>)
 8000d66:	781a      	ldrb	r2, [r3, #0]
 8000d68:	4b6e      	ldr	r3, [pc, #440]	@ (8000f24 <Comms_Process+0x370>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d106      	bne.n	8000d80 <Comms_Process+0x1cc>
 8000d72:	4b6d      	ldr	r3, [pc, #436]	@ (8000f28 <Comms_Process+0x374>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d102      	bne.n	8000d80 <Comms_Process+0x1cc>
								is_first = true;
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	@ (8000f38 <Comms_Process+0x384>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]
							}
							if (uart_right != NULL) {
 8000d80:	4b6a      	ldr	r3, [pc, #424]	@ (8000f2c <Comms_Process+0x378>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d038      	beq.n	8000dfa <Comms_Process+0x246>
								HAL_UART_Transmit(uart_right, (uint8_t*)"FIRST", 5, HAL_MAX_DELAY);
 8000d88:	4b68      	ldr	r3, [pc, #416]	@ (8000f2c <Comms_Process+0x378>)
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	425b      	negs	r3, r3
 8000d90:	496a      	ldr	r1, [pc, #424]	@ (8000f3c <Comms_Process+0x388>)
 8000d92:	2205      	movs	r2, #5
 8000d94:	f003 f95c 	bl	8004050 <HAL_UART_Transmit>
							}
							break;
 8000d98:	e02f      	b.n	8000dfa <Comms_Process+0x246>
	    			}

					// ANCHOR ASSIGNMENT TODO
	    			case CMD_ANCHOR: {
						size_t len = strlen(original_word);
 8000d9a:	4b66      	ldr	r3, [pc, #408]	@ (8000f34 <Comms_Process+0x380>)
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff f9bd 	bl	800011c <strlen>
 8000da2:	0003      	movs	r3, r0
 8000da4:	653b      	str	r3, [r7, #80]	@ 0x50
						if (original_word[len - 1] == my_letter && my_index == (len - 1)) {
 8000da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000da8:	3b01      	subs	r3, #1
 8000daa:	4a62      	ldr	r2, [pc, #392]	@ (8000f34 <Comms_Process+0x380>)
 8000dac:	5cd2      	ldrb	r2, [r2, r3]
 8000dae:	4b5d      	ldr	r3, [pc, #372]	@ (8000f24 <Comms_Process+0x370>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d109      	bne.n	8000dcc <Comms_Process+0x218>
 8000db8:	4b5b      	ldr	r3, [pc, #364]	@ (8000f28 <Comms_Process+0x374>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d102      	bne.n	8000dcc <Comms_Process+0x218>
							is_anchor = true;
 8000dc6:	4b5e      	ldr	r3, [pc, #376]	@ (8000f40 <Comms_Process+0x38c>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
						}
						if (uart_right != NULL) {
 8000dcc:	4b57      	ldr	r3, [pc, #348]	@ (8000f2c <Comms_Process+0x378>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d014      	beq.n	8000dfe <Comms_Process+0x24a>
							HAL_UART_Transmit(uart_right, (uint8_t*)"ANCHOR", 6, HAL_MAX_DELAY);
 8000dd4:	4b55      	ldr	r3, [pc, #340]	@ (8000f2c <Comms_Process+0x378>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	425b      	negs	r3, r3
 8000ddc:	4959      	ldr	r1, [pc, #356]	@ (8000f44 <Comms_Process+0x390>)
 8000dde:	2206      	movs	r2, #6
 8000de0:	f003 f936 	bl	8004050 <HAL_UART_Transmit>
						}
						break;
 8000de4:	e00b      	b.n	8000dfe <Comms_Process+0x24a>
	    			}

	    			default:
	    				break;
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	e124      	b.n	8001034 <Comms_Process+0x480>
						break;
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	e122      	b.n	8001034 <Comms_Process+0x480>
						break;
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	e120      	b.n	8001034 <Comms_Process+0x480>
						break;
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	e11e      	b.n	8001034 <Comms_Process+0x480>
						break;
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	e11c      	b.n	8001034 <Comms_Process+0x480>
							break;
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	e11a      	b.n	8001034 <Comms_Process+0x480>
						break;
 8000dfe:	46c0      	nop			@ (mov r8, r8)
	            }
	        }
	        break;
 8000e00:	e118      	b.n	8001034 <Comms_Process+0x480>

	    case STATE_READY:
	        if (buzzer_state == BEEP_NONE) {
 8000e02:	4b51      	ldr	r3, [pc, #324]	@ (8000f48 <Comms_Process+0x394>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d103      	bne.n	8000e12 <Comms_Process+0x25e>
	            StartBuzzer(BEEP_READY);
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff fd56 	bl	80008bc <StartBuzzer>
	        } else if (UpdateBuzzer()) {
	            comms_state = STATE_GAME;
	        }
	        break;
 8000e10:	e112      	b.n	8001038 <Comms_Process+0x484>
	        } else if (UpdateBuzzer()) {
 8000e12:	f7ff fd75 	bl	8000900 <UpdateBuzzer>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d100      	bne.n	8000e1c <Comms_Process+0x268>
 8000e1a:	e10d      	b.n	8001038 <Comms_Process+0x484>
	            comms_state = STATE_GAME;
 8000e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f08 <Comms_Process+0x354>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	701a      	strb	r2, [r3, #0]
	        break;
 8000e22:	e109      	b.n	8001038 <Comms_Process+0x484>

	    case STATE_GAME:

	        if (is_first && !seq_started) {
 8000e24:	4b44      	ldr	r3, [pc, #272]	@ (8000f38 <Comms_Process+0x384>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d01f      	beq.n	8000e6c <Comms_Process+0x2b8>
 8000e2c:	4b47      	ldr	r3, [pc, #284]	@ (8000f4c <Comms_Process+0x398>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2201      	movs	r2, #1
 8000e32:	4053      	eors	r3, r2
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d018      	beq.n	8000e6c <Comms_Process+0x2b8>
	            char msg[UART_BUFFER_SIZE];
	            snprintf(msg, sizeof(msg), "SEQ:%c", my_letter);
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f24 <Comms_Process+0x370>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	4a43      	ldr	r2, [pc, #268]	@ (8000f50 <Comms_Process+0x39c>)
 8000e42:	2520      	movs	r5, #32
 8000e44:	1978      	adds	r0, r7, r5
 8000e46:	2110      	movs	r1, #16
 8000e48:	f005 f93c 	bl	80060c4 <sniprintf>
	            HAL_UART_Transmit(uart_right, (uint8_t*)msg, strlen(msg), HAL_TIMEOUT);
 8000e4c:	4b37      	ldr	r3, [pc, #220]	@ (8000f2c <Comms_Process+0x378>)
 8000e4e:	681c      	ldr	r4, [r3, #0]
 8000e50:	197b      	adds	r3, r7, r5
 8000e52:	0018      	movs	r0, r3
 8000e54:	f7ff f962 	bl	800011c <strlen>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	1979      	adds	r1, r7, r5
 8000e5e:	2303      	movs	r3, #3
 8000e60:	0020      	movs	r0, r4
 8000e62:	f003 f8f5 	bl	8004050 <HAL_UART_Transmit>
	            seq_started = true;
 8000e66:	4b39      	ldr	r3, [pc, #228]	@ (8000f4c <Comms_Process+0x398>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
	        }

	        // Procesar datos recibidos por la izquierda
	        if (CircularBuffer_ReadLine(&circ_left, temp_buffer_left,UART_BUFFER_SIZE)){
 8000e6c:	4928      	ldr	r1, [pc, #160]	@ (8000f10 <Comms_Process+0x35c>)
 8000e6e:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <Comms_Process+0x360>)
 8000e70:	2210      	movs	r2, #16
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff fdda 	bl	8000a2c <CircularBuffer_ReadLine>
 8000e78:	1e03      	subs	r3, r0, #0
 8000e7a:	d100      	bne.n	8000e7e <Comms_Process+0x2ca>
 8000e7c:	e091      	b.n	8000fa2 <Comms_Process+0x3ee>

	            if (strncmp(temp_buffer_left, "SEQ:", 4) == 0) {
 8000e7e:	4935      	ldr	r1, [pc, #212]	@ (8000f54 <Comms_Process+0x3a0>)
 8000e80:	4b23      	ldr	r3, [pc, #140]	@ (8000f10 <Comms_Process+0x35c>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	0018      	movs	r0, r3
 8000e86:	f005 f969 	bl	800615c <strncmp>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d16e      	bne.n	8000f6c <Comms_Process+0x3b8>
	                char* seq = &temp_buffer_left[4];
 8000e8e:	4b32      	ldr	r3, [pc, #200]	@ (8000f58 <Comms_Process+0x3a4>)
 8000e90:	657b      	str	r3, [r7, #84]	@ 0x54
	                char new_seq[UART_BUFFER_SIZE];
	                snprintf(new_seq, sizeof(new_seq), "%.*s%c", (int)(sizeof(new_seq) - 2), seq, my_letter);
 8000e92:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <Comms_Process+0x370>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4a30      	ldr	r2, [pc, #192]	@ (8000f5c <Comms_Process+0x3a8>)
 8000e9a:	2410      	movs	r4, #16
 8000e9c:	1938      	adds	r0, r7, r4
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	230e      	movs	r3, #14
 8000ea6:	2110      	movs	r1, #16
 8000ea8:	f005 f90c 	bl	80060c4 <sniprintf>

	                if (is_anchor && strcmp(new_seq, original_word) == 0) {
 8000eac:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <Comms_Process+0x38c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d012      	beq.n	8000eda <Comms_Process+0x326>
 8000eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8000f34 <Comms_Process+0x380>)
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	0011      	movs	r1, r2
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff f924 	bl	8000108 <strcmp>
 8000ec0:	1e03      	subs	r3, r0, #0
 8000ec2:	d10a      	bne.n	8000eda <Comms_Process+0x326>
	                    HAL_UART_Transmit(uart_left, (uint8_t*)"WIN", 3, HAL_TIMEOUT);
 8000ec4:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <Comms_Process+0x3ac>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	4926      	ldr	r1, [pc, #152]	@ (8000f64 <Comms_Process+0x3b0>)
 8000eca:	2303      	movs	r3, #3
 8000ecc:	2203      	movs	r2, #3
 8000ece:	f003 f8bf 	bl	8004050 <HAL_UART_Transmit>
	                    comms_state = STATE_SUCCESS;
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <Comms_Process+0x354>)
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e063      	b.n	8000fa2 <Comms_Process+0x3ee>
	                } else {
	                    char msg[UART_BUFFER_SIZE];
	                    snprintf(msg, sizeof(msg), "SEQ:%.*s", (int)(sizeof(msg) - 5), new_seq);
 8000eda:	4a23      	ldr	r2, [pc, #140]	@ (8000f68 <Comms_Process+0x3b4>)
 8000edc:	0038      	movs	r0, r7
 8000ede:	2310      	movs	r3, #16
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	230b      	movs	r3, #11
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	f005 f8ec 	bl	80060c4 <sniprintf>
	                    HAL_UART_Transmit(uart_right, (uint8_t*)msg, strlen(msg), HAL_TIMEOUT);
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <Comms_Process+0x378>)
 8000eee:	681c      	ldr	r4, [r3, #0]
 8000ef0:	003b      	movs	r3, r7
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff f912 	bl	800011c <strlen>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	0039      	movs	r1, r7
 8000efe:	2303      	movs	r3, #3
 8000f00:	0020      	movs	r0, r4
 8000f02:	f003 f8a5 	bl	8004050 <HAL_UART_Transmit>
 8000f06:	e04c      	b.n	8000fa2 <Comms_Process+0x3ee>
 8000f08:	20000098 	.word	0x20000098
 8000f0c:	08006b84 	.word	0x08006b84
 8000f10:	20000144 	.word	0x20000144
 8000f14:	200000b0 	.word	0x200000b0
 8000f18:	20000099 	.word	0x20000099
 8000f1c:	08006b9c 	.word	0x08006b9c
 8000f20:	20000149 	.word	0x20000149
 8000f24:	2000009a 	.word	0x2000009a
 8000f28:	20000001 	.word	0x20000001
 8000f2c:	20000140 	.word	0x20000140
 8000f30:	08006ad4 	.word	0x08006ad4
 8000f34:	2000009c 	.word	0x2000009c
 8000f38:	200000a1 	.word	0x200000a1
 8000f3c:	08006ac4 	.word	0x08006ac4
 8000f40:	200000a2 	.word	0x200000a2
 8000f44:	08006acc 	.word	0x08006acc
 8000f48:	200000a8 	.word	0x200000a8
 8000f4c:	200000a3 	.word	0x200000a3
 8000f50:	08006ae0 	.word	0x08006ae0
 8000f54:	08006ae8 	.word	0x08006ae8
 8000f58:	20000148 	.word	0x20000148
 8000f5c:	08006af0 	.word	0x08006af0
 8000f60:	2000013c 	.word	0x2000013c
 8000f64:	08006af8 	.word	0x08006af8
 8000f68:	08006afc 	.word	0x08006afc
	                }
	            }

	            else if (strncmp(temp_buffer_left, "WIN", 3) == 0) {
 8000f6c:	4938      	ldr	r1, [pc, #224]	@ (8001050 <Comms_Process+0x49c>)
 8000f6e:	4b39      	ldr	r3, [pc, #228]	@ (8001054 <Comms_Process+0x4a0>)
 8000f70:	2203      	movs	r2, #3
 8000f72:	0018      	movs	r0, r3
 8000f74:	f005 f8f2 	bl	800615c <strncmp>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d112      	bne.n	8000fa2 <Comms_Process+0x3ee>
	                Braille_Display(' ');
 8000f7c:	2020      	movs	r0, #32
 8000f7e:	f7ff fba7 	bl	80006d0 <Braille_Display>
	                comms_state = STATE_SUCCESS;
 8000f82:	4b35      	ldr	r3, [pc, #212]	@ (8001058 <Comms_Process+0x4a4>)
 8000f84:	2204      	movs	r2, #4
 8000f86:	701a      	strb	r2, [r3, #0]
	                HAL_UART_Transmit(uart_right, (uint8_t*)temp_buffer_left, strlen(temp_buffer_left), HAL_TIMEOUT);
 8000f88:	4b34      	ldr	r3, [pc, #208]	@ (800105c <Comms_Process+0x4a8>)
 8000f8a:	681c      	ldr	r4, [r3, #0]
 8000f8c:	4b31      	ldr	r3, [pc, #196]	@ (8001054 <Comms_Process+0x4a0>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f7ff f8c4 	bl	800011c <strlen>
 8000f94:	0003      	movs	r3, r0
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	492e      	ldr	r1, [pc, #184]	@ (8001054 <Comms_Process+0x4a0>)
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	0020      	movs	r0, r4
 8000f9e:	f003 f857 	bl	8004050 <HAL_UART_Transmit>
	            }
	        }

	        // Procesar datos recibidos por la derecha
	        if (CircularBuffer_ReadLine(&circ_right, temp_buffer_right,UART_BUFFER_SIZE)){
 8000fa2:	492f      	ldr	r1, [pc, #188]	@ (8001060 <Comms_Process+0x4ac>)
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8001064 <Comms_Process+0x4b0>)
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff fd3f 	bl	8000a2c <CircularBuffer_ReadLine>
 8000fae:	1e03      	subs	r3, r0, #0
 8000fb0:	d044      	beq.n	800103c <Comms_Process+0x488>

	            if (strncmp(temp_buffer_right, "WIN", 3) == 0) {
 8000fb2:	4927      	ldr	r1, [pc, #156]	@ (8001050 <Comms_Process+0x49c>)
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001060 <Comms_Process+0x4ac>)
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f005 f8cf 	bl	800615c <strncmp>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d13c      	bne.n	800103c <Comms_Process+0x488>
	                Braille_Display(' ');
 8000fc2:	2020      	movs	r0, #32
 8000fc4:	f7ff fb84 	bl	80006d0 <Braille_Display>
	                comms_state = STATE_SUCCESS;
 8000fc8:	4b23      	ldr	r3, [pc, #140]	@ (8001058 <Comms_Process+0x4a4>)
 8000fca:	2204      	movs	r2, #4
 8000fcc:	701a      	strb	r2, [r3, #0]
	                HAL_UART_Transmit(uart_left, (uint8_t*)temp_buffer_right, strlen(temp_buffer_right), HAL_TIMEOUT);
 8000fce:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <Comms_Process+0x4b4>)
 8000fd0:	681c      	ldr	r4, [r3, #0]
 8000fd2:	4b23      	ldr	r3, [pc, #140]	@ (8001060 <Comms_Process+0x4ac>)
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff f8a1 	bl	800011c <strlen>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4920      	ldr	r1, [pc, #128]	@ (8001060 <Comms_Process+0x4ac>)
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	0020      	movs	r0, r4
 8000fe4:	f003 f834 	bl	8004050 <HAL_UART_Transmit>
	            }
	        }

	        break;
 8000fe8:	e028      	b.n	800103c <Comms_Process+0x488>
	    case STATE_VERIFY:
	        // (Optional intermediate state)
	        break;

	    case STATE_SUCCESS:
	        if (buzzer_state == BEEP_NONE) {
 8000fea:	4b20      	ldr	r3, [pc, #128]	@ (800106c <Comms_Process+0x4b8>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d103      	bne.n	8000ffa <Comms_Process+0x446>
	            StartBuzzer(BEEP_SUCCESS);
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f7ff fc62 	bl	80008bc <StartBuzzer>
	        } else if (UpdateBuzzer()) {
	            comms_state = STATE_SHUTDOWN;
	        }
	        break;
 8000ff8:	e022      	b.n	8001040 <Comms_Process+0x48c>
	        } else if (UpdateBuzzer()) {
 8000ffa:	f7ff fc81 	bl	8000900 <UpdateBuzzer>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d01e      	beq.n	8001040 <Comms_Process+0x48c>
	            comms_state = STATE_SHUTDOWN;
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <Comms_Process+0x4a4>)
 8001004:	2205      	movs	r2, #5
 8001006:	701a      	strb	r2, [r3, #0]
	        break;
 8001008:	e01a      	b.n	8001040 <Comms_Process+0x48c>

	    case STATE_SHUTDOWN:
	        // Ignore everything unless RESET arrives
	        if (CircularBuffer_ReadLine(&circ_left, temp_buffer_left,UART_BUFFER_SIZE)) {
 800100a:	4912      	ldr	r1, [pc, #72]	@ (8001054 <Comms_Process+0x4a0>)
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <Comms_Process+0x4bc>)
 800100e:	2210      	movs	r2, #16
 8001010:	0018      	movs	r0, r3
 8001012:	f7ff fd0b 	bl	8000a2c <CircularBuffer_ReadLine>
 8001016:	1e03      	subs	r3, r0, #0
 8001018:	d014      	beq.n	8001044 <Comms_Process+0x490>
	            if (strncmp(temp_buffer_left, "RESET", 5) == 0) {
 800101a:	4916      	ldr	r1, [pc, #88]	@ (8001074 <Comms_Process+0x4c0>)
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <Comms_Process+0x4a0>)
 800101e:	2205      	movs	r2, #5
 8001020:	0018      	movs	r0, r3
 8001022:	f005 f89b 	bl	800615c <strncmp>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d10c      	bne.n	8001044 <Comms_Process+0x490>
	                Comms_TriggerReset();
 800102a:	f000 f861 	bl	80010f0 <Comms_TriggerReset>
	            }
	        }
	        break;
 800102e:	e009      	b.n	8001044 <Comms_Process+0x490>
	        break;
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	e008      	b.n	8001046 <Comms_Process+0x492>
	        break;
 8001034:	46c0      	nop			@ (mov r8, r8)
 8001036:	e006      	b.n	8001046 <Comms_Process+0x492>
	        break;
 8001038:	46c0      	nop			@ (mov r8, r8)
 800103a:	e004      	b.n	8001046 <Comms_Process+0x492>
	        break;
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	e002      	b.n	8001046 <Comms_Process+0x492>
	        break;
 8001040:	46c0      	nop			@ (mov r8, r8)
 8001042:	e000      	b.n	8001046 <Comms_Process+0x492>
	        break;
 8001044:	46c0      	nop			@ (mov r8, r8)
	    }
}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b016      	add	sp, #88	@ 0x58
 800104c:	bdb0      	pop	{r4, r5, r7, pc}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	08006af8 	.word	0x08006af8
 8001054:	20000144 	.word	0x20000144
 8001058:	20000098 	.word	0x20000098
 800105c:	20000140 	.word	0x20000140
 8001060:	20000154 	.word	0x20000154
 8001064:	200000f4 	.word	0x200000f4
 8001068:	2000013c 	.word	0x2000013c
 800106c:	200000a8 	.word	0x200000a8
 8001070:	200000b0 	.word	0x200000b0
 8001074:	08006abc 	.word	0x08006abc

08001078 <Comms_OnUARTReceive>:

// --- Manejador de recepción por interrupción ---
void Comms_OnUARTReceive(UART_HandleTypeDef* huart) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	 if (huart == uart_left) {
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <Comms_OnUARTReceive+0x60>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	429a      	cmp	r2, r3
 8001088:	d10e      	bne.n	80010a8 <Comms_OnUARTReceive+0x30>
		CircularBuffer_Push(&circ_left, uart_byte_left);
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <Comms_OnUARTReceive+0x64>)
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <Comms_OnUARTReceive+0x68>)
 8001090:	0011      	movs	r1, r2
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff fc96 	bl	80009c4 <CircularBuffer_Push>
		HAL_UART_Receive_IT(uart_left, &uart_byte_left, 1);
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <Comms_OnUARTReceive+0x60>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	490f      	ldr	r1, [pc, #60]	@ (80010dc <Comms_OnUARTReceive+0x64>)
 800109e:	2201      	movs	r2, #1
 80010a0:	0018      	movs	r0, r3
 80010a2:	f003 f879 	bl	8004198 <HAL_UART_Receive_IT>

	} else if (huart == uart_right) {
		CircularBuffer_Push(&circ_right, uart_byte_right);
		HAL_UART_Receive_IT(uart_right, &uart_byte_right, 1);
	}
}
 80010a6:	e012      	b.n	80010ce <Comms_OnUARTReceive+0x56>
	} else if (huart == uart_right) {
 80010a8:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <Comms_OnUARTReceive+0x6c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d10d      	bne.n	80010ce <Comms_OnUARTReceive+0x56>
		CircularBuffer_Push(&circ_right, uart_byte_right);
 80010b2:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <Comms_OnUARTReceive+0x70>)
 80010b4:	781a      	ldrb	r2, [r3, #0]
 80010b6:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <Comms_OnUARTReceive+0x74>)
 80010b8:	0011      	movs	r1, r2
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff fc82 	bl	80009c4 <CircularBuffer_Push>
		HAL_UART_Receive_IT(uart_right, &uart_byte_right, 1);
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <Comms_OnUARTReceive+0x6c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4908      	ldr	r1, [pc, #32]	@ (80010e8 <Comms_OnUARTReceive+0x70>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	0018      	movs	r0, r3
 80010ca:	f003 f865 	bl	8004198 <HAL_UART_Receive_IT>
}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b002      	add	sp, #8
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	2000013c 	.word	0x2000013c
 80010dc:	20000138 	.word	0x20000138
 80010e0:	200000b0 	.word	0x200000b0
 80010e4:	20000140 	.word	0x20000140
 80010e8:	20000139 	.word	0x20000139
 80010ec:	200000f4 	.word	0x200000f4

080010f0 <Comms_TriggerReset>:

// --- Reset manual ---
void Comms_TriggerReset(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    comms_state = STATE_WAIT_ASSIGNMENT;
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <Comms_TriggerReset+0x1c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
    my_letter = '\0';
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <Comms_TriggerReset+0x20>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
    original_word[0] = '\0';
 8001100:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <Comms_TriggerReset+0x24>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000098 	.word	0x20000098
 8001110:	2000009a 	.word	0x2000009a
 8001114:	2000009c 	.word	0x2000009c

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111c:	f000 fd61 	bl	8001be2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001120:	f000 f830 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001124:	f000 fa60 	bl	80015e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001128:	f000 f878 	bl	800121c <MX_I2C1_Init>
  MX_TIM1_Init();
 800112c:	f000 f8b6 	bl	800129c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001130:	f000 f9d8 	bl	80014e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001134:	f000 fa24 	bl	8001580 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001138:	f000 f97c 	bl	8001434 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <main+0x5c>)
 800113e:	2100      	movs	r1, #0
 8001140:	0018      	movs	r0, r3
 8001142:	f001 ffb5 	bl	80030b0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <main+0x60>)
 8001148:	0018      	movs	r0, r3
 800114a:	f001 ff0b 	bl	8002f64 <HAL_TIM_Base_Start>
  Braille_Init (&htim3);
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <main+0x60>)
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff faa1 	bl	8000698 <Braille_Init>
  Comms_Init(&huart2, &huart1,&htim3);
 8001156:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <main+0x60>)
 8001158:	4908      	ldr	r1, [pc, #32]	@ (800117c <main+0x64>)
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <main+0x68>)
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff fcf1 	bl	8000b44 <Comms_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Braille_DebugUpdateAllPins();
 8001162:	f7ff f963 	bl	800042c <Braille_DebugUpdateAllPins>
	Comms_Process();
 8001166:	f7ff fd25 	bl	8000bb4 <Comms_Process>
	Braille_Update();
 800116a:	f7ff fad5 	bl	8000718 <Braille_Update>
	Braille_DebugUpdateAllPins();
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	e7f7      	b.n	8001162 <main+0x4a>
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	200001b8 	.word	0x200001b8
 8001178:	20000204 	.word	0x20000204
 800117c:	20000250 	.word	0x20000250
 8001180:	200002e4 	.word	0x200002e4

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b08d      	sub	sp, #52	@ 0x34
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	2414      	movs	r4, #20
 800118c:	193b      	adds	r3, r7, r4
 800118e:	0018      	movs	r0, r3
 8001190:	231c      	movs	r3, #28
 8001192:	001a      	movs	r2, r3
 8001194:	2100      	movs	r1, #0
 8001196:	f004 ffcb 	bl	8006130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119a:	003b      	movs	r3, r7
 800119c:	0018      	movs	r0, r3
 800119e:	2314      	movs	r3, #20
 80011a0:	001a      	movs	r2, r3
 80011a2:	2100      	movs	r1, #0
 80011a4:	f004 ffc4 	bl	8006130 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80011a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <SystemClock_Config+0x94>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <SystemClock_Config+0x94>)
 80011ae:	2107      	movs	r1, #7
 80011b0:	438a      	bics	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b4:	193b      	adds	r3, r7, r4
 80011b6:	2202      	movs	r2, #2
 80011b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	2280      	movs	r2, #128	@ 0x80
 80011be:	0052      	lsls	r2, r2, #1
 80011c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80011c2:	193b      	adds	r3, r7, r4
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	0152      	lsls	r2, r2, #5
 80011c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	2240      	movs	r2, #64	@ 0x40
 80011ce:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d0:	193b      	adds	r3, r7, r4
 80011d2:	0018      	movs	r0, r3
 80011d4:	f001 fa26 	bl	8002624 <HAL_RCC_OscConfig>
 80011d8:	1e03      	subs	r3, r0, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80011dc:	f000 fa96 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e0:	003b      	movs	r3, r7
 80011e2:	2207      	movs	r2, #7
 80011e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011e6:	003b      	movs	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	003b      	movs	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011f2:	003b      	movs	r3, r7
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011f8:	003b      	movs	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011fe:	003b      	movs	r3, r7
 8001200:	2100      	movs	r1, #0
 8001202:	0018      	movs	r0, r3
 8001204:	f001 fbf2 	bl	80029ec <HAL_RCC_ClockConfig>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800120c:	f000 fa7e 	bl	800170c <Error_Handler>
  }
}
 8001210:	46c0      	nop			@ (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b00d      	add	sp, #52	@ 0x34
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	40022000 	.word	0x40022000

0800121c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001220:	4b1b      	ldr	r3, [pc, #108]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001222:	4a1c      	ldr	r2, [pc, #112]	@ (8001294 <MX_I2C1_Init+0x78>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8001226:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001228:	4a1b      	ldr	r2, [pc, #108]	@ (8001298 <MX_I2C1_Init+0x7c>)
 800122a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001232:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001234:	2201      	movs	r2, #1
 8001236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_I2C1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001258:	0018      	movs	r0, r3
 800125a:	f001 f8a5 	bl	80023a8 <HAL_I2C_Init>
 800125e:	1e03      	subs	r3, r0, #0
 8001260:	d001      	beq.n	8001266 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001262:	f000 fa53 	bl	800170c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001266:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001268:	2100      	movs	r1, #0
 800126a:	0018      	movs	r0, r3
 800126c:	f001 f942 	bl	80024f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001270:	1e03      	subs	r3, r0, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001274:	f000 fa4a 	bl	800170c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <MX_I2C1_Init+0x74>)
 800127a:	2100      	movs	r1, #0
 800127c:	0018      	movs	r0, r3
 800127e:	f001 f985 	bl	800258c <HAL_I2CEx_ConfigDigitalFilter>
 8001282:	1e03      	subs	r3, r0, #0
 8001284:	d001      	beq.n	800128a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001286:	f000 fa41 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000164 	.word	0x20000164
 8001294:	40005400 	.word	0x40005400
 8001298:	00402d41 	.word	0x00402d41

0800129c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b09c      	sub	sp, #112	@ 0x70
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	2360      	movs	r3, #96	@ 0x60
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	0018      	movs	r0, r3
 80012a8:	2310      	movs	r3, #16
 80012aa:	001a      	movs	r2, r3
 80012ac:	2100      	movs	r1, #0
 80012ae:	f004 ff3f 	bl	8006130 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b2:	2354      	movs	r3, #84	@ 0x54
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	0018      	movs	r0, r3
 80012b8:	230c      	movs	r3, #12
 80012ba:	001a      	movs	r2, r3
 80012bc:	2100      	movs	r1, #0
 80012be:	f004 ff37 	bl	8006130 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c2:	2338      	movs	r3, #56	@ 0x38
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	0018      	movs	r0, r3
 80012c8:	231c      	movs	r3, #28
 80012ca:	001a      	movs	r2, r3
 80012cc:	2100      	movs	r1, #0
 80012ce:	f004 ff2f 	bl	8006130 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	0018      	movs	r0, r3
 80012d6:	2334      	movs	r3, #52	@ 0x34
 80012d8:	001a      	movs	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	f004 ff28 	bl	8006130 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e0:	4b51      	ldr	r3, [pc, #324]	@ (8001428 <MX_TIM1_Init+0x18c>)
 80012e2:	4a52      	ldr	r2, [pc, #328]	@ (800142c <MX_TIM1_Init+0x190>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012e6:	4b50      	ldr	r3, [pc, #320]	@ (8001428 <MX_TIM1_Init+0x18c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001428 <MX_TIM1_Init+0x18c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3000-1;
 80012f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001428 <MX_TIM1_Init+0x18c>)
 80012f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001430 <MX_TIM1_Init+0x194>)
 80012f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001428 <MX_TIM1_Init+0x18c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001428 <MX_TIM1_Init+0x18c>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001304:	4b48      	ldr	r3, [pc, #288]	@ (8001428 <MX_TIM1_Init+0x18c>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800130a:	4b47      	ldr	r3, [pc, #284]	@ (8001428 <MX_TIM1_Init+0x18c>)
 800130c:	0018      	movs	r0, r3
 800130e:	f001 fdd1 	bl	8002eb4 <HAL_TIM_Base_Init>
 8001312:	1e03      	subs	r3, r0, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001316:	f000 f9f9 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131a:	2160      	movs	r1, #96	@ 0x60
 800131c:	187b      	adds	r3, r7, r1
 800131e:	2280      	movs	r2, #128	@ 0x80
 8001320:	0152      	lsls	r2, r2, #5
 8001322:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001324:	187a      	adds	r2, r7, r1
 8001326:	4b40      	ldr	r3, [pc, #256]	@ (8001428 <MX_TIM1_Init+0x18c>)
 8001328:	0011      	movs	r1, r2
 800132a:	0018      	movs	r0, r3
 800132c:	f002 f898 	bl	8003460 <HAL_TIM_ConfigClockSource>
 8001330:	1e03      	subs	r3, r0, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001334:	f000 f9ea 	bl	800170c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001338:	4b3b      	ldr	r3, [pc, #236]	@ (8001428 <MX_TIM1_Init+0x18c>)
 800133a:	0018      	movs	r0, r3
 800133c:	f001 fe58 	bl	8002ff0 <HAL_TIM_PWM_Init>
 8001340:	1e03      	subs	r3, r0, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001344:	f000 f9e2 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2154      	movs	r1, #84	@ 0x54
 800134a:	187b      	adds	r3, r7, r1
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001350:	187b      	adds	r3, r7, r1
 8001352:	2200      	movs	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	187b      	adds	r3, r7, r1
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800135c:	187a      	adds	r2, r7, r1
 800135e:	4b32      	ldr	r3, [pc, #200]	@ (8001428 <MX_TIM1_Init+0x18c>)
 8001360:	0011      	movs	r1, r2
 8001362:	0018      	movs	r0, r3
 8001364:	f002 fd20 	bl	8003da8 <HAL_TIMEx_MasterConfigSynchronization>
 8001368:	1e03      	subs	r3, r0, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800136c:	f000 f9ce 	bl	800170c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001370:	2138      	movs	r1, #56	@ 0x38
 8001372:	187b      	adds	r3, r7, r1
 8001374:	2260      	movs	r2, #96	@ 0x60
 8001376:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001378:	187b      	adds	r3, r7, r1
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137e:	187b      	adds	r3, r7, r1
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001384:	187b      	adds	r3, r7, r1
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138a:	187b      	adds	r3, r7, r1
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001390:	187b      	adds	r3, r7, r1
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001396:	187b      	adds	r3, r7, r1
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139c:	1879      	adds	r1, r7, r1
 800139e:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <MX_TIM1_Init+0x18c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	0018      	movs	r0, r3
 80013a4:	f001 ff5c 	bl	8003260 <HAL_TIM_PWM_ConfigChannel>
 80013a8:	1e03      	subs	r3, r0, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80013ac:	f000 f9ae 	bl	800170c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2280      	movs	r2, #128	@ 0x80
 80013d2:	0192      	lsls	r2, r2, #6
 80013d4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2280      	movs	r2, #128	@ 0x80
 80013ec:	0492      	lsls	r2, r2, #18
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001402:	1d3a      	adds	r2, r7, #4
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <MX_TIM1_Init+0x18c>)
 8001406:	0011      	movs	r1, r2
 8001408:	0018      	movs	r0, r3
 800140a:	f002 fd2f 	bl	8003e6c <HAL_TIMEx_ConfigBreakDeadTime>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001412:	f000 f97b 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001416:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <MX_TIM1_Init+0x18c>)
 8001418:	0018      	movs	r0, r3
 800141a:	f000 fa37 	bl	800188c <HAL_TIM_MspPostInit>

}
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b01c      	add	sp, #112	@ 0x70
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	200001b8 	.word	0x200001b8
 800142c:	40012c00 	.word	0x40012c00
 8001430:	00000bb7 	.word	0x00000bb7

08001434 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	2310      	movs	r3, #16
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	0018      	movs	r0, r3
 8001440:	2310      	movs	r3, #16
 8001442:	001a      	movs	r2, r3
 8001444:	2100      	movs	r1, #0
 8001446:	f004 fe73 	bl	8006130 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	0018      	movs	r0, r3
 800144e:	230c      	movs	r3, #12
 8001450:	001a      	movs	r2, r3
 8001452:	2100      	movs	r1, #0
 8001454:	f004 fe6c 	bl	8006130 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001458:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <MX_TIM3_Init+0xa0>)
 800145a:	4a1f      	ldr	r2, [pc, #124]	@ (80014d8 <MX_TIM3_Init+0xa4>)
 800145c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 800145e:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <MX_TIM3_Init+0xa0>)
 8001460:	4a1e      	ldr	r2, [pc, #120]	@ (80014dc <MX_TIM3_Init+0xa8>)
 8001462:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <MX_TIM3_Init+0xa0>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800146a:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <MX_TIM3_Init+0xa0>)
 800146c:	4a1c      	ldr	r2, [pc, #112]	@ (80014e0 <MX_TIM3_Init+0xac>)
 800146e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <MX_TIM3_Init+0xa0>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <MX_TIM3_Init+0xa0>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800147c:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <MX_TIM3_Init+0xa0>)
 800147e:	0018      	movs	r0, r3
 8001480:	f001 fd18 	bl	8002eb4 <HAL_TIM_Base_Init>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d001      	beq.n	800148c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001488:	f000 f940 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	2110      	movs	r1, #16
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2280      	movs	r2, #128	@ 0x80
 8001492:	0152      	lsls	r2, r2, #5
 8001494:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001496:	187a      	adds	r2, r7, r1
 8001498:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <MX_TIM3_Init+0xa0>)
 800149a:	0011      	movs	r1, r2
 800149c:	0018      	movs	r0, r3
 800149e:	f001 ffdf 	bl	8003460 <HAL_TIM_ConfigClockSource>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80014a6:	f000 f931 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014b6:	1d3a      	adds	r2, r7, #4
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <MX_TIM3_Init+0xa0>)
 80014ba:	0011      	movs	r1, r2
 80014bc:	0018      	movs	r0, r3
 80014be:	f002 fc73 	bl	8003da8 <HAL_TIMEx_MasterConfigSynchronization>
 80014c2:	1e03      	subs	r3, r0, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80014c6:	f000 f921 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b008      	add	sp, #32
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	20000204 	.word	0x20000204
 80014d8:	40000400 	.word	0x40000400
 80014dc:	0000bb7f 	.word	0x0000bb7f
 80014e0:	0000ffff 	.word	0x0000ffff

080014e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e8:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 80014ea:	4a24      	ldr	r2, [pc, #144]	@ (800157c <MX_USART1_UART_Init+0x98>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ee:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 80014f0:	22e1      	movs	r2, #225	@ 0xe1
 80014f2:	0252      	lsls	r2, r2, #9
 80014f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001502:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151a:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001520:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001526:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 8001528:	2200      	movs	r2, #0
 800152a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 800152e:	0018      	movs	r0, r3
 8001530:	f002 fd38 	bl	8003fa4 <HAL_UART_Init>
 8001534:	1e03      	subs	r3, r0, #0
 8001536:	d001      	beq.n	800153c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001538:	f000 f8e8 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800153c:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 800153e:	2100      	movs	r1, #0
 8001540:	0018      	movs	r0, r3
 8001542:	f004 fc43 	bl	8005dcc <HAL_UARTEx_SetTxFifoThreshold>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d001      	beq.n	800154e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800154a:	f000 f8df 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800154e:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 8001550:	2100      	movs	r1, #0
 8001552:	0018      	movs	r0, r3
 8001554:	f004 fc7a 	bl	8005e4c <HAL_UARTEx_SetRxFifoThreshold>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800155c:	f000 f8d6 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <MX_USART1_UART_Init+0x94>)
 8001562:	0018      	movs	r0, r3
 8001564:	f004 fbf8 	bl	8005d58 <HAL_UARTEx_DisableFifoMode>
 8001568:	1e03      	subs	r3, r0, #0
 800156a:	d001      	beq.n	8001570 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800156c:	f000 f8ce 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001570:	46c0      	nop			@ (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	20000250 	.word	0x20000250
 800157c:	40013800 	.word	0x40013800

08001580 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001584:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <MX_USART2_UART_Init+0x60>)
 8001586:	4a17      	ldr	r2, [pc, #92]	@ (80015e4 <MX_USART2_UART_Init+0x64>)
 8001588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <MX_USART2_UART_Init+0x60>)
 800158c:	22e1      	movs	r2, #225	@ 0xe1
 800158e:	0252      	lsls	r2, r2, #9
 8001590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <MX_USART2_UART_Init+0x60>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <MX_USART2_UART_Init+0x60>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <MX_USART2_UART_Init+0x60>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <MX_USART2_UART_Init+0x60>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <MX_USART2_UART_Init+0x60>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <MX_USART2_UART_Init+0x60>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <MX_USART2_UART_Init+0x60>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <MX_USART2_UART_Init+0x60>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c2:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <MX_USART2_UART_Init+0x60>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c8:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <MX_USART2_UART_Init+0x60>)
 80015ca:	0018      	movs	r0, r3
 80015cc:	f002 fcea 	bl	8003fa4 <HAL_UART_Init>
 80015d0:	1e03      	subs	r3, r0, #0
 80015d2:	d001      	beq.n	80015d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015d4:	f000 f89a 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d8:	46c0      	nop			@ (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	200002e4 	.word	0x200002e4
 80015e4:	40004400 	.word	0x40004400

080015e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b089      	sub	sp, #36	@ 0x24
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	240c      	movs	r4, #12
 80015f0:	193b      	adds	r3, r7, r4
 80015f2:	0018      	movs	r0, r3
 80015f4:	2314      	movs	r3, #20
 80015f6:	001a      	movs	r2, r3
 80015f8:	2100      	movs	r1, #0
 80015fa:	f004 fd99 	bl	8006130 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	4b39      	ldr	r3, [pc, #228]	@ (80016e4 <MX_GPIO_Init+0xfc>)
 8001600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001602:	4b38      	ldr	r3, [pc, #224]	@ (80016e4 <MX_GPIO_Init+0xfc>)
 8001604:	2104      	movs	r1, #4
 8001606:	430a      	orrs	r2, r1
 8001608:	635a      	str	r2, [r3, #52]	@ 0x34
 800160a:	4b36      	ldr	r3, [pc, #216]	@ (80016e4 <MX_GPIO_Init+0xfc>)
 800160c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800160e:	2204      	movs	r2, #4
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b33      	ldr	r3, [pc, #204]	@ (80016e4 <MX_GPIO_Init+0xfc>)
 8001618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800161a:	4b32      	ldr	r3, [pc, #200]	@ (80016e4 <MX_GPIO_Init+0xfc>)
 800161c:	2101      	movs	r1, #1
 800161e:	430a      	orrs	r2, r1
 8001620:	635a      	str	r2, [r3, #52]	@ 0x34
 8001622:	4b30      	ldr	r3, [pc, #192]	@ (80016e4 <MX_GPIO_Init+0xfc>)
 8001624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001626:	2201      	movs	r2, #1
 8001628:	4013      	ands	r3, r2
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b2d      	ldr	r3, [pc, #180]	@ (80016e4 <MX_GPIO_Init+0xfc>)
 8001630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001632:	4b2c      	ldr	r3, [pc, #176]	@ (80016e4 <MX_GPIO_Init+0xfc>)
 8001634:	2102      	movs	r1, #2
 8001636:	430a      	orrs	r2, r1
 8001638:	635a      	str	r2, [r3, #52]	@ 0x34
 800163a:	4b2a      	ldr	r3, [pc, #168]	@ (80016e4 <MX_GPIO_Init+0xfc>)
 800163c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800163e:	2202      	movs	r2, #2
 8001640:	4013      	ands	r3, r2
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, F1_Pin|F2_Pin|C1_Pin|A1_Pin
 8001646:	4928      	ldr	r1, [pc, #160]	@ (80016e8 <MX_GPIO_Init+0x100>)
 8001648:	23a0      	movs	r3, #160	@ 0xa0
 800164a:	05db      	lsls	r3, r3, #23
 800164c:	2200      	movs	r2, #0
 800164e:	0018      	movs	r0, r3
 8001650:	f000 fe8d 	bl	800236e <HAL_GPIO_WritePin>
                          |A2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B2_Pin|B1_Pin|D2_Pin|D1_Pin
 8001654:	4b25      	ldr	r3, [pc, #148]	@ (80016ec <MX_GPIO_Init+0x104>)
 8001656:	2200      	movs	r2, #0
 8001658:	217b      	movs	r1, #123	@ 0x7b
 800165a:	0018      	movs	r0, r3
 800165c:	f000 fe87 	bl	800236e <HAL_GPIO_WritePin>
                          |E1_Pin|E2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, GPIO_PIN_RESET);
 8001660:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <MX_GPIO_Init+0x108>)
 8001662:	2200      	movs	r2, #0
 8001664:	2140      	movs	r1, #64	@ 0x40
 8001666:	0018      	movs	r0, r3
 8001668:	f000 fe81 	bl	800236e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : F1_Pin F2_Pin C1_Pin A1_Pin
                           A2_Pin */
  GPIO_InitStruct.Pin = F1_Pin|F2_Pin|C1_Pin|A1_Pin
 800166c:	193b      	adds	r3, r7, r4
 800166e:	4a1e      	ldr	r2, [pc, #120]	@ (80016e8 <MX_GPIO_Init+0x100>)
 8001670:	601a      	str	r2, [r3, #0]
                          |A2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	193b      	adds	r3, r7, r4
 8001674:	2201      	movs	r2, #1
 8001676:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	193b      	adds	r3, r7, r4
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	193b      	adds	r3, r7, r4
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	193a      	adds	r2, r7, r4
 8001686:	23a0      	movs	r3, #160	@ 0xa0
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	0011      	movs	r1, r2
 800168c:	0018      	movs	r0, r3
 800168e:	f000 fcdf 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B1_Pin D2_Pin D1_Pin
                           E1_Pin E2_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B1_Pin|D2_Pin|D1_Pin
 8001692:	193b      	adds	r3, r7, r4
 8001694:	227b      	movs	r2, #123	@ 0x7b
 8001696:	601a      	str	r2, [r3, #0]
                          |E1_Pin|E2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	193b      	adds	r3, r7, r4
 800169a:	2201      	movs	r2, #1
 800169c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	193b      	adds	r3, r7, r4
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	193b      	adds	r3, r7, r4
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	193b      	adds	r3, r7, r4
 80016ac:	4a0f      	ldr	r2, [pc, #60]	@ (80016ec <MX_GPIO_Init+0x104>)
 80016ae:	0019      	movs	r1, r3
 80016b0:	0010      	movs	r0, r2
 80016b2:	f000 fccd 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : C2_Pin */
  GPIO_InitStruct.Pin = C2_Pin;
 80016b6:	0021      	movs	r1, r4
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	2240      	movs	r2, #64	@ 0x40
 80016bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	2201      	movs	r2, #1
 80016c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	2200      	movs	r2, #0
 80016ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(C2_GPIO_Port, &GPIO_InitStruct);
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <MX_GPIO_Init+0x108>)
 80016d4:	0019      	movs	r1, r3
 80016d6:	0010      	movs	r0, r2
 80016d8:	f000 fcba 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016dc:	46c0      	nop			@ (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b009      	add	sp, #36	@ 0x24
 80016e2:	bd90      	pop	{r4, r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	00001930 	.word	0x00001930
 80016ec:	50000400 	.word	0x50000400
 80016f0:	50000800 	.word	0x50000800

080016f4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
    Comms_OnUARTReceive(huart);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	0018      	movs	r0, r3
 8001700:	f7ff fcba 	bl	8001078 <Comms_OnUARTReceive>
}
 8001704:	46c0      	nop			@ (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	b002      	add	sp, #8
 800170a:	bd80      	pop	{r7, pc}

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	46c0      	nop			@ (mov r8, r8)
 8001716:	e7fd      	b.n	8001714 <Error_Handler+0x8>

08001718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <HAL_MspInit+0x44>)
 8001720:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <HAL_MspInit+0x44>)
 8001724:	2101      	movs	r1, #1
 8001726:	430a      	orrs	r2, r1
 8001728:	641a      	str	r2, [r3, #64]	@ 0x40
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <HAL_MspInit+0x44>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	2201      	movs	r2, #1
 8001730:	4013      	ands	r3, r2
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_MspInit+0x44>)
 8001738:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800173a:	4b08      	ldr	r3, [pc, #32]	@ (800175c <HAL_MspInit+0x44>)
 800173c:	2180      	movs	r1, #128	@ 0x80
 800173e:	0549      	lsls	r1, r1, #21
 8001740:	430a      	orrs	r2, r1
 8001742:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001744:	4b05      	ldr	r3, [pc, #20]	@ (800175c <HAL_MspInit+0x44>)
 8001746:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001748:	2380      	movs	r3, #128	@ 0x80
 800174a:	055b      	lsls	r3, r3, #21
 800174c:	4013      	ands	r3, r2
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b091      	sub	sp, #68	@ 0x44
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	232c      	movs	r3, #44	@ 0x2c
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	0018      	movs	r0, r3
 800176e:	2314      	movs	r3, #20
 8001770:	001a      	movs	r2, r3
 8001772:	2100      	movs	r1, #0
 8001774:	f004 fcdc 	bl	8006130 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	2410      	movs	r4, #16
 800177a:	193b      	adds	r3, r7, r4
 800177c:	0018      	movs	r0, r3
 800177e:	231c      	movs	r3, #28
 8001780:	001a      	movs	r2, r3
 8001782:	2100      	movs	r1, #0
 8001784:	f004 fcd4 	bl	8006130 <memset>
  if(hi2c->Instance==I2C1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a22      	ldr	r2, [pc, #136]	@ (8001818 <HAL_I2C_MspInit+0xb8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d13e      	bne.n	8001810 <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001792:	193b      	adds	r3, r7, r4
 8001794:	2202      	movs	r2, #2
 8001796:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001798:	193b      	adds	r3, r7, r4
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	0018      	movs	r0, r3
 80017a2:	f001 fa9b 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 80017a6:	1e03      	subs	r3, r0, #0
 80017a8:	d001      	beq.n	80017ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017aa:	f7ff ffaf 	bl	800170c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <HAL_I2C_MspInit+0xbc>)
 80017b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017b2:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <HAL_I2C_MspInit+0xbc>)
 80017b4:	2102      	movs	r1, #2
 80017b6:	430a      	orrs	r2, r1
 80017b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80017ba:	4b18      	ldr	r3, [pc, #96]	@ (800181c <HAL_I2C_MspInit+0xbc>)
 80017bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017be:	2202      	movs	r2, #2
 80017c0:	4013      	ands	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80017c6:	212c      	movs	r1, #44	@ 0x2c
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	22c0      	movs	r2, #192	@ 0xc0
 80017cc:	0052      	lsls	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	2212      	movs	r2, #18
 80017d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	187b      	adds	r3, r7, r1
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80017e2:	187b      	adds	r3, r7, r1
 80017e4:	2206      	movs	r2, #6
 80017e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <HAL_I2C_MspInit+0xc0>)
 80017ec:	0019      	movs	r1, r3
 80017ee:	0010      	movs	r0, r2
 80017f0:	f000 fc2e 	bl	8002050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f4:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_I2C_MspInit+0xbc>)
 80017f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <HAL_I2C_MspInit+0xbc>)
 80017fa:	2180      	movs	r1, #128	@ 0x80
 80017fc:	0389      	lsls	r1, r1, #14
 80017fe:	430a      	orrs	r2, r1
 8001800:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_I2C_MspInit+0xbc>)
 8001804:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	039b      	lsls	r3, r3, #14
 800180a:	4013      	ands	r3, r2
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001810:	46c0      	nop			@ (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b011      	add	sp, #68	@ 0x44
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	40005400 	.word	0x40005400
 800181c:	40021000 	.word	0x40021000
 8001820:	50000400 	.word	0x50000400

08001824 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a13      	ldr	r2, [pc, #76]	@ (8001880 <HAL_TIM_Base_MspInit+0x5c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d10e      	bne.n	8001854 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001836:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <HAL_TIM_Base_MspInit+0x60>)
 8001838:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800183a:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <HAL_TIM_Base_MspInit+0x60>)
 800183c:	2180      	movs	r1, #128	@ 0x80
 800183e:	0109      	lsls	r1, r1, #4
 8001840:	430a      	orrs	r2, r1
 8001842:	641a      	str	r2, [r3, #64]	@ 0x40
 8001844:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <HAL_TIM_Base_MspInit+0x60>)
 8001846:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4013      	ands	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001852:	e010      	b.n	8001876 <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM3)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <HAL_TIM_Base_MspInit+0x64>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d10b      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <HAL_TIM_Base_MspInit+0x60>)
 8001860:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <HAL_TIM_Base_MspInit+0x60>)
 8001864:	2102      	movs	r1, #2
 8001866:	430a      	orrs	r2, r1
 8001868:	63da      	str	r2, [r3, #60]	@ 0x3c
 800186a:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_TIM_Base_MspInit+0x60>)
 800186c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800186e:	2202      	movs	r2, #2
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b004      	add	sp, #16
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	40012c00 	.word	0x40012c00
 8001884:	40021000 	.word	0x40021000
 8001888:	40000400 	.word	0x40000400

0800188c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b089      	sub	sp, #36	@ 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	240c      	movs	r4, #12
 8001896:	193b      	adds	r3, r7, r4
 8001898:	0018      	movs	r0, r3
 800189a:	2314      	movs	r3, #20
 800189c:	001a      	movs	r2, r3
 800189e:	2100      	movs	r1, #0
 80018a0:	f004 fc46 	bl	8006130 <memset>
  if(htim->Instance==TIM1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a15      	ldr	r2, [pc, #84]	@ (8001900 <HAL_TIM_MspPostInit+0x74>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d123      	bne.n	80018f6 <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <HAL_TIM_MspPostInit+0x78>)
 80018b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018b2:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <HAL_TIM_MspPostInit+0x78>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	430a      	orrs	r2, r1
 80018b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ba:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_TIM_MspPostInit+0x78>)
 80018bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018be:	2201      	movs	r2, #1
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80018c6:	193b      	adds	r3, r7, r4
 80018c8:	2280      	movs	r2, #128	@ 0x80
 80018ca:	0212      	lsls	r2, r2, #8
 80018cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	0021      	movs	r1, r4
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	2202      	movs	r2, #2
 80018d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	187b      	adds	r3, r7, r1
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	2202      	movs	r2, #2
 80018e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80018e8:	187a      	adds	r2, r7, r1
 80018ea:	23a0      	movs	r3, #160	@ 0xa0
 80018ec:	05db      	lsls	r3, r3, #23
 80018ee:	0011      	movs	r1, r2
 80018f0:	0018      	movs	r0, r3
 80018f2:	f000 fbad 	bl	8002050 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b009      	add	sp, #36	@ 0x24
 80018fc:	bd90      	pop	{r4, r7, pc}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	40012c00 	.word	0x40012c00
 8001904:	40021000 	.word	0x40021000

08001908 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b095      	sub	sp, #84	@ 0x54
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	233c      	movs	r3, #60	@ 0x3c
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	0018      	movs	r0, r3
 8001916:	2314      	movs	r3, #20
 8001918:	001a      	movs	r2, r3
 800191a:	2100      	movs	r1, #0
 800191c:	f004 fc08 	bl	8006130 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001920:	2420      	movs	r4, #32
 8001922:	193b      	adds	r3, r7, r4
 8001924:	0018      	movs	r0, r3
 8001926:	231c      	movs	r3, #28
 8001928:	001a      	movs	r2, r3
 800192a:	2100      	movs	r1, #0
 800192c:	f004 fc00 	bl	8006130 <memset>
  if(huart->Instance==USART1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a58      	ldr	r2, [pc, #352]	@ (8001a98 <HAL_UART_MspInit+0x190>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d16b      	bne.n	8001a12 <HAL_UART_MspInit+0x10a>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800193a:	193b      	adds	r3, r7, r4
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001940:	193b      	adds	r3, r7, r4
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001946:	193b      	adds	r3, r7, r4
 8001948:	0018      	movs	r0, r3
 800194a:	f001 f9c7 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 800194e:	1e03      	subs	r3, r0, #0
 8001950:	d001      	beq.n	8001956 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001952:	f7ff fedb 	bl	800170c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001956:	4b51      	ldr	r3, [pc, #324]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 8001958:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800195a:	4b50      	ldr	r3, [pc, #320]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 800195c:	2180      	movs	r1, #128	@ 0x80
 800195e:	01c9      	lsls	r1, r1, #7
 8001960:	430a      	orrs	r2, r1
 8001962:	641a      	str	r2, [r3, #64]	@ 0x40
 8001964:	4b4d      	ldr	r3, [pc, #308]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 8001966:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	01db      	lsls	r3, r3, #7
 800196c:	4013      	ands	r3, r2
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001972:	4b4a      	ldr	r3, [pc, #296]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 8001974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001976:	4b49      	ldr	r3, [pc, #292]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 8001978:	2104      	movs	r1, #4
 800197a:	430a      	orrs	r2, r1
 800197c:	635a      	str	r2, [r3, #52]	@ 0x34
 800197e:	4b47      	ldr	r3, [pc, #284]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 8001980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001982:	2204      	movs	r2, #4
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b44      	ldr	r3, [pc, #272]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 800198c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800198e:	4b43      	ldr	r3, [pc, #268]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 8001990:	2101      	movs	r1, #1
 8001992:	430a      	orrs	r2, r1
 8001994:	635a      	str	r2, [r3, #52]	@ 0x34
 8001996:	4b41      	ldr	r3, [pc, #260]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 8001998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199a:	2201      	movs	r2, #1
 800199c:	4013      	ands	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN (PC14)     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80019a2:	213c      	movs	r1, #60	@ 0x3c
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	2280      	movs	r2, #128	@ 0x80
 80019a8:	01d2      	lsls	r2, r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	000c      	movs	r4, r1
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	2202      	movs	r2, #2
 80019b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c6:	193b      	adds	r3, r7, r4
 80019c8:	4a35      	ldr	r2, [pc, #212]	@ (8001aa0 <HAL_UART_MspInit+0x198>)
 80019ca:	0019      	movs	r1, r3
 80019cc:	0010      	movs	r0, r2
 80019ce:	f000 fb3f 	bl	8002050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019d2:	0021      	movs	r1, r4
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	2202      	movs	r2, #2
 80019d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	187b      	adds	r3, r7, r1
 80019dc:	2202      	movs	r2, #2
 80019de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	2204      	movs	r2, #4
 80019f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	187a      	adds	r2, r7, r1
 80019f4:	23a0      	movs	r3, #160	@ 0xa0
 80019f6:	05db      	lsls	r3, r3, #23
 80019f8:	0011      	movs	r1, r2
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 fb28 	bl	8002050 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2100      	movs	r1, #0
 8001a04:	201b      	movs	r0, #27
 8001a06:	f000 fa15 	bl	8001e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a0a:	201b      	movs	r0, #27
 8001a0c:	f000 fa27 	bl	8001e5e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a10:	e03d      	b.n	8001a8e <HAL_UART_MspInit+0x186>
  else if(huart->Instance==USART2)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a23      	ldr	r2, [pc, #140]	@ (8001aa4 <HAL_UART_MspInit+0x19c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d138      	bne.n	8001a8e <HAL_UART_MspInit+0x186>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 8001a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a20:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 8001a22:	2180      	movs	r1, #128	@ 0x80
 8001a24:	0289      	lsls	r1, r1, #10
 8001a26:	430a      	orrs	r2, r1
 8001a28:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 8001a2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a2e:	2380      	movs	r3, #128	@ 0x80
 8001a30:	029b      	lsls	r3, r3, #10
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 8001a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a3c:	4b17      	ldr	r3, [pc, #92]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	430a      	orrs	r2, r1
 8001a42:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a44:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_UART_MspInit+0x194>)
 8001a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a50:	213c      	movs	r1, #60	@ 0x3c
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	220c      	movs	r2, #12
 8001a56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	187b      	adds	r3, r7, r1
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	187a      	adds	r2, r7, r1
 8001a72:	23a0      	movs	r3, #160	@ 0xa0
 8001a74:	05db      	lsls	r3, r3, #23
 8001a76:	0011      	movs	r1, r2
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f000 fae9 	bl	8002050 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	201c      	movs	r0, #28
 8001a84:	f000 f9d6 	bl	8001e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a88:	201c      	movs	r0, #28
 8001a8a:	f000 f9e8 	bl	8001e5e <HAL_NVIC_EnableIRQ>
}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b015      	add	sp, #84	@ 0x54
 8001a94:	bd90      	pop	{r4, r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	50000800 	.word	0x50000800
 8001aa4:	40004400 	.word	0x40004400

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aac:	46c0      	nop			@ (mov r8, r8)
 8001aae:	e7fd      	b.n	8001aac <NMI_Handler+0x4>

08001ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab4:	46c0      	nop			@ (mov r8, r8)
 8001ab6:	e7fd      	b.n	8001ab4 <HardFault_Handler+0x4>

08001ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001abc:	46c0      	nop			@ (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	46c0      	nop			@ (mov r8, r8)
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad0:	f000 f8e8 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad4:	46c0      	nop			@ (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <USART1_IRQHandler+0x14>)
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f002 fbb0 	bl	8004248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ae8:	46c0      	nop			@ (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	20000250 	.word	0x20000250

08001af4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001af8:	4b03      	ldr	r3, [pc, #12]	@ (8001b08 <USART2_IRQHandler+0x14>)
 8001afa:	0018      	movs	r0, r3
 8001afc:	f002 fba4 	bl	8004248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b00:	46c0      	nop			@ (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	200002e4 	.word	0x200002e4

08001b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b14:	4a14      	ldr	r2, [pc, #80]	@ (8001b68 <_sbrk+0x5c>)
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <_sbrk+0x60>)
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b20:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <_sbrk+0x64>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	@ (8001b74 <_sbrk+0x68>)
 8001b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	18d3      	adds	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d207      	bcs.n	8001b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b3c:	f004 fb34 	bl	80061a8 <__errno>
 8001b40:	0003      	movs	r3, r0
 8001b42:	220c      	movs	r2, #12
 8001b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	425b      	negs	r3, r3
 8001b4a:	e009      	b.n	8001b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b4c:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b52:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	18d2      	adds	r2, r2, r3
 8001b5a:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <_sbrk+0x64>)
 8001b5c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b006      	add	sp, #24
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20003000 	.word	0x20003000
 8001b6c:	00000400 	.word	0x00000400
 8001b70:	20000378 	.word	0x20000378
 8001b74:	200004c8 	.word	0x200004c8

08001b78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b7c:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <SystemInit+0x14>)
 8001b7e:	2280      	movs	r2, #128	@ 0x80
 8001b80:	0512      	lsls	r2, r2, #20
 8001b82:	609a      	str	r2, [r3, #8]
#endif
}
 8001b84:	46c0      	nop			@ (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b90:	480d      	ldr	r0, [pc, #52]	@ (8001bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b94:	f7ff fff0 	bl	8001b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b9a:	e003      	b.n	8001ba4 <LoopCopyDataInit>

08001b9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001b9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ba0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001ba2:	3104      	adds	r1, #4

08001ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ba4:	480a      	ldr	r0, [pc, #40]	@ (8001bd0 <LoopForever+0xa>)
  ldr r3, =_edata
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <LoopForever+0xe>)
  adds r2, r0, r1
 8001ba8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001baa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bac:	d3f6      	bcc.n	8001b9c <CopyDataInit>
  ldr r2, =_sbss
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <LoopForever+0x12>)
  b LoopFillZerobss
 8001bb0:	e002      	b.n	8001bb8 <LoopFillZerobss>

08001bb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  str  r3, [r2]
 8001bb4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb6:	3204      	adds	r2, #4

08001bb8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001bb8:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <LoopForever+0x16>)
  cmp r2, r3
 8001bba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001bbc:	d3f9      	bcc.n	8001bb2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001bbe:	f004 faf9 	bl	80061b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bc2:	f7ff faa9 	bl	8001118 <main>

08001bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bc6:	e7fe      	b.n	8001bc6 <LoopForever>
  ldr   r0, =_estack
 8001bc8:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001bcc:	08006dd0 	.word	0x08006dd0
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bd4:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 8001bd8:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 8001bdc:	200004c8 	.word	0x200004c8

08001be0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC1_IRQHandler>

08001be2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001be8:	1dfb      	adds	r3, r7, #7
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bee:	2003      	movs	r0, #3
 8001bf0:	f000 f80e 	bl	8001c10 <HAL_InitTick>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001bf8:	1dfb      	adds	r3, r7, #7
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e001      	b.n	8001c04 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c00:	f7ff fd8a 	bl	8001718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c04:	1dfb      	adds	r3, r7, #7
 8001c06:	781b      	ldrb	r3, [r3, #0]
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c18:	230f      	movs	r3, #15
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001c20:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <HAL_InitTick+0x88>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d02b      	beq.n	8001c80 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001c28:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <HAL_InitTick+0x8c>)
 8001c2a:	681c      	ldr	r4, [r3, #0]
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <HAL_InitTick+0x88>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	0019      	movs	r1, r3
 8001c32:	23fa      	movs	r3, #250	@ 0xfa
 8001c34:	0098      	lsls	r0, r3, #2
 8001c36:	f7fe fa83 	bl	8000140 <__udivsi3>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	0020      	movs	r0, r4
 8001c40:	f7fe fa7e 	bl	8000140 <__udivsi3>
 8001c44:	0003      	movs	r3, r0
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 f919 	bl	8001e7e <HAL_SYSTICK_Config>
 8001c4c:	1e03      	subs	r3, r0, #0
 8001c4e:	d112      	bne.n	8001c76 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d80a      	bhi.n	8001c6c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	425b      	negs	r3, r3
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 f8e8 	bl	8001e34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <HAL_InitTick+0x90>)
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e00d      	b.n	8001c88 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e008      	b.n	8001c88 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c76:	230f      	movs	r3, #15
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	e003      	b.n	8001c88 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c80:	230f      	movs	r3, #15
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001c88:	230f      	movs	r3, #15
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	781b      	ldrb	r3, [r3, #0]
}
 8001c8e:	0018      	movs	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b005      	add	sp, #20
 8001c94:	bd90      	pop	{r4, r7, pc}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	2000000c 	.word	0x2000000c
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <HAL_IncTick+0x1c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	001a      	movs	r2, r3
 8001cae:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <HAL_IncTick+0x20>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	18d2      	adds	r2, r2, r3
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <HAL_IncTick+0x20>)
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	46c0      	nop			@ (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	2000000c 	.word	0x2000000c
 8001cc4:	2000037c 	.word	0x2000037c

08001cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b02      	ldr	r3, [pc, #8]	@ (8001cd8 <HAL_GetTick+0x10>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	2000037c 	.word	0x2000037c

08001cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	1dfb      	adds	r3, r7, #7
 8001ce6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	1dfb      	adds	r3, r7, #7
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cee:	d809      	bhi.n	8001d04 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf0:	1dfb      	adds	r3, r7, #7
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	001a      	movs	r2, r3
 8001cf6:	231f      	movs	r3, #31
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <__NVIC_EnableIRQ+0x30>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4091      	lsls	r1, r2
 8001d00:	000a      	movs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001d04:	46c0      	nop			@ (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b002      	add	sp, #8
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	e000e100 	.word	0xe000e100

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	0002      	movs	r2, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	1dfb      	adds	r3, r7, #7
 8001d1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d24:	d828      	bhi.n	8001d78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d26:	4a2f      	ldr	r2, [pc, #188]	@ (8001de4 <__NVIC_SetPriority+0xd4>)
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b25b      	sxtb	r3, r3
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	33c0      	adds	r3, #192	@ 0xc0
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	589b      	ldr	r3, [r3, r2]
 8001d36:	1dfa      	adds	r2, r7, #7
 8001d38:	7812      	ldrb	r2, [r2, #0]
 8001d3a:	0011      	movs	r1, r2
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	400a      	ands	r2, r1
 8001d40:	00d2      	lsls	r2, r2, #3
 8001d42:	21ff      	movs	r1, #255	@ 0xff
 8001d44:	4091      	lsls	r1, r2
 8001d46:	000a      	movs	r2, r1
 8001d48:	43d2      	mvns	r2, r2
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	019b      	lsls	r3, r3, #6
 8001d52:	22ff      	movs	r2, #255	@ 0xff
 8001d54:	401a      	ands	r2, r3
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	4003      	ands	r3, r0
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d64:	481f      	ldr	r0, [pc, #124]	@ (8001de4 <__NVIC_SetPriority+0xd4>)
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	33c0      	adds	r3, #192	@ 0xc0
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d76:	e031      	b.n	8001ddc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d78:	4a1b      	ldr	r2, [pc, #108]	@ (8001de8 <__NVIC_SetPriority+0xd8>)
 8001d7a:	1dfb      	adds	r3, r7, #7
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	0019      	movs	r1, r3
 8001d80:	230f      	movs	r3, #15
 8001d82:	400b      	ands	r3, r1
 8001d84:	3b08      	subs	r3, #8
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	3306      	adds	r3, #6
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	18d3      	adds	r3, r2, r3
 8001d8e:	3304      	adds	r3, #4
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	1dfa      	adds	r2, r7, #7
 8001d94:	7812      	ldrb	r2, [r2, #0]
 8001d96:	0011      	movs	r1, r2
 8001d98:	2203      	movs	r2, #3
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	00d2      	lsls	r2, r2, #3
 8001d9e:	21ff      	movs	r1, #255	@ 0xff
 8001da0:	4091      	lsls	r1, r2
 8001da2:	000a      	movs	r2, r1
 8001da4:	43d2      	mvns	r2, r2
 8001da6:	401a      	ands	r2, r3
 8001da8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	019b      	lsls	r3, r3, #6
 8001dae:	22ff      	movs	r2, #255	@ 0xff
 8001db0:	401a      	ands	r2, r3
 8001db2:	1dfb      	adds	r3, r7, #7
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	0018      	movs	r0, r3
 8001db8:	2303      	movs	r3, #3
 8001dba:	4003      	ands	r3, r0
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dc0:	4809      	ldr	r0, [pc, #36]	@ (8001de8 <__NVIC_SetPriority+0xd8>)
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	001c      	movs	r4, r3
 8001dc8:	230f      	movs	r3, #15
 8001dca:	4023      	ands	r3, r4
 8001dcc:	3b08      	subs	r3, #8
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	3306      	adds	r3, #6
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	18c3      	adds	r3, r0, r3
 8001dd8:	3304      	adds	r3, #4
 8001dda:	601a      	str	r2, [r3, #0]
}
 8001ddc:	46c0      	nop			@ (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b003      	add	sp, #12
 8001de2:	bd90      	pop	{r4, r7, pc}
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	1e5a      	subs	r2, r3, #1
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	045b      	lsls	r3, r3, #17
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d301      	bcc.n	8001e04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e00:	2301      	movs	r3, #1
 8001e02:	e010      	b.n	8001e26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e04:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <SysTick_Config+0x44>)
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	3a01      	subs	r2, #1
 8001e0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	425b      	negs	r3, r3
 8001e10:	2103      	movs	r1, #3
 8001e12:	0018      	movs	r0, r3
 8001e14:	f7ff ff7c 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <SysTick_Config+0x44>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <SysTick_Config+0x44>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b002      	add	sp, #8
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	210f      	movs	r1, #15
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	1c02      	adds	r2, r0, #0
 8001e44:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b25b      	sxtb	r3, r3
 8001e4e:	0011      	movs	r1, r2
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff ff5d 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e56:	46c0      	nop			@ (mov r8, r8)
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b004      	add	sp, #16
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	0002      	movs	r2, r0
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6a:	1dfb      	adds	r3, r7, #7
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7ff ff33 	bl	8001cdc <__NVIC_EnableIRQ>
}
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b002      	add	sp, #8
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7ff ffaf 	bl	8001dec <SysTick_Config>
 8001e8e:	0003      	movs	r3, r0
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b002      	add	sp, #8
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e050      	b.n	8001f4c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2225      	movs	r2, #37	@ 0x25
 8001eae:	5c9b      	ldrb	r3, [r3, r2]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d008      	beq.n	8001ec8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2224      	movs	r2, #36	@ 0x24
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e041      	b.n	8001f4c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	210e      	movs	r1, #14
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	491c      	ldr	r1, [pc, #112]	@ (8001f54 <HAL_DMA_Abort+0xbc>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	438a      	bics	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <HAL_DMA_Abort+0xc0>)
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	221c      	movs	r2, #28
 8001f02:	4013      	ands	r3, r2
 8001f04:	2201      	movs	r2, #1
 8001f06:	409a      	lsls	r2, r3
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_DMA_Abort+0xc0>)
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f16:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00c      	beq.n	8001f3a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f2a:	490a      	ldr	r1, [pc, #40]	@ (8001f54 <HAL_DMA_Abort+0xbc>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001f38:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2225      	movs	r2, #37	@ 0x25
 8001f3e:	2101      	movs	r1, #1
 8001f40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2224      	movs	r2, #36	@ 0x24
 8001f46:	2100      	movs	r1, #0
 8001f48:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b002      	add	sp, #8
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	fffffeff 	.word	0xfffffeff
 8001f58:	40020000 	.word	0x40020000

08001f5c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f64:	230f      	movs	r3, #15
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2224      	movs	r2, #36	@ 0x24
 8001f70:	2100      	movs	r1, #0
 8001f72:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2224      	movs	r2, #36	@ 0x24
 8001f78:	5c9b      	ldrb	r3, [r3, r2]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_DMA_Abort_IT+0x26>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e05e      	b.n	8002040 <HAL_DMA_Abort_IT+0xe4>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2224      	movs	r2, #36	@ 0x24
 8001f86:	2101      	movs	r1, #1
 8001f88:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2225      	movs	r2, #37	@ 0x25
 8001f8e:	5c9b      	ldrb	r3, [r3, r2]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d007      	beq.n	8001fa6 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e049      	b.n	800203a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	210e      	movs	r1, #14
 8001fb2:	438a      	bics	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	438a      	bics	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd0:	491d      	ldr	r1, [pc, #116]	@ (8002048 <HAL_DMA_Abort_IT+0xec>)
 8001fd2:	400a      	ands	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800204c <HAL_DMA_Abort_IT+0xf0>)
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	221c      	movs	r2, #28
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_DMA_Abort_IT+0xf0>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ff4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002008:	490f      	ldr	r1, [pc, #60]	@ (8002048 <HAL_DMA_Abort_IT+0xec>)
 800200a:	400a      	ands	r2, r1
 800200c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002016:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2225      	movs	r2, #37	@ 0x25
 800201c:	2101      	movs	r1, #1
 800201e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	@ 0x24
 8002024:	2100      	movs	r1, #0
 8002026:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202c:	2b00      	cmp	r3, #0
 800202e:	d004      	beq.n	800203a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	0010      	movs	r0, r2
 8002038:	4798      	blx	r3
    }
  }
  return status;
 800203a:	230f      	movs	r3, #15
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	781b      	ldrb	r3, [r3, #0]
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b004      	add	sp, #16
 8002046:	bd80      	pop	{r7, pc}
 8002048:	fffffeff 	.word	0xfffffeff
 800204c:	40020000 	.word	0x40020000

08002050 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800205e:	e153      	b.n	8002308 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4091      	lsls	r1, r2
 800206a:	000a      	movs	r2, r1
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d100      	bne.n	8002078 <HAL_GPIO_Init+0x28>
 8002076:	e144      	b.n	8002302 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x38>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b12      	cmp	r3, #18
 8002086:	d125      	bne.n	80020d4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	0092      	lsls	r2, r2, #2
 8002092:	58d3      	ldr	r3, [r2, r3]
 8002094:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2207      	movs	r2, #7
 800209a:	4013      	ands	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	409a      	lsls	r2, r3
 80020a2:	0013      	movs	r3, r2
 80020a4:	43da      	mvns	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	4013      	ands	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	220f      	movs	r2, #15
 80020b2:	401a      	ands	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2107      	movs	r1, #7
 80020b8:	400b      	ands	r3, r1
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	409a      	lsls	r2, r3
 80020be:	0013      	movs	r3, r2
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	0092      	lsls	r2, r2, #2
 80020d0:	6979      	ldr	r1, [r7, #20]
 80020d2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	409a      	lsls	r2, r3
 80020e2:	0013      	movs	r3, r2
 80020e4:	43da      	mvns	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	4013      	ands	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2203      	movs	r2, #3
 80020f2:	401a      	ands	r2, r3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	409a      	lsls	r2, r3
 80020fa:	0013      	movs	r3, r2
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	4313      	orrs	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d00b      	beq.n	8002128 <HAL_GPIO_Init+0xd8>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d007      	beq.n	8002128 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800211c:	2b11      	cmp	r3, #17
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b12      	cmp	r3, #18
 8002126:	d130      	bne.n	800218a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	409a      	lsls	r2, r3
 8002136:	0013      	movs	r3, r2
 8002138:	43da      	mvns	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	4013      	ands	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	409a      	lsls	r2, r3
 800214a:	0013      	movs	r3, r2
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800215e:	2201      	movs	r2, #1
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	409a      	lsls	r2, r3
 8002164:	0013      	movs	r3, r2
 8002166:	43da      	mvns	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	4013      	ands	r3, r2
 800216c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	2201      	movs	r2, #1
 8002176:	401a      	ands	r2, r3
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	409a      	lsls	r2, r3
 800217c:	0013      	movs	r3, r2
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4313      	orrs	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d017      	beq.n	80021c2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	409a      	lsls	r2, r3
 80021a0:	0013      	movs	r3, r2
 80021a2:	43da      	mvns	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	4013      	ands	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	409a      	lsls	r2, r3
 80021b4:	0013      	movs	r3, r2
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	2380      	movs	r3, #128	@ 0x80
 80021c8:	055b      	lsls	r3, r3, #21
 80021ca:	4013      	ands	r3, r2
 80021cc:	d100      	bne.n	80021d0 <HAL_GPIO_Init+0x180>
 80021ce:	e098      	b.n	8002302 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80021d0:	4a53      	ldr	r2, [pc, #332]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3318      	adds	r3, #24
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	589b      	ldr	r3, [r3, r2]
 80021dc:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2203      	movs	r2, #3
 80021e2:	4013      	ands	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	220f      	movs	r2, #15
 80021e8:	409a      	lsls	r2, r3
 80021ea:	0013      	movs	r3, r2
 80021ec:	43da      	mvns	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	4013      	ands	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	23a0      	movs	r3, #160	@ 0xa0
 80021f8:	05db      	lsls	r3, r3, #23
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d019      	beq.n	8002232 <HAL_GPIO_Init+0x1e2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a48      	ldr	r2, [pc, #288]	@ (8002324 <HAL_GPIO_Init+0x2d4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_GPIO_Init+0x1de>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a47      	ldr	r2, [pc, #284]	@ (8002328 <HAL_GPIO_Init+0x2d8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00d      	beq.n	800222a <HAL_GPIO_Init+0x1da>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a46      	ldr	r2, [pc, #280]	@ (800232c <HAL_GPIO_Init+0x2dc>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d007      	beq.n	8002226 <HAL_GPIO_Init+0x1d6>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a45      	ldr	r2, [pc, #276]	@ (8002330 <HAL_GPIO_Init+0x2e0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d101      	bne.n	8002222 <HAL_GPIO_Init+0x1d2>
 800221e:	2305      	movs	r3, #5
 8002220:	e008      	b.n	8002234 <HAL_GPIO_Init+0x1e4>
 8002222:	2306      	movs	r3, #6
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x1e4>
 8002226:	2303      	movs	r3, #3
 8002228:	e004      	b.n	8002234 <HAL_GPIO_Init+0x1e4>
 800222a:	2302      	movs	r3, #2
 800222c:	e002      	b.n	8002234 <HAL_GPIO_Init+0x1e4>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_GPIO_Init+0x1e4>
 8002232:	2300      	movs	r3, #0
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	2103      	movs	r1, #3
 8002238:	400a      	ands	r2, r1
 800223a:	00d2      	lsls	r2, r2, #3
 800223c:	4093      	lsls	r3, r2
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002244:	4936      	ldr	r1, [pc, #216]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	3318      	adds	r3, #24
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002252:	4a33      	ldr	r2, [pc, #204]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	58d3      	ldr	r3, [r2, r3]
 8002258:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43da      	mvns	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	4013      	ands	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	025b      	lsls	r3, r3, #9
 800226c:	4013      	ands	r3, r2
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002278:	4929      	ldr	r1, [pc, #164]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 800227a:	2280      	movs	r2, #128	@ 0x80
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002280:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 8002282:	2384      	movs	r3, #132	@ 0x84
 8002284:	58d3      	ldr	r3, [r2, r3]
 8002286:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	43da      	mvns	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	4013      	ands	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	2380      	movs	r3, #128	@ 0x80
 8002298:	029b      	lsls	r3, r3, #10
 800229a:	4013      	ands	r3, r2
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80022a6:	491e      	ldr	r1, [pc, #120]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022a8:	2284      	movs	r2, #132	@ 0x84
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80022ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	43da      	mvns	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	4013      	ands	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	2380      	movs	r3, #128	@ 0x80
 80022c4:	035b      	lsls	r3, r3, #13
 80022c6:	4013      	ands	r3, r2
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80022d2:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	43da      	mvns	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	2380      	movs	r3, #128	@ 0x80
 80022ee:	039b      	lsls	r3, r3, #14
 80022f0:	4013      	ands	r3, r2
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80022fc:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	3301      	adds	r3, #1
 8002306:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	40da      	lsrs	r2, r3
 8002310:	1e13      	subs	r3, r2, #0
 8002312:	d000      	beq.n	8002316 <HAL_GPIO_Init+0x2c6>
 8002314:	e6a4      	b.n	8002060 <HAL_GPIO_Init+0x10>
  }
}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	46c0      	nop			@ (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b006      	add	sp, #24
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021800 	.word	0x40021800
 8002324:	50000400 	.word	0x50000400
 8002328:	50000800 	.word	0x50000800
 800232c:	50000c00 	.word	0x50000c00
 8002330:	50001400 	.word	0x50001400

08002334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	000a      	movs	r2, r1
 800233e:	1cbb      	adds	r3, r7, #2
 8002340:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	1cba      	adds	r2, r7, #2
 8002348:	8812      	ldrh	r2, [r2, #0]
 800234a:	4013      	ands	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800234e:	230f      	movs	r3, #15
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	e003      	b.n	8002360 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002358:	230f      	movs	r3, #15
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002360:	230f      	movs	r3, #15
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	781b      	ldrb	r3, [r3, #0]
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b004      	add	sp, #16
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	0008      	movs	r0, r1
 8002378:	0011      	movs	r1, r2
 800237a:	1cbb      	adds	r3, r7, #2
 800237c:	1c02      	adds	r2, r0, #0
 800237e:	801a      	strh	r2, [r3, #0]
 8002380:	1c7b      	adds	r3, r7, #1
 8002382:	1c0a      	adds	r2, r1, #0
 8002384:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002386:	1c7b      	adds	r3, r7, #1
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238e:	1cbb      	adds	r3, r7, #2
 8002390:	881a      	ldrh	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002396:	e003      	b.n	80023a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002398:	1cbb      	adds	r3, r7, #2
 800239a:	881a      	ldrh	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023a0:	46c0      	nop			@ (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e08f      	b.n	80024da <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2241      	movs	r2, #65	@ 0x41
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2240      	movs	r2, #64	@ 0x40
 80023ca:	2100      	movs	r1, #0
 80023cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7ff f9c5 	bl	8001760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2241      	movs	r2, #65	@ 0x41
 80023da:	2124      	movs	r1, #36	@ 0x24
 80023dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2101      	movs	r1, #1
 80023ea:	438a      	bics	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	493b      	ldr	r1, [pc, #236]	@ (80024e4 <HAL_I2C_Init+0x13c>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4938      	ldr	r1, [pc, #224]	@ (80024e8 <HAL_I2C_Init+0x140>)
 8002408:	400a      	ands	r2, r1
 800240a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d108      	bne.n	8002426 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2180      	movs	r1, #128	@ 0x80
 800241e:	0209      	lsls	r1, r1, #8
 8002420:	430a      	orrs	r2, r1
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	e007      	b.n	8002436 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2184      	movs	r1, #132	@ 0x84
 8002430:	0209      	lsls	r1, r1, #8
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d109      	bne.n	8002452 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2180      	movs	r1, #128	@ 0x80
 800244a:	0109      	lsls	r1, r1, #4
 800244c:	430a      	orrs	r2, r1
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	e007      	b.n	8002462 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4923      	ldr	r1, [pc, #140]	@ (80024ec <HAL_I2C_Init+0x144>)
 800245e:	400a      	ands	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4920      	ldr	r1, [pc, #128]	@ (80024f0 <HAL_I2C_Init+0x148>)
 800246e:	430a      	orrs	r2, r1
 8002470:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	491a      	ldr	r1, [pc, #104]	@ (80024e8 <HAL_I2C_Init+0x140>)
 800247e:	400a      	ands	r2, r1
 8002480:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	431a      	orrs	r2, r3
 800248c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69d9      	ldr	r1, [r3, #28]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1a      	ldr	r2, [r3, #32]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2101      	movs	r1, #1
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2241      	movs	r2, #65	@ 0x41
 80024c6:	2120      	movs	r1, #32
 80024c8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2242      	movs	r2, #66	@ 0x42
 80024d4:	2100      	movs	r1, #0
 80024d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b002      	add	sp, #8
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	f0ffffff 	.word	0xf0ffffff
 80024e8:	ffff7fff 	.word	0xffff7fff
 80024ec:	fffff7ff 	.word	0xfffff7ff
 80024f0:	02008000 	.word	0x02008000

080024f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2241      	movs	r2, #65	@ 0x41
 8002502:	5c9b      	ldrb	r3, [r3, r2]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b20      	cmp	r3, #32
 8002508:	d138      	bne.n	800257c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2240      	movs	r2, #64	@ 0x40
 800250e:	5c9b      	ldrb	r3, [r3, r2]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002514:	2302      	movs	r3, #2
 8002516:	e032      	b.n	800257e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2240      	movs	r2, #64	@ 0x40
 800251c:	2101      	movs	r1, #1
 800251e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2241      	movs	r2, #65	@ 0x41
 8002524:	2124      	movs	r1, #36	@ 0x24
 8002526:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2101      	movs	r1, #1
 8002534:	438a      	bics	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4911      	ldr	r1, [pc, #68]	@ (8002588 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002544:	400a      	ands	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6819      	ldr	r1, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2101      	movs	r1, #1
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2241      	movs	r2, #65	@ 0x41
 800256c:	2120      	movs	r1, #32
 800256e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2240      	movs	r2, #64	@ 0x40
 8002574:	2100      	movs	r1, #0
 8002576:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b002      	add	sp, #8
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	ffffefff 	.word	0xffffefff

0800258c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2241      	movs	r2, #65	@ 0x41
 800259a:	5c9b      	ldrb	r3, [r3, r2]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d139      	bne.n	8002616 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2240      	movs	r2, #64	@ 0x40
 80025a6:	5c9b      	ldrb	r3, [r3, r2]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e033      	b.n	8002618 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2240      	movs	r2, #64	@ 0x40
 80025b4:	2101      	movs	r1, #1
 80025b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2241      	movs	r2, #65	@ 0x41
 80025bc:	2124      	movs	r1, #36	@ 0x24
 80025be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2101      	movs	r1, #1
 80025cc:	438a      	bics	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4a11      	ldr	r2, [pc, #68]	@ (8002620 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2241      	movs	r2, #65	@ 0x41
 8002606:	2120      	movs	r1, #32
 8002608:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2240      	movs	r2, #64	@ 0x40
 800260e:	2100      	movs	r1, #0
 8002610:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e000      	b.n	8002618 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002616:	2302      	movs	r3, #2
  }
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b004      	add	sp, #16
 800261e:	bd80      	pop	{r7, pc}
 8002620:	fffff0ff 	.word	0xfffff0ff

08002624 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e1d0      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	4013      	ands	r3, r2
 800263e:	d100      	bne.n	8002642 <HAL_RCC_OscConfig+0x1e>
 8002640:	e069      	b.n	8002716 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002642:	4bc8      	ldr	r3, [pc, #800]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2238      	movs	r2, #56	@ 0x38
 8002648:	4013      	ands	r3, r2
 800264a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b08      	cmp	r3, #8
 8002650:	d105      	bne.n	800265e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d15d      	bne.n	8002716 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e1bc      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	2380      	movs	r3, #128	@ 0x80
 8002664:	025b      	lsls	r3, r3, #9
 8002666:	429a      	cmp	r2, r3
 8002668:	d107      	bne.n	800267a <HAL_RCC_OscConfig+0x56>
 800266a:	4bbe      	ldr	r3, [pc, #760]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4bbd      	ldr	r3, [pc, #756]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002670:	2180      	movs	r1, #128	@ 0x80
 8002672:	0249      	lsls	r1, r1, #9
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e020      	b.n	80026bc <HAL_RCC_OscConfig+0x98>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	23a0      	movs	r3, #160	@ 0xa0
 8002680:	02db      	lsls	r3, r3, #11
 8002682:	429a      	cmp	r2, r3
 8002684:	d10e      	bne.n	80026a4 <HAL_RCC_OscConfig+0x80>
 8002686:	4bb7      	ldr	r3, [pc, #732]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4bb6      	ldr	r3, [pc, #728]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 800268c:	2180      	movs	r1, #128	@ 0x80
 800268e:	02c9      	lsls	r1, r1, #11
 8002690:	430a      	orrs	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	4bb3      	ldr	r3, [pc, #716]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4bb2      	ldr	r3, [pc, #712]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 800269a:	2180      	movs	r1, #128	@ 0x80
 800269c:	0249      	lsls	r1, r1, #9
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0x98>
 80026a4:	4baf      	ldr	r3, [pc, #700]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4bae      	ldr	r3, [pc, #696]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80026aa:	49af      	ldr	r1, [pc, #700]	@ (8002968 <HAL_RCC_OscConfig+0x344>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	4bac      	ldr	r3, [pc, #688]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4bab      	ldr	r3, [pc, #684]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80026b6:	49ad      	ldr	r1, [pc, #692]	@ (800296c <HAL_RCC_OscConfig+0x348>)
 80026b8:	400a      	ands	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d014      	beq.n	80026ee <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7ff fb00 	bl	8001cc8 <HAL_GetTick>
 80026c8:	0003      	movs	r3, r0
 80026ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80026ce:	f7ff fafb 	bl	8001cc8 <HAL_GetTick>
 80026d2:	0002      	movs	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b64      	cmp	r3, #100	@ 0x64
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e17b      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e0:	4ba0      	ldr	r3, [pc, #640]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	2380      	movs	r3, #128	@ 0x80
 80026e6:	029b      	lsls	r3, r3, #10
 80026e8:	4013      	ands	r3, r2
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0xaa>
 80026ec:	e013      	b.n	8002716 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7ff faeb 	bl	8001cc8 <HAL_GetTick>
 80026f2:	0003      	movs	r3, r0
 80026f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80026f8:	f7ff fae6 	bl	8001cc8 <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	@ 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e166      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800270a:	4b96      	ldr	r3, [pc, #600]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	2380      	movs	r3, #128	@ 0x80
 8002710:	029b      	lsls	r3, r3, #10
 8002712:	4013      	ands	r3, r2
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2202      	movs	r2, #2
 800271c:	4013      	ands	r3, r2
 800271e:	d100      	bne.n	8002722 <HAL_RCC_OscConfig+0xfe>
 8002720:	e086      	b.n	8002830 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002722:	4b90      	ldr	r3, [pc, #576]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2238      	movs	r2, #56	@ 0x38
 8002728:	4013      	ands	r3, r2
 800272a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d12f      	bne.n	8002792 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e14c      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	4b89      	ldr	r3, [pc, #548]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4a8b      	ldr	r2, [pc, #556]	@ (8002970 <HAL_RCC_OscConfig+0x34c>)
 8002744:	4013      	ands	r3, r2
 8002746:	0019      	movs	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	021a      	lsls	r2, r3, #8
 800274e:	4b85      	ldr	r3, [pc, #532]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002750:	430a      	orrs	r2, r1
 8002752:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d112      	bne.n	8002780 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800275a:	4b82      	ldr	r3, [pc, #520]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a85      	ldr	r2, [pc, #532]	@ (8002974 <HAL_RCC_OscConfig+0x350>)
 8002760:	4013      	ands	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	4b7e      	ldr	r3, [pc, #504]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800276e:	4b7d      	ldr	r3, [pc, #500]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	0adb      	lsrs	r3, r3, #11
 8002774:	2207      	movs	r2, #7
 8002776:	4013      	ands	r3, r2
 8002778:	4a7f      	ldr	r2, [pc, #508]	@ (8002978 <HAL_RCC_OscConfig+0x354>)
 800277a:	40da      	lsrs	r2, r3
 800277c:	4b7f      	ldr	r3, [pc, #508]	@ (800297c <HAL_RCC_OscConfig+0x358>)
 800277e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002780:	4b7f      	ldr	r3, [pc, #508]	@ (8002980 <HAL_RCC_OscConfig+0x35c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0018      	movs	r0, r3
 8002786:	f7ff fa43 	bl	8001c10 <HAL_InitTick>
 800278a:	1e03      	subs	r3, r0, #0
 800278c:	d050      	beq.n	8002830 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e122      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d030      	beq.n	80027fc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800279a:	4b72      	ldr	r3, [pc, #456]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a75      	ldr	r2, [pc, #468]	@ (8002974 <HAL_RCC_OscConfig+0x350>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	0019      	movs	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	4b6e      	ldr	r3, [pc, #440]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80027aa:	430a      	orrs	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80027ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80027b4:	2180      	movs	r1, #128	@ 0x80
 80027b6:	0049      	lsls	r1, r1, #1
 80027b8:	430a      	orrs	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7ff fa84 	bl	8001cc8 <HAL_GetTick>
 80027c0:	0003      	movs	r3, r0
 80027c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80027c6:	f7ff fa7f 	bl	8001cc8 <HAL_GetTick>
 80027ca:	0002      	movs	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0ff      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d8:	4b62      	ldr	r3, [pc, #392]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2380      	movs	r3, #128	@ 0x80
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4013      	ands	r3, r2
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a61      	ldr	r2, [pc, #388]	@ (8002970 <HAL_RCC_OscConfig+0x34c>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	0019      	movs	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	021a      	lsls	r2, r3, #8
 80027f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	e019      	b.n	8002830 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80027fc:	4b59      	ldr	r3, [pc, #356]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b58      	ldr	r3, [pc, #352]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002802:	4960      	ldr	r1, [pc, #384]	@ (8002984 <HAL_RCC_OscConfig+0x360>)
 8002804:	400a      	ands	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7ff fa5e 	bl	8001cc8 <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002812:	f7ff fa59 	bl	8001cc8 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0d9      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002824:	4b4f      	ldr	r3, [pc, #316]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4013      	ands	r3, r2
 800282e:	d1f0      	bne.n	8002812 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2208      	movs	r2, #8
 8002836:	4013      	ands	r3, r2
 8002838:	d042      	beq.n	80028c0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800283a:	4b4a      	ldr	r3, [pc, #296]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2238      	movs	r2, #56	@ 0x38
 8002840:	4013      	ands	r3, r2
 8002842:	2b18      	cmp	r3, #24
 8002844:	d105      	bne.n	8002852 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d138      	bne.n	80028c0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0c2      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d019      	beq.n	800288e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800285a:	4b42      	ldr	r3, [pc, #264]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 800285c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800285e:	4b41      	ldr	r3, [pc, #260]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002860:	2101      	movs	r1, #1
 8002862:	430a      	orrs	r2, r1
 8002864:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7ff fa2f 	bl	8001cc8 <HAL_GetTick>
 800286a:	0003      	movs	r3, r0
 800286c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002870:	f7ff fa2a 	bl	8001cc8 <HAL_GetTick>
 8002874:	0002      	movs	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0aa      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002882:	4b38      	ldr	r3, [pc, #224]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002886:	2202      	movs	r2, #2
 8002888:	4013      	ands	r3, r2
 800288a:	d0f1      	beq.n	8002870 <HAL_RCC_OscConfig+0x24c>
 800288c:	e018      	b.n	80028c0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800288e:	4b35      	ldr	r3, [pc, #212]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002890:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002892:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002894:	2101      	movs	r1, #1
 8002896:	438a      	bics	r2, r1
 8002898:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7ff fa15 	bl	8001cc8 <HAL_GetTick>
 800289e:	0003      	movs	r3, r0
 80028a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80028a4:	f7ff fa10 	bl	8001cc8 <HAL_GetTick>
 80028a8:	0002      	movs	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e090      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80028b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80028b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ba:	2202      	movs	r2, #2
 80028bc:	4013      	ands	r3, r2
 80028be:	d1f1      	bne.n	80028a4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2204      	movs	r2, #4
 80028c6:	4013      	ands	r3, r2
 80028c8:	d100      	bne.n	80028cc <HAL_RCC_OscConfig+0x2a8>
 80028ca:	e084      	b.n	80029d6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028cc:	230f      	movs	r3, #15
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80028d4:	4b23      	ldr	r3, [pc, #140]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2238      	movs	r2, #56	@ 0x38
 80028da:	4013      	ands	r3, r2
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d000      	beq.n	80028ea <HAL_RCC_OscConfig+0x2c6>
 80028e8:	e075      	b.n	80029d6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e074      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d106      	bne.n	8002904 <HAL_RCC_OscConfig+0x2e0>
 80028f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80028f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	430a      	orrs	r2, r1
 8002900:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002902:	e01c      	b.n	800293e <HAL_RCC_OscConfig+0x31a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_OscConfig+0x302>
 800290c:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 800290e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002910:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002912:	2104      	movs	r1, #4
 8002914:	430a      	orrs	r2, r1
 8002916:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002918:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 800291a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 800291e:	2101      	movs	r1, #1
 8002920:	430a      	orrs	r2, r1
 8002922:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002924:	e00b      	b.n	800293e <HAL_RCC_OscConfig+0x31a>
 8002926:	4b0f      	ldr	r3, [pc, #60]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002928:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800292a:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 800292c:	2101      	movs	r1, #1
 800292e:	438a      	bics	r2, r1
 8002930:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002932:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002934:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002936:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 8002938:	2104      	movs	r1, #4
 800293a:	438a      	bics	r2, r1
 800293c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d028      	beq.n	8002998 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7ff f9bf 	bl	8001cc8 <HAL_GetTick>
 800294a:	0003      	movs	r3, r0
 800294c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800294e:	e01d      	b.n	800298c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7ff f9ba 	bl	8001cc8 <HAL_GetTick>
 8002954:	0002      	movs	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	4a0b      	ldr	r2, [pc, #44]	@ (8002988 <HAL_RCC_OscConfig+0x364>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d915      	bls.n	800298c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e039      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
 8002964:	40021000 	.word	0x40021000
 8002968:	fffeffff 	.word	0xfffeffff
 800296c:	fffbffff 	.word	0xfffbffff
 8002970:	ffff80ff 	.word	0xffff80ff
 8002974:	ffffc7ff 	.word	0xffffc7ff
 8002978:	02dc6c00 	.word	0x02dc6c00
 800297c:	20000004 	.word	0x20000004
 8002980:	20000008 	.word	0x20000008
 8002984:	fffffeff 	.word	0xfffffeff
 8002988:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800298c:	4b14      	ldr	r3, [pc, #80]	@ (80029e0 <HAL_RCC_OscConfig+0x3bc>)
 800298e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002990:	2202      	movs	r2, #2
 8002992:	4013      	ands	r3, r2
 8002994:	d0dc      	beq.n	8002950 <HAL_RCC_OscConfig+0x32c>
 8002996:	e013      	b.n	80029c0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7ff f996 	bl	8001cc8 <HAL_GetTick>
 800299c:	0003      	movs	r3, r0
 800299e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80029a0:	e009      	b.n	80029b6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7ff f991 	bl	8001cc8 <HAL_GetTick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	4a0d      	ldr	r2, [pc, #52]	@ (80029e4 <HAL_RCC_OscConfig+0x3c0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e010      	b.n	80029d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80029b6:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <HAL_RCC_OscConfig+0x3bc>)
 80029b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80029c0:	230f      	movs	r3, #15
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d105      	bne.n	80029d6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80029ca:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <HAL_RCC_OscConfig+0x3bc>)
 80029cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029ce:	4b04      	ldr	r3, [pc, #16]	@ (80029e0 <HAL_RCC_OscConfig+0x3bc>)
 80029d0:	4905      	ldr	r1, [pc, #20]	@ (80029e8 <HAL_RCC_OscConfig+0x3c4>)
 80029d2:	400a      	ands	r2, r1
 80029d4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b006      	add	sp, #24
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	00001388 	.word	0x00001388
 80029e8:	efffffff 	.word	0xefffffff

080029ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0df      	b.n	8002bc0 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b71      	ldr	r3, [pc, #452]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2207      	movs	r2, #7
 8002a06:	4013      	ands	r3, r2
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d91e      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2207      	movs	r2, #7
 8002a14:	4393      	bics	r3, r2
 8002a16:	0019      	movs	r1, r3
 8002a18:	4b6b      	ldr	r3, [pc, #428]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a20:	f7ff f952 	bl	8001cc8 <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a28:	e009      	b.n	8002a3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2a:	f7ff f94d 	bl	8001cc8 <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	4a65      	ldr	r2, [pc, #404]	@ (8002bcc <HAL_RCC_ClockConfig+0x1e0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0c0      	b.n	8002bc0 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a3e:	4b62      	ldr	r3, [pc, #392]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2207      	movs	r2, #7
 8002a44:	4013      	ands	r3, r2
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d1ee      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2202      	movs	r2, #2
 8002a52:	4013      	ands	r3, r2
 8002a54:	d017      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a60:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a5b      	ldr	r2, [pc, #364]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1e8>)
 8002a66:	401a      	ands	r2, r3
 8002a68:	4b59      	ldr	r3, [pc, #356]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002a6a:	21b0      	movs	r1, #176	@ 0xb0
 8002a6c:	0109      	lsls	r1, r1, #4
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a72:	4b57      	ldr	r3, [pc, #348]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	4a58      	ldr	r2, [pc, #352]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	4b53      	ldr	r3, [pc, #332]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002a82:	430a      	orrs	r2, r1
 8002a84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d04b      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a98:	4b4d      	ldr	r3, [pc, #308]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	029b      	lsls	r3, r3, #10
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d11f      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e08b      	b.n	8002bc0 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d107      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab0:	4b47      	ldr	r3, [pc, #284]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d113      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e07f      	b.n	8002bc0 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002ac8:	4b41      	ldr	r3, [pc, #260]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002acc:	2202      	movs	r2, #2
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d108      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e074      	b.n	8002bc0 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ada:	2202      	movs	r2, #2
 8002adc:	4013      	ands	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e06d      	b.n	8002bc0 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2207      	movs	r2, #7
 8002aea:	4393      	bics	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	4b37      	ldr	r3, [pc, #220]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af8:	f7ff f8e6 	bl	8001cc8 <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b00:	e009      	b.n	8002b16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b02:	f7ff f8e1 	bl	8001cc8 <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002bcc <HAL_RCC_ClockConfig+0x1e0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e054      	b.n	8002bc0 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b16:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2238      	movs	r2, #56	@ 0x38
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d1ec      	bne.n	8002b02 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b28:	4b27      	ldr	r3, [pc, #156]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2207      	movs	r2, #7
 8002b2e:	4013      	ands	r3, r2
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d21e      	bcs.n	8002b74 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b24      	ldr	r3, [pc, #144]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2207      	movs	r2, #7
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	4b21      	ldr	r3, [pc, #132]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b48:	f7ff f8be 	bl	8001cc8 <HAL_GetTick>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b50:	e009      	b.n	8002b66 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b52:	f7ff f8b9 	bl	8001cc8 <HAL_GetTick>
 8002b56:	0002      	movs	r2, r0
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bcc <HAL_RCC_ClockConfig+0x1e0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e02c      	b.n	8002bc0 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b66:	4b18      	ldr	r3, [pc, #96]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2207      	movs	r2, #7
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1ee      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2204      	movs	r2, #4
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7e:	4b14      	ldr	r3, [pc, #80]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	4a16      	ldr	r2, [pc, #88]	@ (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	0019      	movs	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002b92:	f000 f82b 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002b96:	0001      	movs	r1, r0
 8002b98:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	220f      	movs	r2, #15
 8002ba0:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8002be0 <HAL_RCC_ClockConfig+0x1f4>)
 8002ba4:	0092      	lsls	r2, r2, #2
 8002ba6:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ba8:	221f      	movs	r2, #31
 8002baa:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002bac:	000a      	movs	r2, r1
 8002bae:	40da      	lsrs	r2, r3
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <HAL_RCC_ClockConfig+0x1f8>)
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <HAL_RCC_ClockConfig+0x1fc>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7ff f829 	bl	8001c10 <HAL_InitTick>
 8002bbe:	0003      	movs	r3, r0
}
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b004      	add	sp, #16
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40022000 	.word	0x40022000
 8002bcc:	00001388 	.word	0x00001388
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	ffff84ff 	.word	0xffff84ff
 8002bd8:	fffff0ff 	.word	0xfffff0ff
 8002bdc:	ffff8fff 	.word	0xffff8fff
 8002be0:	08006bb8 	.word	0x08006bb8
 8002be4:	20000004 	.word	0x20000004
 8002be8:	20000008 	.word	0x20000008

08002bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x78>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2238      	movs	r2, #56	@ 0x38
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d10f      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002bfc:	4b19      	ldr	r3, [pc, #100]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x78>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0adb      	lsrs	r3, r3, #11
 8002c02:	2207      	movs	r2, #7
 8002c04:	4013      	ands	r3, r2
 8002c06:	2201      	movs	r2, #1
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	0013      	movs	r3, r2
 8002c0c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c0e:	6839      	ldr	r1, [r7, #0]
 8002c10:	4815      	ldr	r0, [pc, #84]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002c12:	f7fd fa95 	bl	8000140 <__udivsi3>
 8002c16:	0003      	movs	r3, r0
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	e01e      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c1c:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x78>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2238      	movs	r2, #56	@ 0x38
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c28:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x80>)
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	e015      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x78>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2238      	movs	r2, #56	@ 0x38
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d103      	bne.n	8002c42 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c3a:	2380      	movs	r3, #128	@ 0x80
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	e00b      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002c42:	4b08      	ldr	r3, [pc, #32]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x78>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2238      	movs	r2, #56	@ 0x38
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b18      	cmp	r3, #24
 8002c4c:	d103      	bne.n	8002c56 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c4e:	23fa      	movs	r3, #250	@ 0xfa
 8002c50:	01db      	lsls	r3, r3, #7
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	e001      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002c5a:	687b      	ldr	r3, [r7, #4]
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b002      	add	sp, #8
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000
 8002c68:	02dc6c00 	.word	0x02dc6c00
 8002c6c:	007a1200 	.word	0x007a1200

08002c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002c74:	f7ff ffba 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002c78:	0001      	movs	r1, r0
 8002c7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <HAL_RCC_GetHCLKFreq+0x30>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	220f      	movs	r2, #15
 8002c82:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002c84:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <HAL_RCC_GetHCLKFreq+0x34>)
 8002c86:	0092      	lsls	r2, r2, #2
 8002c88:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c8a:	221f      	movs	r2, #31
 8002c8c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002c8e:	000a      	movs	r2, r1
 8002c90:	40da      	lsrs	r2, r3
 8002c92:	4b05      	ldr	r3, [pc, #20]	@ (8002ca8 <HAL_RCC_GetHCLKFreq+0x38>)
 8002c94:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8002c96:	4b04      	ldr	r3, [pc, #16]	@ (8002ca8 <HAL_RCC_GetHCLKFreq+0x38>)
 8002c98:	681b      	ldr	r3, [r3, #0]
}
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	08006bb8 	.word	0x08006bb8
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002cb0:	f7ff ffde 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002cb4:	0001      	movs	r1, r0
 8002cb6:	4b07      	ldr	r3, [pc, #28]	@ (8002cd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0b1b      	lsrs	r3, r3, #12
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002cc2:	0092      	lsls	r2, r2, #2
 8002cc4:	58d3      	ldr	r3, [r2, r3]
 8002cc6:	221f      	movs	r2, #31
 8002cc8:	4013      	ands	r3, r2
 8002cca:	40d9      	lsrs	r1, r3
 8002ccc:	000b      	movs	r3, r1
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	08006bf8 	.word	0x08006bf8

08002cdc <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ce4:	2313      	movs	r3, #19
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cec:	2312      	movs	r3, #18
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2240      	movs	r2, #64	@ 0x40
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d100      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002cfe:	e079      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d00:	2011      	movs	r0, #17
 8002d02:	183b      	adds	r3, r7, r0
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d08:	4b63      	ldr	r3, [pc, #396]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	055b      	lsls	r3, r3, #21
 8002d10:	4013      	ands	r3, r2
 8002d12:	d110      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d14:	4b60      	ldr	r3, [pc, #384]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d18:	4b5f      	ldr	r3, [pc, #380]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d1a:	2180      	movs	r1, #128	@ 0x80
 8002d1c:	0549      	lsls	r1, r1, #21
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d22:	4b5d      	ldr	r3, [pc, #372]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d26:	2380      	movs	r3, #128	@ 0x80
 8002d28:	055b      	lsls	r3, r3, #21
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d30:	183b      	adds	r3, r7, r0
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002d36:	4b58      	ldr	r3, [pc, #352]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d3a:	23c0      	movs	r3, #192	@ 0xc0
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4013      	ands	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d019      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d014      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002d52:	4b51      	ldr	r3, [pc, #324]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d56:	4a51      	ldr	r2, [pc, #324]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d5c:	4b4e      	ldr	r3, [pc, #312]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d60:	4b4d      	ldr	r3, [pc, #308]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d62:	2180      	movs	r1, #128	@ 0x80
 8002d64:	0249      	lsls	r1, r1, #9
 8002d66:	430a      	orrs	r2, r1
 8002d68:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d70:	494b      	ldr	r1, [pc, #300]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d72:	400a      	ands	r2, r1
 8002d74:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002d76:	4b48      	ldr	r3, [pc, #288]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	d016      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe ffa0 	bl	8001cc8 <HAL_GetTick>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002d8c:	e00c      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe ff9b 	bl	8001cc8 <HAL_GetTick>
 8002d92:	0002      	movs	r2, r0
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	4a42      	ldr	r2, [pc, #264]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d904      	bls.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002d9e:	2313      	movs	r3, #19
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2203      	movs	r2, #3
 8002da4:	701a      	strb	r2, [r3, #0]
          break;
 8002da6:	e004      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002da8:	4b3b      	ldr	r3, [pc, #236]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dac:	2202      	movs	r2, #2
 8002dae:	4013      	ands	r3, r2
 8002db0:	d0ed      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8002db2:	2313      	movs	r3, #19
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dbc:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc0:	4a36      	ldr	r2, [pc, #216]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	4b33      	ldr	r3, [pc, #204]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dd0:	e005      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd2:	2312      	movs	r3, #18
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	2213      	movs	r2, #19
 8002dd8:	18ba      	adds	r2, r7, r2
 8002dda:	7812      	ldrb	r2, [r2, #0]
 8002ddc:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dde:	2311      	movs	r3, #17
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dec:	4b2a      	ldr	r3, [pc, #168]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dee:	492e      	ldr	r1, [pc, #184]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002df0:	400a      	ands	r2, r1
 8002df2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dfe:	4b26      	ldr	r3, [pc, #152]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e02:	2203      	movs	r2, #3
 8002e04:	4393      	bics	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	4b22      	ldr	r3, [pc, #136]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2202      	movs	r2, #2
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d009      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e20:	4a22      	ldr	r2, [pc, #136]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2220      	movs	r2, #32
 8002e36:	4013      	ands	r3, r2
 8002e38:	d008      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e3a:	4b17      	ldr	r3, [pc, #92]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	0899      	lsrs	r1, r3, #2
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	4b14      	ldr	r3, [pc, #80]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2204      	movs	r2, #4
 8002e52:	4013      	ands	r3, r2
 8002e54:	d009      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e56:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5a:	4a15      	ldr	r2, [pc, #84]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e66:	430a      	orrs	r2, r1
 8002e68:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2280      	movs	r2, #128	@ 0x80
 8002e70:	4013      	ands	r3, r2
 8002e72:	d009      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002e74:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	22e0      	movs	r2, #224	@ 0xe0
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002e88:	2312      	movs	r3, #18
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	781b      	ldrb	r3, [r3, #0]
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b006      	add	sp, #24
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	fffffcff 	.word	0xfffffcff
 8002ea0:	fffeffff 	.word	0xfffeffff
 8002ea4:	00001388 	.word	0x00001388
 8002ea8:	efffffff 	.word	0xefffffff
 8002eac:	ffffcfff 	.word	0xffffcfff
 8002eb0:	ffff3fff 	.word	0xffff3fff

08002eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e04a      	b.n	8002f5c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	223d      	movs	r2, #61	@ 0x3d
 8002eca:	5c9b      	ldrb	r3, [r3, r2]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d107      	bne.n	8002ee2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	223c      	movs	r2, #60	@ 0x3c
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7fe fca1 	bl	8001824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	223d      	movs	r2, #61	@ 0x3d
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	0010      	movs	r0, r2
 8002ef6:	f000 fb89 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2248      	movs	r2, #72	@ 0x48
 8002efe:	2101      	movs	r1, #1
 8002f00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	223e      	movs	r2, #62	@ 0x3e
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	223f      	movs	r2, #63	@ 0x3f
 8002f0e:	2101      	movs	r1, #1
 8002f10:	5499      	strb	r1, [r3, r2]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2240      	movs	r2, #64	@ 0x40
 8002f16:	2101      	movs	r1, #1
 8002f18:	5499      	strb	r1, [r3, r2]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2241      	movs	r2, #65	@ 0x41
 8002f1e:	2101      	movs	r1, #1
 8002f20:	5499      	strb	r1, [r3, r2]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2242      	movs	r2, #66	@ 0x42
 8002f26:	2101      	movs	r1, #1
 8002f28:	5499      	strb	r1, [r3, r2]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2243      	movs	r2, #67	@ 0x43
 8002f2e:	2101      	movs	r1, #1
 8002f30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2244      	movs	r2, #68	@ 0x44
 8002f36:	2101      	movs	r1, #1
 8002f38:	5499      	strb	r1, [r3, r2]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2245      	movs	r2, #69	@ 0x45
 8002f3e:	2101      	movs	r1, #1
 8002f40:	5499      	strb	r1, [r3, r2]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2246      	movs	r2, #70	@ 0x46
 8002f46:	2101      	movs	r1, #1
 8002f48:	5499      	strb	r1, [r3, r2]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2247      	movs	r2, #71	@ 0x47
 8002f4e:	2101      	movs	r1, #1
 8002f50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	223d      	movs	r2, #61	@ 0x3d
 8002f56:	2101      	movs	r1, #1
 8002f58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	223d      	movs	r2, #61	@ 0x3d
 8002f70:	5c9b      	ldrb	r3, [r3, r2]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d001      	beq.n	8002f7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e02f      	b.n	8002fdc <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	223d      	movs	r2, #61	@ 0x3d
 8002f80:	2102      	movs	r1, #2
 8002f82:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a16      	ldr	r2, [pc, #88]	@ (8002fe4 <HAL_TIM_Base_Start+0x80>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d004      	beq.n	8002f98 <HAL_TIM_Base_Start+0x34>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a15      	ldr	r2, [pc, #84]	@ (8002fe8 <HAL_TIM_Base_Start+0x84>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d116      	bne.n	8002fc6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	4a13      	ldr	r2, [pc, #76]	@ (8002fec <HAL_TIM_Base_Start+0x88>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d016      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x74>
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	2380      	movs	r3, #128	@ 0x80
 8002fae:	025b      	lsls	r3, r3, #9
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d011      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc4:	e008      	b.n	8002fd8 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	e000      	b.n	8002fda <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	0018      	movs	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b004      	add	sp, #16
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	00010007 	.word	0x00010007

08002ff0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e04a      	b.n	8003098 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	223d      	movs	r2, #61	@ 0x3d
 8003006:	5c9b      	ldrb	r3, [r3, r2]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d107      	bne.n	800301e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	223c      	movs	r2, #60	@ 0x3c
 8003012:	2100      	movs	r1, #0
 8003014:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f000 f841 	bl	80030a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	223d      	movs	r2, #61	@ 0x3d
 8003022:	2102      	movs	r1, #2
 8003024:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3304      	adds	r3, #4
 800302e:	0019      	movs	r1, r3
 8003030:	0010      	movs	r0, r2
 8003032:	f000 faeb 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2248      	movs	r2, #72	@ 0x48
 800303a:	2101      	movs	r1, #1
 800303c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	223e      	movs	r2, #62	@ 0x3e
 8003042:	2101      	movs	r1, #1
 8003044:	5499      	strb	r1, [r3, r2]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	223f      	movs	r2, #63	@ 0x3f
 800304a:	2101      	movs	r1, #1
 800304c:	5499      	strb	r1, [r3, r2]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2240      	movs	r2, #64	@ 0x40
 8003052:	2101      	movs	r1, #1
 8003054:	5499      	strb	r1, [r3, r2]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2241      	movs	r2, #65	@ 0x41
 800305a:	2101      	movs	r1, #1
 800305c:	5499      	strb	r1, [r3, r2]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2242      	movs	r2, #66	@ 0x42
 8003062:	2101      	movs	r1, #1
 8003064:	5499      	strb	r1, [r3, r2]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2243      	movs	r2, #67	@ 0x43
 800306a:	2101      	movs	r1, #1
 800306c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2244      	movs	r2, #68	@ 0x44
 8003072:	2101      	movs	r1, #1
 8003074:	5499      	strb	r1, [r3, r2]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2245      	movs	r2, #69	@ 0x45
 800307a:	2101      	movs	r1, #1
 800307c:	5499      	strb	r1, [r3, r2]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2246      	movs	r2, #70	@ 0x46
 8003082:	2101      	movs	r1, #1
 8003084:	5499      	strb	r1, [r3, r2]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2247      	movs	r2, #71	@ 0x47
 800308a:	2101      	movs	r1, #1
 800308c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	223d      	movs	r2, #61	@ 0x3d
 8003092:	2101      	movs	r1, #1
 8003094:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b002      	add	sp, #8
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030a8:	46c0      	nop			@ (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b002      	add	sp, #8
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d108      	bne.n	80030d2 <HAL_TIM_PWM_Start+0x22>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	223e      	movs	r2, #62	@ 0x3e
 80030c4:	5c9b      	ldrb	r3, [r3, r2]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	1e5a      	subs	r2, r3, #1
 80030cc:	4193      	sbcs	r3, r2
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	e037      	b.n	8003142 <HAL_TIM_PWM_Start+0x92>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d108      	bne.n	80030ea <HAL_TIM_PWM_Start+0x3a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	223f      	movs	r2, #63	@ 0x3f
 80030dc:	5c9b      	ldrb	r3, [r3, r2]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	1e5a      	subs	r2, r3, #1
 80030e4:	4193      	sbcs	r3, r2
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	e02b      	b.n	8003142 <HAL_TIM_PWM_Start+0x92>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d108      	bne.n	8003102 <HAL_TIM_PWM_Start+0x52>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2240      	movs	r2, #64	@ 0x40
 80030f4:	5c9b      	ldrb	r3, [r3, r2]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	1e5a      	subs	r2, r3, #1
 80030fc:	4193      	sbcs	r3, r2
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	e01f      	b.n	8003142 <HAL_TIM_PWM_Start+0x92>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b0c      	cmp	r3, #12
 8003106:	d108      	bne.n	800311a <HAL_TIM_PWM_Start+0x6a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2241      	movs	r2, #65	@ 0x41
 800310c:	5c9b      	ldrb	r3, [r3, r2]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	1e5a      	subs	r2, r3, #1
 8003114:	4193      	sbcs	r3, r2
 8003116:	b2db      	uxtb	r3, r3
 8003118:	e013      	b.n	8003142 <HAL_TIM_PWM_Start+0x92>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b10      	cmp	r3, #16
 800311e:	d108      	bne.n	8003132 <HAL_TIM_PWM_Start+0x82>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2242      	movs	r2, #66	@ 0x42
 8003124:	5c9b      	ldrb	r3, [r3, r2]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	1e5a      	subs	r2, r3, #1
 800312c:	4193      	sbcs	r3, r2
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e007      	b.n	8003142 <HAL_TIM_PWM_Start+0x92>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2243      	movs	r2, #67	@ 0x43
 8003136:	5c9b      	ldrb	r3, [r3, r2]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	1e5a      	subs	r2, r3, #1
 800313e:	4193      	sbcs	r3, r2
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e07b      	b.n	8003242 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d104      	bne.n	800315a <HAL_TIM_PWM_Start+0xaa>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	223e      	movs	r2, #62	@ 0x3e
 8003154:	2102      	movs	r1, #2
 8003156:	5499      	strb	r1, [r3, r2]
 8003158:	e023      	b.n	80031a2 <HAL_TIM_PWM_Start+0xf2>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d104      	bne.n	800316a <HAL_TIM_PWM_Start+0xba>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	223f      	movs	r2, #63	@ 0x3f
 8003164:	2102      	movs	r1, #2
 8003166:	5499      	strb	r1, [r3, r2]
 8003168:	e01b      	b.n	80031a2 <HAL_TIM_PWM_Start+0xf2>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d104      	bne.n	800317a <HAL_TIM_PWM_Start+0xca>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2240      	movs	r2, #64	@ 0x40
 8003174:	2102      	movs	r1, #2
 8003176:	5499      	strb	r1, [r3, r2]
 8003178:	e013      	b.n	80031a2 <HAL_TIM_PWM_Start+0xf2>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b0c      	cmp	r3, #12
 800317e:	d104      	bne.n	800318a <HAL_TIM_PWM_Start+0xda>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2241      	movs	r2, #65	@ 0x41
 8003184:	2102      	movs	r1, #2
 8003186:	5499      	strb	r1, [r3, r2]
 8003188:	e00b      	b.n	80031a2 <HAL_TIM_PWM_Start+0xf2>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b10      	cmp	r3, #16
 800318e:	d104      	bne.n	800319a <HAL_TIM_PWM_Start+0xea>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2242      	movs	r2, #66	@ 0x42
 8003194:	2102      	movs	r1, #2
 8003196:	5499      	strb	r1, [r3, r2]
 8003198:	e003      	b.n	80031a2 <HAL_TIM_PWM_Start+0xf2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2243      	movs	r2, #67	@ 0x43
 800319e:	2102      	movs	r1, #2
 80031a0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	2201      	movs	r2, #1
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 fdd8 	bl	8003d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a25      	ldr	r2, [pc, #148]	@ (800324c <HAL_TIM_PWM_Start+0x19c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_TIM_PWM_Start+0x11e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a24      	ldr	r2, [pc, #144]	@ (8003250 <HAL_TIM_PWM_Start+0x1a0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d004      	beq.n	80031ce <HAL_TIM_PWM_Start+0x11e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a22      	ldr	r2, [pc, #136]	@ (8003254 <HAL_TIM_PWM_Start+0x1a4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d101      	bne.n	80031d2 <HAL_TIM_PWM_Start+0x122>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_TIM_PWM_Start+0x124>
 80031d2:	2300      	movs	r3, #0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2180      	movs	r1, #128	@ 0x80
 80031e4:	0209      	lsls	r1, r1, #8
 80031e6:	430a      	orrs	r2, r1
 80031e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a17      	ldr	r2, [pc, #92]	@ (800324c <HAL_TIM_PWM_Start+0x19c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d004      	beq.n	80031fe <HAL_TIM_PWM_Start+0x14e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a17      	ldr	r2, [pc, #92]	@ (8003258 <HAL_TIM_PWM_Start+0x1a8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d116      	bne.n	800322c <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a15      	ldr	r2, [pc, #84]	@ (800325c <HAL_TIM_PWM_Start+0x1ac>)
 8003206:	4013      	ands	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b06      	cmp	r3, #6
 800320e:	d016      	beq.n	800323e <HAL_TIM_PWM_Start+0x18e>
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	2380      	movs	r3, #128	@ 0x80
 8003214:	025b      	lsls	r3, r3, #9
 8003216:	429a      	cmp	r2, r3
 8003218:	d011      	beq.n	800323e <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2101      	movs	r1, #1
 8003226:	430a      	orrs	r2, r1
 8003228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322a:	e008      	b.n	800323e <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2101      	movs	r1, #1
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	e000      	b.n	8003240 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b004      	add	sp, #16
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			@ (mov r8, r8)
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800
 8003258:	40000400 	.word	0x40000400
 800325c:	00010007 	.word	0x00010007

08003260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800326c:	2317      	movs	r3, #23
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	223c      	movs	r2, #60	@ 0x3c
 8003278:	5c9b      	ldrb	r3, [r3, r2]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_TIM_PWM_ConfigChannel+0x22>
 800327e:	2302      	movs	r3, #2
 8003280:	e0e5      	b.n	800344e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	223c      	movs	r2, #60	@ 0x3c
 8003286:	2101      	movs	r1, #1
 8003288:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b14      	cmp	r3, #20
 800328e:	d900      	bls.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003290:	e0d1      	b.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	009a      	lsls	r2, r3, #2
 8003296:	4b70      	ldr	r3, [pc, #448]	@ (8003458 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003298:	18d3      	adds	r3, r2, r3
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	0011      	movs	r1, r2
 80032a6:	0018      	movs	r0, r3
 80032a8:	f000 fa22 	bl	80036f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2108      	movs	r1, #8
 80032b8:	430a      	orrs	r2, r1
 80032ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2104      	movs	r1, #4
 80032c8:	438a      	bics	r2, r1
 80032ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6999      	ldr	r1, [r3, #24]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	619a      	str	r2, [r3, #24]
      break;
 80032de:	e0af      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 fa81 	bl	80037f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2180      	movs	r1, #128	@ 0x80
 80032fa:	0109      	lsls	r1, r1, #4
 80032fc:	430a      	orrs	r2, r1
 80032fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4954      	ldr	r1, [pc, #336]	@ (800345c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800330c:	400a      	ands	r2, r1
 800330e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6999      	ldr	r1, [r3, #24]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	619a      	str	r2, [r3, #24]
      break;
 8003324:	e08c      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	0011      	movs	r1, r2
 800332e:	0018      	movs	r0, r3
 8003330:	f000 fadc 	bl	80038ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2108      	movs	r1, #8
 8003340:	430a      	orrs	r2, r1
 8003342:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2104      	movs	r1, #4
 8003350:	438a      	bics	r2, r1
 8003352:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69d9      	ldr	r1, [r3, #28]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	61da      	str	r2, [r3, #28]
      break;
 8003366:	e06b      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	0011      	movs	r1, r2
 8003370:	0018      	movs	r0, r3
 8003372:	f000 fb3d 	bl	80039f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2180      	movs	r1, #128	@ 0x80
 8003382:	0109      	lsls	r1, r1, #4
 8003384:	430a      	orrs	r2, r1
 8003386:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4932      	ldr	r1, [pc, #200]	@ (800345c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003394:	400a      	ands	r2, r1
 8003396:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69d9      	ldr	r1, [r3, #28]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	021a      	lsls	r2, r3, #8
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	61da      	str	r2, [r3, #28]
      break;
 80033ac:	e048      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	0011      	movs	r1, r2
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 fb7e 	bl	8003ab8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2108      	movs	r1, #8
 80033c8:	430a      	orrs	r2, r1
 80033ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2104      	movs	r1, #4
 80033d8:	438a      	bics	r2, r1
 80033da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033ee:	e027      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	0011      	movs	r1, r2
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 fbb7 	bl	8003b6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2180      	movs	r1, #128	@ 0x80
 800340a:	0109      	lsls	r1, r1, #4
 800340c:	430a      	orrs	r2, r1
 800340e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4910      	ldr	r1, [pc, #64]	@ (800345c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800341c:	400a      	ands	r2, r1
 800341e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	021a      	lsls	r2, r3, #8
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003434:	e004      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003436:	2317      	movs	r3, #23
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
      break;
 800343e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	223c      	movs	r2, #60	@ 0x3c
 8003444:	2100      	movs	r1, #0
 8003446:	5499      	strb	r1, [r3, r2]

  return status;
 8003448:	2317      	movs	r3, #23
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	781b      	ldrb	r3, [r3, #0]
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	b006      	add	sp, #24
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	08006c18 	.word	0x08006c18
 800345c:	fffffbff 	.word	0xfffffbff

08003460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	230f      	movs	r3, #15
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223c      	movs	r2, #60	@ 0x3c
 8003476:	5c9b      	ldrb	r3, [r3, r2]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_TIM_ConfigClockSource+0x20>
 800347c:	2302      	movs	r3, #2
 800347e:	e0bc      	b.n	80035fa <HAL_TIM_ConfigClockSource+0x19a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	223c      	movs	r2, #60	@ 0x3c
 8003484:	2101      	movs	r1, #1
 8003486:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	223d      	movs	r2, #61	@ 0x3d
 800348c:	2102      	movs	r1, #2
 800348e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4a5a      	ldr	r2, [pc, #360]	@ (8003604 <HAL_TIM_ConfigClockSource+0x1a4>)
 800349c:	4013      	ands	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4a59      	ldr	r2, [pc, #356]	@ (8003608 <HAL_TIM_ConfigClockSource+0x1a8>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2280      	movs	r2, #128	@ 0x80
 80034b6:	0192      	lsls	r2, r2, #6
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d040      	beq.n	800353e <HAL_TIM_ConfigClockSource+0xde>
 80034bc:	2280      	movs	r2, #128	@ 0x80
 80034be:	0192      	lsls	r2, r2, #6
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d900      	bls.n	80034c6 <HAL_TIM_ConfigClockSource+0x66>
 80034c4:	e088      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0152      	lsls	r2, r2, #5
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d100      	bne.n	80034d0 <HAL_TIM_ConfigClockSource+0x70>
 80034ce:	e088      	b.n	80035e2 <HAL_TIM_ConfigClockSource+0x182>
 80034d0:	2280      	movs	r2, #128	@ 0x80
 80034d2:	0152      	lsls	r2, r2, #5
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d900      	bls.n	80034da <HAL_TIM_ConfigClockSource+0x7a>
 80034d8:	e07e      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 80034da:	2b70      	cmp	r3, #112	@ 0x70
 80034dc:	d018      	beq.n	8003510 <HAL_TIM_ConfigClockSource+0xb0>
 80034de:	d900      	bls.n	80034e2 <HAL_TIM_ConfigClockSource+0x82>
 80034e0:	e07a      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 80034e2:	2b60      	cmp	r3, #96	@ 0x60
 80034e4:	d04f      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x126>
 80034e6:	d900      	bls.n	80034ea <HAL_TIM_ConfigClockSource+0x8a>
 80034e8:	e076      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 80034ea:	2b50      	cmp	r3, #80	@ 0x50
 80034ec:	d03b      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x106>
 80034ee:	d900      	bls.n	80034f2 <HAL_TIM_ConfigClockSource+0x92>
 80034f0:	e072      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 80034f2:	2b40      	cmp	r3, #64	@ 0x40
 80034f4:	d057      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x146>
 80034f6:	d900      	bls.n	80034fa <HAL_TIM_ConfigClockSource+0x9a>
 80034f8:	e06e      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 80034fa:	2b30      	cmp	r3, #48	@ 0x30
 80034fc:	d063      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x166>
 80034fe:	d86b      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 8003500:	2b20      	cmp	r3, #32
 8003502:	d060      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x166>
 8003504:	d868      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d05d      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x166>
 800350a:	2b10      	cmp	r3, #16
 800350c:	d05b      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x166>
 800350e:	e063      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003520:	f000 fbfe 	bl	8003d20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2277      	movs	r2, #119	@ 0x77
 8003530:	4313      	orrs	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	609a      	str	r2, [r3, #8]
      break;
 800353c:	e052      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800354e:	f000 fbe7 	bl	8003d20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2180      	movs	r1, #128	@ 0x80
 800355e:	01c9      	lsls	r1, r1, #7
 8003560:	430a      	orrs	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
      break;
 8003564:	e03e      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003572:	001a      	movs	r2, r3
 8003574:	f000 fb58 	bl	8003c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2150      	movs	r1, #80	@ 0x50
 800357e:	0018      	movs	r0, r3
 8003580:	f000 fbb2 	bl	8003ce8 <TIM_ITRx_SetConfig>
      break;
 8003584:	e02e      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003592:	001a      	movs	r2, r3
 8003594:	f000 fb76 	bl	8003c84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2160      	movs	r1, #96	@ 0x60
 800359e:	0018      	movs	r0, r3
 80035a0:	f000 fba2 	bl	8003ce8 <TIM_ITRx_SetConfig>
      break;
 80035a4:	e01e      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b2:	001a      	movs	r2, r3
 80035b4:	f000 fb38 	bl	8003c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2140      	movs	r1, #64	@ 0x40
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 fb92 	bl	8003ce8 <TIM_ITRx_SetConfig>
      break;
 80035c4:	e00e      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	0019      	movs	r1, r3
 80035d0:	0010      	movs	r0, r2
 80035d2:	f000 fb89 	bl	8003ce8 <TIM_ITRx_SetConfig>
      break;
 80035d6:	e005      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80035d8:	230f      	movs	r3, #15
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
      break;
 80035e0:	e000      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80035e2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	223d      	movs	r2, #61	@ 0x3d
 80035e8:	2101      	movs	r1, #1
 80035ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	223c      	movs	r2, #60	@ 0x3c
 80035f0:	2100      	movs	r1, #0
 80035f2:	5499      	strb	r1, [r3, r2]

  return status;
 80035f4:	230f      	movs	r3, #15
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	781b      	ldrb	r3, [r3, #0]
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bd80      	pop	{r7, pc}
 8003602:	46c0      	nop			@ (mov r8, r8)
 8003604:	ffceff88 	.word	0xffceff88
 8003608:	ffff00ff 	.word	0xffff00ff

0800360c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a2e      	ldr	r2, [pc, #184]	@ (80036d8 <TIM_Base_SetConfig+0xcc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_Base_SetConfig+0x20>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a2d      	ldr	r2, [pc, #180]	@ (80036dc <TIM_Base_SetConfig+0xd0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d108      	bne.n	800363e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2270      	movs	r2, #112	@ 0x70
 8003630:	4393      	bics	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a25      	ldr	r2, [pc, #148]	@ (80036d8 <TIM_Base_SetConfig+0xcc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00f      	beq.n	8003666 <TIM_Base_SetConfig+0x5a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a24      	ldr	r2, [pc, #144]	@ (80036dc <TIM_Base_SetConfig+0xd0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00b      	beq.n	8003666 <TIM_Base_SetConfig+0x5a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a23      	ldr	r2, [pc, #140]	@ (80036e0 <TIM_Base_SetConfig+0xd4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <TIM_Base_SetConfig+0x5a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a22      	ldr	r2, [pc, #136]	@ (80036e4 <TIM_Base_SetConfig+0xd8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d003      	beq.n	8003666 <TIM_Base_SetConfig+0x5a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a21      	ldr	r2, [pc, #132]	@ (80036e8 <TIM_Base_SetConfig+0xdc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d108      	bne.n	8003678 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a20      	ldr	r2, [pc, #128]	@ (80036ec <TIM_Base_SetConfig+0xe0>)
 800366a:	4013      	ands	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2280      	movs	r2, #128	@ 0x80
 800367c:	4393      	bics	r3, r2
 800367e:	001a      	movs	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a0f      	ldr	r2, [pc, #60]	@ (80036d8 <TIM_Base_SetConfig+0xcc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d007      	beq.n	80036b0 <TIM_Base_SetConfig+0xa4>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a10      	ldr	r2, [pc, #64]	@ (80036e4 <TIM_Base_SetConfig+0xd8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_Base_SetConfig+0xa4>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a0f      	ldr	r2, [pc, #60]	@ (80036e8 <TIM_Base_SetConfig+0xdc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d103      	bne.n	80036b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2204      	movs	r2, #4
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	601a      	str	r2, [r3, #0]
}
 80036d0:	46c0      	nop			@ (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b004      	add	sp, #16
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40002000 	.word	0x40002000
 80036e4:	40014400 	.word	0x40014400
 80036e8:	40014800 	.word	0x40014800
 80036ec:	fffffcff 	.word	0xfffffcff

080036f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	2201      	movs	r2, #1
 8003706:	4393      	bics	r3, r2
 8003708:	001a      	movs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4a2e      	ldr	r2, [pc, #184]	@ (80037d8 <TIM_OC1_SetConfig+0xe8>)
 800371e:	4013      	ands	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2203      	movs	r2, #3
 8003726:	4393      	bics	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2202      	movs	r2, #2
 8003738:	4393      	bics	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a24      	ldr	r2, [pc, #144]	@ (80037dc <TIM_OC1_SetConfig+0xec>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d007      	beq.n	800375e <TIM_OC1_SetConfig+0x6e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a23      	ldr	r2, [pc, #140]	@ (80037e0 <TIM_OC1_SetConfig+0xf0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d003      	beq.n	800375e <TIM_OC1_SetConfig+0x6e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a22      	ldr	r2, [pc, #136]	@ (80037e4 <TIM_OC1_SetConfig+0xf4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d10c      	bne.n	8003778 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2208      	movs	r2, #8
 8003762:	4393      	bics	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2204      	movs	r2, #4
 8003774:	4393      	bics	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a18      	ldr	r2, [pc, #96]	@ (80037dc <TIM_OC1_SetConfig+0xec>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d007      	beq.n	8003790 <TIM_OC1_SetConfig+0xa0>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a17      	ldr	r2, [pc, #92]	@ (80037e0 <TIM_OC1_SetConfig+0xf0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_OC1_SetConfig+0xa0>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a16      	ldr	r2, [pc, #88]	@ (80037e4 <TIM_OC1_SetConfig+0xf4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d111      	bne.n	80037b4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4a15      	ldr	r2, [pc, #84]	@ (80037e8 <TIM_OC1_SetConfig+0xf8>)
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4a14      	ldr	r2, [pc, #80]	@ (80037ec <TIM_OC1_SetConfig+0xfc>)
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b006      	add	sp, #24
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	fffeff8f 	.word	0xfffeff8f
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800
 80037e8:	fffffeff 	.word	0xfffffeff
 80037ec:	fffffdff 	.word	0xfffffdff

080037f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	2210      	movs	r2, #16
 8003806:	4393      	bics	r3, r2
 8003808:	001a      	movs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4a2c      	ldr	r2, [pc, #176]	@ (80038d0 <TIM_OC2_SetConfig+0xe0>)
 800381e:	4013      	ands	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a2b      	ldr	r2, [pc, #172]	@ (80038d4 <TIM_OC2_SetConfig+0xe4>)
 8003826:	4013      	ands	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2220      	movs	r2, #32
 800383a:	4393      	bics	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a22      	ldr	r2, [pc, #136]	@ (80038d8 <TIM_OC2_SetConfig+0xe8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d10d      	bne.n	800386e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2280      	movs	r2, #128	@ 0x80
 8003856:	4393      	bics	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2240      	movs	r2, #64	@ 0x40
 800386a:	4393      	bics	r3, r2
 800386c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a19      	ldr	r2, [pc, #100]	@ (80038d8 <TIM_OC2_SetConfig+0xe8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <TIM_OC2_SetConfig+0x96>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a18      	ldr	r2, [pc, #96]	@ (80038dc <TIM_OC2_SetConfig+0xec>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d003      	beq.n	8003886 <TIM_OC2_SetConfig+0x96>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a17      	ldr	r2, [pc, #92]	@ (80038e0 <TIM_OC2_SetConfig+0xf0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d113      	bne.n	80038ae <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4a16      	ldr	r2, [pc, #88]	@ (80038e4 <TIM_OC2_SetConfig+0xf4>)
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4a15      	ldr	r2, [pc, #84]	@ (80038e8 <TIM_OC2_SetConfig+0xf8>)
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	621a      	str	r2, [r3, #32]
}
 80038c8:	46c0      	nop			@ (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b006      	add	sp, #24
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	feff8fff 	.word	0xfeff8fff
 80038d4:	fffffcff 	.word	0xfffffcff
 80038d8:	40012c00 	.word	0x40012c00
 80038dc:	40014400 	.word	0x40014400
 80038e0:	40014800 	.word	0x40014800
 80038e4:	fffffbff 	.word	0xfffffbff
 80038e8:	fffff7ff 	.word	0xfffff7ff

080038ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	4a31      	ldr	r2, [pc, #196]	@ (80039c8 <TIM_OC3_SetConfig+0xdc>)
 8003902:	401a      	ands	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a2d      	ldr	r2, [pc, #180]	@ (80039cc <TIM_OC3_SetConfig+0xe0>)
 8003918:	4013      	ands	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2203      	movs	r2, #3
 8003920:	4393      	bics	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	4a27      	ldr	r2, [pc, #156]	@ (80039d0 <TIM_OC3_SetConfig+0xe4>)
 8003932:	4013      	ands	r3, r2
 8003934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a23      	ldr	r2, [pc, #140]	@ (80039d4 <TIM_OC3_SetConfig+0xe8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d10d      	bne.n	8003966 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	4a22      	ldr	r2, [pc, #136]	@ (80039d8 <TIM_OC3_SetConfig+0xec>)
 800394e:	4013      	ands	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	4a1e      	ldr	r2, [pc, #120]	@ (80039dc <TIM_OC3_SetConfig+0xf0>)
 8003962:	4013      	ands	r3, r2
 8003964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1a      	ldr	r2, [pc, #104]	@ (80039d4 <TIM_OC3_SetConfig+0xe8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_OC3_SetConfig+0x92>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1b      	ldr	r2, [pc, #108]	@ (80039e0 <TIM_OC3_SetConfig+0xf4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_OC3_SetConfig+0x92>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1a      	ldr	r2, [pc, #104]	@ (80039e4 <TIM_OC3_SetConfig+0xf8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d113      	bne.n	80039a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <TIM_OC3_SetConfig+0xfc>)
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4a18      	ldr	r2, [pc, #96]	@ (80039ec <TIM_OC3_SetConfig+0x100>)
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	46c0      	nop			@ (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b006      	add	sp, #24
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	fffffeff 	.word	0xfffffeff
 80039cc:	fffeff8f 	.word	0xfffeff8f
 80039d0:	fffffdff 	.word	0xfffffdff
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	fffff7ff 	.word	0xfffff7ff
 80039dc:	fffffbff 	.word	0xfffffbff
 80039e0:	40014400 	.word	0x40014400
 80039e4:	40014800 	.word	0x40014800
 80039e8:	ffffefff 	.word	0xffffefff
 80039ec:	ffffdfff 	.word	0xffffdfff

080039f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	4a24      	ldr	r2, [pc, #144]	@ (8003a98 <TIM_OC4_SetConfig+0xa8>)
 8003a06:	401a      	ands	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a20      	ldr	r2, [pc, #128]	@ (8003a9c <TIM_OC4_SetConfig+0xac>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa0 <TIM_OC4_SetConfig+0xb0>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa4 <TIM_OC4_SetConfig+0xb4>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	031b      	lsls	r3, r3, #12
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a17      	ldr	r2, [pc, #92]	@ (8003aa8 <TIM_OC4_SetConfig+0xb8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <TIM_OC4_SetConfig+0x70>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a16      	ldr	r2, [pc, #88]	@ (8003aac <TIM_OC4_SetConfig+0xbc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_OC4_SetConfig+0x70>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a15      	ldr	r2, [pc, #84]	@ (8003ab0 <TIM_OC4_SetConfig+0xc0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d109      	bne.n	8003a74 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	4a14      	ldr	r2, [pc, #80]	@ (8003ab4 <TIM_OC4_SetConfig+0xc4>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	019b      	lsls	r3, r3, #6
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	46c0      	nop			@ (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b006      	add	sp, #24
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	ffffefff 	.word	0xffffefff
 8003a9c:	feff8fff 	.word	0xfeff8fff
 8003aa0:	fffffcff 	.word	0xfffffcff
 8003aa4:	ffffdfff 	.word	0xffffdfff
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40014400 	.word	0x40014400
 8003ab0:	40014800 	.word	0x40014800
 8003ab4:	ffffbfff 	.word	0xffffbfff

08003ab8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	4a21      	ldr	r2, [pc, #132]	@ (8003b54 <TIM_OC5_SetConfig+0x9c>)
 8003ace:	401a      	ands	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b58 <TIM_OC5_SetConfig+0xa0>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4a19      	ldr	r2, [pc, #100]	@ (8003b5c <TIM_OC5_SetConfig+0xa4>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	041b      	lsls	r3, r3, #16
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a15      	ldr	r2, [pc, #84]	@ (8003b60 <TIM_OC5_SetConfig+0xa8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d007      	beq.n	8003b1e <TIM_OC5_SetConfig+0x66>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a14      	ldr	r2, [pc, #80]	@ (8003b64 <TIM_OC5_SetConfig+0xac>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_OC5_SetConfig+0x66>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a13      	ldr	r2, [pc, #76]	@ (8003b68 <TIM_OC5_SetConfig+0xb0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d109      	bne.n	8003b32 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	4a0c      	ldr	r2, [pc, #48]	@ (8003b54 <TIM_OC5_SetConfig+0x9c>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	621a      	str	r2, [r3, #32]
}
 8003b4c:	46c0      	nop			@ (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b006      	add	sp, #24
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	fffeffff 	.word	0xfffeffff
 8003b58:	fffeff8f 	.word	0xfffeff8f
 8003b5c:	fffdffff 	.word	0xfffdffff
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40014400 	.word	0x40014400
 8003b68:	40014800 	.word	0x40014800

08003b6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	4a22      	ldr	r2, [pc, #136]	@ (8003c0c <TIM_OC6_SetConfig+0xa0>)
 8003b82:	401a      	ands	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a1e      	ldr	r2, [pc, #120]	@ (8003c10 <TIM_OC6_SetConfig+0xa4>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4a1a      	ldr	r2, [pc, #104]	@ (8003c14 <TIM_OC6_SetConfig+0xa8>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	051b      	lsls	r3, r3, #20
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a16      	ldr	r2, [pc, #88]	@ (8003c18 <TIM_OC6_SetConfig+0xac>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <TIM_OC6_SetConfig+0x68>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a15      	ldr	r2, [pc, #84]	@ (8003c1c <TIM_OC6_SetConfig+0xb0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_OC6_SetConfig+0x68>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a14      	ldr	r2, [pc, #80]	@ (8003c20 <TIM_OC6_SetConfig+0xb4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d109      	bne.n	8003be8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4a13      	ldr	r2, [pc, #76]	@ (8003c24 <TIM_OC6_SetConfig+0xb8>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	029b      	lsls	r3, r3, #10
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b006      	add	sp, #24
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	46c0      	nop			@ (mov r8, r8)
 8003c0c:	ffefffff 	.word	0xffefffff
 8003c10:	feff8fff 	.word	0xfeff8fff
 8003c14:	ffdfffff 	.word	0xffdfffff
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40014400 	.word	0x40014400
 8003c20:	40014800 	.word	0x40014800
 8003c24:	fffbffff 	.word	0xfffbffff

08003c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	4393      	bics	r3, r2
 8003c42:	001a      	movs	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	22f0      	movs	r2, #240	@ 0xf0
 8003c52:	4393      	bics	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	220a      	movs	r2, #10
 8003c64:	4393      	bics	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	621a      	str	r2, [r3, #32]
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b006      	add	sp, #24
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	2210      	movs	r2, #16
 8003c9c:	4393      	bics	r3, r2
 8003c9e:	001a      	movs	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4a0d      	ldr	r2, [pc, #52]	@ (8003ce4 <TIM_TI2_ConfigInputStage+0x60>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	031b      	lsls	r3, r3, #12
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	22a0      	movs	r2, #160	@ 0xa0
 8003cc0:	4393      	bics	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	621a      	str	r2, [r3, #32]
}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b006      	add	sp, #24
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	ffff0fff 	.word	0xffff0fff

08003ce8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a08      	ldr	r2, [pc, #32]	@ (8003d1c <TIM_ITRx_SetConfig+0x34>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	2207      	movs	r2, #7
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	609a      	str	r2, [r3, #8]
}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b004      	add	sp, #16
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	ffcfff8f 	.word	0xffcfff8f

08003d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4a09      	ldr	r2, [pc, #36]	@ (8003d5c <TIM_ETR_SetConfig+0x3c>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	021a      	lsls	r2, r3, #8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	609a      	str	r2, [r3, #8]
}
 8003d54:	46c0      	nop			@ (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b006      	add	sp, #24
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	ffff00ff 	.word	0xffff00ff

08003d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	221f      	movs	r2, #31
 8003d70:	4013      	ands	r3, r2
 8003d72:	2201      	movs	r2, #1
 8003d74:	409a      	lsls	r2, r3
 8003d76:	0013      	movs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	43d2      	mvns	r2, r2
 8003d82:	401a      	ands	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	211f      	movs	r1, #31
 8003d90:	400b      	ands	r3, r1
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4099      	lsls	r1, r3
 8003d96:	000b      	movs	r3, r1
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b006      	add	sp, #24
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	223c      	movs	r2, #60	@ 0x3c
 8003db6:	5c9b      	ldrb	r3, [r3, r2]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e04a      	b.n	8003e56 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	223c      	movs	r2, #60	@ 0x3c
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	223d      	movs	r2, #61	@ 0x3d
 8003dcc:	2102      	movs	r1, #2
 8003dce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d108      	bne.n	8003dfc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4a1d      	ldr	r2, [pc, #116]	@ (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2270      	movs	r2, #112	@ 0x70
 8003e00:	4393      	bics	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a11      	ldr	r2, [pc, #68]	@ (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d004      	beq.n	8003e2a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a10      	ldr	r2, [pc, #64]	@ (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d10c      	bne.n	8003e44 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2280      	movs	r2, #128	@ 0x80
 8003e2e:	4393      	bics	r3, r2
 8003e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	223d      	movs	r2, #61	@ 0x3d
 8003e48:	2101      	movs	r1, #1
 8003e4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	223c      	movs	r2, #60	@ 0x3c
 8003e50:	2100      	movs	r1, #0
 8003e52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	0018      	movs	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b004      	add	sp, #16
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	ff0fffff 	.word	0xff0fffff
 8003e68:	40000400 	.word	0x40000400

08003e6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	223c      	movs	r2, #60	@ 0x3c
 8003e7e:	5c9b      	ldrb	r3, [r3, r2]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e06f      	b.n	8003f68 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	223c      	movs	r2, #60	@ 0x3c
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	22ff      	movs	r2, #255	@ 0xff
 8003e94:	4393      	bics	r3, r2
 8003e96:	001a      	movs	r2, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4a33      	ldr	r2, [pc, #204]	@ (8003f70 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a30      	ldr	r2, [pc, #192]	@ (8003f74 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a2e      	ldr	r2, [pc, #184]	@ (8003f78 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8003f7c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003ece:	401a      	ands	r2, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a29      	ldr	r2, [pc, #164]	@ (8003f80 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003edc:	401a      	ands	r2, r3
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a26      	ldr	r2, [pc, #152]	@ (8003f84 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003eea:	401a      	ands	r2, r3
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4a24      	ldr	r2, [pc, #144]	@ (8003f88 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003ef8:	401a      	ands	r2, r3
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	041b      	lsls	r3, r3, #16
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a21      	ldr	r2, [pc, #132]	@ (8003f8c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003f08:	401a      	ands	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1e      	ldr	r2, [pc, #120]	@ (8003f90 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d11c      	bne.n	8003f56 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003f94 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003f20:	401a      	ands	r2, r3
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f26:	051b      	lsls	r3, r3, #20
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003f98 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003f30:	401a      	ands	r2, r3
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4a17      	ldr	r2, [pc, #92]	@ (8003f9c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003f3e:	401a      	ands	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a15      	ldr	r2, [pc, #84]	@ (8003fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003f4c:	401a      	ands	r2, r3
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	223c      	movs	r2, #60	@ 0x3c
 8003f62:	2100      	movs	r1, #0
 8003f64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b004      	add	sp, #16
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	fffffcff 	.word	0xfffffcff
 8003f74:	fffffbff 	.word	0xfffffbff
 8003f78:	fffff7ff 	.word	0xfffff7ff
 8003f7c:	ffffefff 	.word	0xffffefff
 8003f80:	ffffdfff 	.word	0xffffdfff
 8003f84:	ffffbfff 	.word	0xffffbfff
 8003f88:	fff0ffff 	.word	0xfff0ffff
 8003f8c:	efffffff 	.word	0xefffffff
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	ff0fffff 	.word	0xff0fffff
 8003f98:	feffffff 	.word	0xfeffffff
 8003f9c:	fdffffff 	.word	0xfdffffff
 8003fa0:	dfffffff 	.word	0xdfffffff

08003fa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e046      	b.n	8004044 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2288      	movs	r2, #136	@ 0x88
 8003fba:	589b      	ldr	r3, [r3, r2]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d107      	bne.n	8003fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2284      	movs	r2, #132	@ 0x84
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f7fd fc9c 	bl	8001908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2288      	movs	r2, #136	@ 0x88
 8003fd4:	2124      	movs	r1, #36	@ 0x24
 8003fd6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	438a      	bics	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f000 fe08 	bl	8004c08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f000 fc86 	bl	800490c <UART_SetConfig>
 8004000:	0003      	movs	r3, r0
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e01c      	b.n	8004044 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	490d      	ldr	r1, [pc, #52]	@ (800404c <HAL_UART_Init+0xa8>)
 8004016:	400a      	ands	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	212a      	movs	r1, #42	@ 0x2a
 8004026:	438a      	bics	r2, r1
 8004028:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2101      	movs	r1, #1
 8004036:	430a      	orrs	r2, r1
 8004038:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	0018      	movs	r0, r3
 800403e:	f000 fe97 	bl	8004d70 <UART_CheckIdleState>
 8004042:	0003      	movs	r3, r0
}
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b002      	add	sp, #8
 800404a:	bd80      	pop	{r7, pc}
 800404c:	ffffb7ff 	.word	0xffffb7ff

08004050 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08a      	sub	sp, #40	@ 0x28
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	1dbb      	adds	r3, r7, #6
 800405e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2288      	movs	r2, #136	@ 0x88
 8004064:	589b      	ldr	r3, [r3, r2]
 8004066:	2b20      	cmp	r3, #32
 8004068:	d000      	beq.n	800406c <HAL_UART_Transmit+0x1c>
 800406a:	e090      	b.n	800418e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_UART_Transmit+0x2a>
 8004072:	1dbb      	adds	r3, r7, #6
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e088      	b.n	8004190 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	2380      	movs	r3, #128	@ 0x80
 8004084:	015b      	lsls	r3, r3, #5
 8004086:	429a      	cmp	r2, r3
 8004088:	d109      	bne.n	800409e <HAL_UART_Transmit+0x4e>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d105      	bne.n	800409e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2201      	movs	r2, #1
 8004096:	4013      	ands	r3, r2
 8004098:	d001      	beq.n	800409e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e078      	b.n	8004190 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2290      	movs	r2, #144	@ 0x90
 80040a2:	2100      	movs	r1, #0
 80040a4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2288      	movs	r2, #136	@ 0x88
 80040aa:	2121      	movs	r1, #33	@ 0x21
 80040ac:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ae:	f7fd fe0b 	bl	8001cc8 <HAL_GetTick>
 80040b2:	0003      	movs	r3, r0
 80040b4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1dba      	adds	r2, r7, #6
 80040ba:	2154      	movs	r1, #84	@ 0x54
 80040bc:	8812      	ldrh	r2, [r2, #0]
 80040be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1dba      	adds	r2, r7, #6
 80040c4:	2156      	movs	r1, #86	@ 0x56
 80040c6:	8812      	ldrh	r2, [r2, #0]
 80040c8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	2380      	movs	r3, #128	@ 0x80
 80040d0:	015b      	lsls	r3, r3, #5
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d108      	bne.n	80040e8 <HAL_UART_Transmit+0x98>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d104      	bne.n	80040e8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	e003      	b.n	80040f0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040f0:	e030      	b.n	8004154 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	0013      	movs	r3, r2
 80040fc:	2200      	movs	r2, #0
 80040fe:	2180      	movs	r1, #128	@ 0x80
 8004100:	f000 fee0 	bl	8004ec4 <UART_WaitOnFlagUntilTimeout>
 8004104:	1e03      	subs	r3, r0, #0
 8004106:	d005      	beq.n	8004114 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2288      	movs	r2, #136	@ 0x88
 800410c:	2120      	movs	r1, #32
 800410e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e03d      	b.n	8004190 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10b      	bne.n	8004132 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	001a      	movs	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	05d2      	lsls	r2, r2, #23
 8004126:	0dd2      	lsrs	r2, r2, #23
 8004128:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	3302      	adds	r3, #2
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	e007      	b.n	8004142 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	3301      	adds	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2256      	movs	r2, #86	@ 0x56
 8004146:	5a9b      	ldrh	r3, [r3, r2]
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b299      	uxth	r1, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2256      	movs	r2, #86	@ 0x56
 8004152:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2256      	movs	r2, #86	@ 0x56
 8004158:	5a9b      	ldrh	r3, [r3, r2]
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1c8      	bne.n	80040f2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	0013      	movs	r3, r2
 800416a:	2200      	movs	r2, #0
 800416c:	2140      	movs	r1, #64	@ 0x40
 800416e:	f000 fea9 	bl	8004ec4 <UART_WaitOnFlagUntilTimeout>
 8004172:	1e03      	subs	r3, r0, #0
 8004174:	d005      	beq.n	8004182 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2288      	movs	r2, #136	@ 0x88
 800417a:	2120      	movs	r1, #32
 800417c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e006      	b.n	8004190 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2288      	movs	r2, #136	@ 0x88
 8004186:	2120      	movs	r1, #32
 8004188:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e000      	b.n	8004190 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800418e:	2302      	movs	r3, #2
  }
}
 8004190:	0018      	movs	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	b008      	add	sp, #32
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	1dbb      	adds	r3, r7, #6
 80041a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	228c      	movs	r2, #140	@ 0x8c
 80041aa:	589b      	ldr	r3, [r3, r2]
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d145      	bne.n	800423c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_UART_Receive_IT+0x26>
 80041b6:	1dbb      	adds	r3, r7, #6
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e03d      	b.n	800423e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	2380      	movs	r3, #128	@ 0x80
 80041c8:	015b      	lsls	r3, r3, #5
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d109      	bne.n	80041e2 <HAL_UART_Receive_IT+0x4a>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d105      	bne.n	80041e2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2201      	movs	r2, #1
 80041da:	4013      	ands	r3, r2
 80041dc:	d001      	beq.n	80041e2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e02d      	b.n	800423e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	2380      	movs	r3, #128	@ 0x80
 80041f0:	041b      	lsls	r3, r3, #16
 80041f2:	4013      	ands	r3, r2
 80041f4:	d019      	beq.n	800422a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041f6:	f3ef 8310 	mrs	r3, PRIMASK
 80041fa:	613b      	str	r3, [r7, #16]
  return(result);
 80041fc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	2301      	movs	r3, #1
 8004202:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f383 8810 	msr	PRIMASK, r3
}
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2180      	movs	r1, #128	@ 0x80
 8004218:	04c9      	lsls	r1, r1, #19
 800421a:	430a      	orrs	r2, r1
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	f383 8810 	msr	PRIMASK, r3
}
 8004228:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800422a:	1dbb      	adds	r3, r7, #6
 800422c:	881a      	ldrh	r2, [r3, #0]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	0018      	movs	r0, r3
 8004234:	f000 feb6 	bl	8004fa4 <UART_Start_Receive_IT>
 8004238:	0003      	movs	r3, r0
 800423a:	e000      	b.n	800423e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
  }
}
 800423e:	0018      	movs	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	b008      	add	sp, #32
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004248:	b5b0      	push	{r4, r5, r7, lr}
 800424a:	b0aa      	sub	sp, #168	@ 0xa8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	22a4      	movs	r2, #164	@ 0xa4
 8004258:	18b9      	adds	r1, r7, r2
 800425a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	20a0      	movs	r0, #160	@ 0xa0
 8004264:	1839      	adds	r1, r7, r0
 8004266:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	249c      	movs	r4, #156	@ 0x9c
 8004270:	1939      	adds	r1, r7, r4
 8004272:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004274:	0011      	movs	r1, r2
 8004276:	18bb      	adds	r3, r7, r2
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4aa2      	ldr	r2, [pc, #648]	@ (8004504 <HAL_UART_IRQHandler+0x2bc>)
 800427c:	4013      	ands	r3, r2
 800427e:	2298      	movs	r2, #152	@ 0x98
 8004280:	18bd      	adds	r5, r7, r2
 8004282:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004284:	18bb      	adds	r3, r7, r2
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d11a      	bne.n	80042c2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800428c:	187b      	adds	r3, r7, r1
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2220      	movs	r2, #32
 8004292:	4013      	ands	r3, r2
 8004294:	d015      	beq.n	80042c2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004296:	183b      	adds	r3, r7, r0
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2220      	movs	r2, #32
 800429c:	4013      	ands	r3, r2
 800429e:	d105      	bne.n	80042ac <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042a0:	193b      	adds	r3, r7, r4
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	2380      	movs	r3, #128	@ 0x80
 80042a6:	055b      	lsls	r3, r3, #21
 80042a8:	4013      	ands	r3, r2
 80042aa:	d00a      	beq.n	80042c2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d100      	bne.n	80042b6 <HAL_UART_IRQHandler+0x6e>
 80042b4:	e2fb      	b.n	80048ae <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	0010      	movs	r0, r2
 80042be:	4798      	blx	r3
      }
      return;
 80042c0:	e2f5      	b.n	80048ae <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80042c2:	2398      	movs	r3, #152	@ 0x98
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d100      	bne.n	80042ce <HAL_UART_IRQHandler+0x86>
 80042cc:	e122      	b.n	8004514 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80042ce:	239c      	movs	r3, #156	@ 0x9c
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a8c      	ldr	r2, [pc, #560]	@ (8004508 <HAL_UART_IRQHandler+0x2c0>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	d106      	bne.n	80042e8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80042da:	23a0      	movs	r3, #160	@ 0xa0
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a8a      	ldr	r2, [pc, #552]	@ (800450c <HAL_UART_IRQHandler+0x2c4>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	d100      	bne.n	80042e8 <HAL_UART_IRQHandler+0xa0>
 80042e6:	e115      	b.n	8004514 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042e8:	23a4      	movs	r3, #164	@ 0xa4
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2201      	movs	r2, #1
 80042f0:	4013      	ands	r3, r2
 80042f2:	d012      	beq.n	800431a <HAL_UART_IRQHandler+0xd2>
 80042f4:	23a0      	movs	r3, #160	@ 0xa0
 80042f6:	18fb      	adds	r3, r7, r3
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	2380      	movs	r3, #128	@ 0x80
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	4013      	ands	r3, r2
 8004300:	d00b      	beq.n	800431a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2201      	movs	r2, #1
 8004308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2290      	movs	r2, #144	@ 0x90
 800430e:	589b      	ldr	r3, [r3, r2]
 8004310:	2201      	movs	r2, #1
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2190      	movs	r1, #144	@ 0x90
 8004318:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800431a:	23a4      	movs	r3, #164	@ 0xa4
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2202      	movs	r2, #2
 8004322:	4013      	ands	r3, r2
 8004324:	d011      	beq.n	800434a <HAL_UART_IRQHandler+0x102>
 8004326:	239c      	movs	r3, #156	@ 0x9c
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2201      	movs	r2, #1
 800432e:	4013      	ands	r3, r2
 8004330:	d00b      	beq.n	800434a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2202      	movs	r2, #2
 8004338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2290      	movs	r2, #144	@ 0x90
 800433e:	589b      	ldr	r3, [r3, r2]
 8004340:	2204      	movs	r2, #4
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2190      	movs	r1, #144	@ 0x90
 8004348:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800434a:	23a4      	movs	r3, #164	@ 0xa4
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2204      	movs	r2, #4
 8004352:	4013      	ands	r3, r2
 8004354:	d011      	beq.n	800437a <HAL_UART_IRQHandler+0x132>
 8004356:	239c      	movs	r3, #156	@ 0x9c
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2201      	movs	r2, #1
 800435e:	4013      	ands	r3, r2
 8004360:	d00b      	beq.n	800437a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2204      	movs	r2, #4
 8004368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2290      	movs	r2, #144	@ 0x90
 800436e:	589b      	ldr	r3, [r3, r2]
 8004370:	2202      	movs	r2, #2
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2190      	movs	r1, #144	@ 0x90
 8004378:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800437a:	23a4      	movs	r3, #164	@ 0xa4
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2208      	movs	r2, #8
 8004382:	4013      	ands	r3, r2
 8004384:	d017      	beq.n	80043b6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004386:	23a0      	movs	r3, #160	@ 0xa0
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2220      	movs	r2, #32
 800438e:	4013      	ands	r3, r2
 8004390:	d105      	bne.n	800439e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004392:	239c      	movs	r3, #156	@ 0x9c
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5b      	ldr	r2, [pc, #364]	@ (8004508 <HAL_UART_IRQHandler+0x2c0>)
 800439a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800439c:	d00b      	beq.n	80043b6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2208      	movs	r2, #8
 80043a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2290      	movs	r2, #144	@ 0x90
 80043aa:	589b      	ldr	r3, [r3, r2]
 80043ac:	2208      	movs	r2, #8
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2190      	movs	r1, #144	@ 0x90
 80043b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043b6:	23a4      	movs	r3, #164	@ 0xa4
 80043b8:	18fb      	adds	r3, r7, r3
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	2380      	movs	r3, #128	@ 0x80
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	4013      	ands	r3, r2
 80043c2:	d013      	beq.n	80043ec <HAL_UART_IRQHandler+0x1a4>
 80043c4:	23a0      	movs	r3, #160	@ 0xa0
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	2380      	movs	r3, #128	@ 0x80
 80043cc:	04db      	lsls	r3, r3, #19
 80043ce:	4013      	ands	r3, r2
 80043d0:	d00c      	beq.n	80043ec <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2280      	movs	r2, #128	@ 0x80
 80043d8:	0112      	lsls	r2, r2, #4
 80043da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2290      	movs	r2, #144	@ 0x90
 80043e0:	589b      	ldr	r3, [r3, r2]
 80043e2:	2220      	movs	r2, #32
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2190      	movs	r1, #144	@ 0x90
 80043ea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2290      	movs	r2, #144	@ 0x90
 80043f0:	589b      	ldr	r3, [r3, r2]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d100      	bne.n	80043f8 <HAL_UART_IRQHandler+0x1b0>
 80043f6:	e25c      	b.n	80048b2 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80043f8:	23a4      	movs	r3, #164	@ 0xa4
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2220      	movs	r2, #32
 8004400:	4013      	ands	r3, r2
 8004402:	d015      	beq.n	8004430 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004404:	23a0      	movs	r3, #160	@ 0xa0
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2220      	movs	r2, #32
 800440c:	4013      	ands	r3, r2
 800440e:	d106      	bne.n	800441e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004410:	239c      	movs	r3, #156	@ 0x9c
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	2380      	movs	r3, #128	@ 0x80
 8004418:	055b      	lsls	r3, r3, #21
 800441a:	4013      	ands	r3, r2
 800441c:	d008      	beq.n	8004430 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	0010      	movs	r0, r2
 800442e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2290      	movs	r2, #144	@ 0x90
 8004434:	589b      	ldr	r3, [r3, r2]
 8004436:	2194      	movs	r1, #148	@ 0x94
 8004438:	187a      	adds	r2, r7, r1
 800443a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2240      	movs	r2, #64	@ 0x40
 8004444:	4013      	ands	r3, r2
 8004446:	2b40      	cmp	r3, #64	@ 0x40
 8004448:	d004      	beq.n	8004454 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800444a:	187b      	adds	r3, r7, r1
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2228      	movs	r2, #40	@ 0x28
 8004450:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004452:	d04c      	beq.n	80044ee <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	0018      	movs	r0, r3
 8004458:	f000 fec8 	bl	80051ec <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2240      	movs	r2, #64	@ 0x40
 8004464:	4013      	ands	r3, r2
 8004466:	2b40      	cmp	r3, #64	@ 0x40
 8004468:	d13c      	bne.n	80044e4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800446a:	f3ef 8310 	mrs	r3, PRIMASK
 800446e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004470:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004472:	2090      	movs	r0, #144	@ 0x90
 8004474:	183a      	adds	r2, r7, r0
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	2301      	movs	r3, #1
 800447a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800447e:	f383 8810 	msr	PRIMASK, r3
}
 8004482:	46c0      	nop			@ (mov r8, r8)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2140      	movs	r1, #64	@ 0x40
 8004490:	438a      	bics	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	183b      	adds	r3, r7, r0
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800449c:	f383 8810 	msr	PRIMASK, r3
}
 80044a0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2280      	movs	r2, #128	@ 0x80
 80044a6:	589b      	ldr	r3, [r3, r2]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d016      	beq.n	80044da <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2280      	movs	r2, #128	@ 0x80
 80044b0:	589b      	ldr	r3, [r3, r2]
 80044b2:	4a17      	ldr	r2, [pc, #92]	@ (8004510 <HAL_UART_IRQHandler+0x2c8>)
 80044b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2280      	movs	r2, #128	@ 0x80
 80044ba:	589b      	ldr	r3, [r3, r2]
 80044bc:	0018      	movs	r0, r3
 80044be:	f7fd fd4d 	bl	8001f5c <HAL_DMA_Abort_IT>
 80044c2:	1e03      	subs	r3, r0, #0
 80044c4:	d01c      	beq.n	8004500 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2280      	movs	r2, #128	@ 0x80
 80044ca:	589b      	ldr	r3, [r3, r2]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	2180      	movs	r1, #128	@ 0x80
 80044d2:	5852      	ldr	r2, [r2, r1]
 80044d4:	0010      	movs	r0, r2
 80044d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d8:	e012      	b.n	8004500 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	0018      	movs	r0, r3
 80044de:	f000 fa01 	bl	80048e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e2:	e00d      	b.n	8004500 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	0018      	movs	r0, r3
 80044e8:	f000 f9fc 	bl	80048e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	e008      	b.n	8004500 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f000 f9f7 	bl	80048e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2290      	movs	r2, #144	@ 0x90
 80044fa:	2100      	movs	r1, #0
 80044fc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80044fe:	e1d8      	b.n	80048b2 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	46c0      	nop			@ (mov r8, r8)
    return;
 8004502:	e1d6      	b.n	80048b2 <HAL_UART_IRQHandler+0x66a>
 8004504:	0000080f 	.word	0x0000080f
 8004508:	10000001 	.word	0x10000001
 800450c:	04000120 	.word	0x04000120
 8004510:	080052b9 	.word	0x080052b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004518:	2b01      	cmp	r3, #1
 800451a:	d000      	beq.n	800451e <HAL_UART_IRQHandler+0x2d6>
 800451c:	e15d      	b.n	80047da <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800451e:	23a4      	movs	r3, #164	@ 0xa4
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2210      	movs	r2, #16
 8004526:	4013      	ands	r3, r2
 8004528:	d100      	bne.n	800452c <HAL_UART_IRQHandler+0x2e4>
 800452a:	e156      	b.n	80047da <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800452c:	23a0      	movs	r3, #160	@ 0xa0
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2210      	movs	r2, #16
 8004534:	4013      	ands	r3, r2
 8004536:	d100      	bne.n	800453a <HAL_UART_IRQHandler+0x2f2>
 8004538:	e14f      	b.n	80047da <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2210      	movs	r2, #16
 8004540:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2240      	movs	r2, #64	@ 0x40
 800454a:	4013      	ands	r3, r2
 800454c:	2b40      	cmp	r3, #64	@ 0x40
 800454e:	d000      	beq.n	8004552 <HAL_UART_IRQHandler+0x30a>
 8004550:	e0c3      	b.n	80046da <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2280      	movs	r2, #128	@ 0x80
 8004556:	589b      	ldr	r3, [r3, r2]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	217e      	movs	r1, #126	@ 0x7e
 800455e:	187b      	adds	r3, r7, r1
 8004560:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004562:	187b      	adds	r3, r7, r1
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d100      	bne.n	800456c <HAL_UART_IRQHandler+0x324>
 800456a:	e097      	b.n	800469c <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	225c      	movs	r2, #92	@ 0x5c
 8004570:	5a9b      	ldrh	r3, [r3, r2]
 8004572:	187a      	adds	r2, r7, r1
 8004574:	8812      	ldrh	r2, [r2, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d300      	bcc.n	800457c <HAL_UART_IRQHandler+0x334>
 800457a:	e08f      	b.n	800469c <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	187a      	adds	r2, r7, r1
 8004580:	215e      	movs	r1, #94	@ 0x5e
 8004582:	8812      	ldrh	r2, [r2, #0]
 8004584:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2280      	movs	r2, #128	@ 0x80
 800458a:	589b      	ldr	r3, [r3, r2]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2220      	movs	r2, #32
 8004592:	4013      	ands	r3, r2
 8004594:	d170      	bne.n	8004678 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004596:	f3ef 8310 	mrs	r3, PRIMASK
 800459a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800459e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045a0:	2301      	movs	r3, #1
 80045a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a6:	f383 8810 	msr	PRIMASK, r3
}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	49c4      	ldr	r1, [pc, #784]	@ (80048c8 <HAL_UART_IRQHandler+0x680>)
 80045b8:	400a      	ands	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c2:	f383 8810 	msr	PRIMASK, r3
}
 80045c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045c8:	f3ef 8310 	mrs	r3, PRIMASK
 80045cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80045ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80045d2:	2301      	movs	r3, #1
 80045d4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045d8:	f383 8810 	msr	PRIMASK, r3
}
 80045dc:	46c0      	nop			@ (mov r8, r8)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2101      	movs	r1, #1
 80045ea:	438a      	bics	r2, r1
 80045ec:	609a      	str	r2, [r3, #8]
 80045ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f4:	f383 8810 	msr	PRIMASK, r3
}
 80045f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045fa:	f3ef 8310 	mrs	r3, PRIMASK
 80045fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004602:	673b      	str	r3, [r7, #112]	@ 0x70
 8004604:	2301      	movs	r3, #1
 8004606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800460a:	f383 8810 	msr	PRIMASK, r3
}
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2140      	movs	r1, #64	@ 0x40
 800461c:	438a      	bics	r2, r1
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004622:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004626:	f383 8810 	msr	PRIMASK, r3
}
 800462a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	228c      	movs	r2, #140	@ 0x8c
 8004630:	2120      	movs	r1, #32
 8004632:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800463a:	f3ef 8310 	mrs	r3, PRIMASK
 800463e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004642:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004644:	2301      	movs	r3, #1
 8004646:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004648:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800464a:	f383 8810 	msr	PRIMASK, r3
}
 800464e:	46c0      	nop			@ (mov r8, r8)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2110      	movs	r1, #16
 800465c:	438a      	bics	r2, r1
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004662:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004664:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004666:	f383 8810 	msr	PRIMASK, r3
}
 800466a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2280      	movs	r2, #128	@ 0x80
 8004670:	589b      	ldr	r3, [r3, r2]
 8004672:	0018      	movs	r0, r3
 8004674:	f7fd fc10 	bl	8001e98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	225c      	movs	r2, #92	@ 0x5c
 8004682:	5a9a      	ldrh	r2, [r3, r2]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	215e      	movs	r1, #94	@ 0x5e
 8004688:	5a5b      	ldrh	r3, [r3, r1]
 800468a:	b29b      	uxth	r3, r3
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	b29a      	uxth	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	0011      	movs	r1, r2
 8004694:	0018      	movs	r0, r3
 8004696:	f000 f92d 	bl	80048f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800469a:	e10c      	b.n	80048b6 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	225c      	movs	r2, #92	@ 0x5c
 80046a0:	5a9b      	ldrh	r3, [r3, r2]
 80046a2:	227e      	movs	r2, #126	@ 0x7e
 80046a4:	18ba      	adds	r2, r7, r2
 80046a6:	8812      	ldrh	r2, [r2, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d000      	beq.n	80046ae <HAL_UART_IRQHandler+0x466>
 80046ac:	e103      	b.n	80048b6 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2280      	movs	r2, #128	@ 0x80
 80046b2:	589b      	ldr	r3, [r3, r2]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2220      	movs	r2, #32
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d000      	beq.n	80046c2 <HAL_UART_IRQHandler+0x47a>
 80046c0:	e0f9      	b.n	80048b6 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	225c      	movs	r2, #92	@ 0x5c
 80046cc:	5a9a      	ldrh	r2, [r3, r2]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	0011      	movs	r1, r2
 80046d2:	0018      	movs	r0, r3
 80046d4:	f000 f90e 	bl	80048f4 <HAL_UARTEx_RxEventCallback>
      return;
 80046d8:	e0ed      	b.n	80048b6 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	225c      	movs	r2, #92	@ 0x5c
 80046de:	5a99      	ldrh	r1, [r3, r2]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	225e      	movs	r2, #94	@ 0x5e
 80046e4:	5a9b      	ldrh	r3, [r3, r2]
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	208e      	movs	r0, #142	@ 0x8e
 80046ea:	183b      	adds	r3, r7, r0
 80046ec:	1a8a      	subs	r2, r1, r2
 80046ee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	225e      	movs	r2, #94	@ 0x5e
 80046f4:	5a9b      	ldrh	r3, [r3, r2]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d100      	bne.n	80046fe <HAL_UART_IRQHandler+0x4b6>
 80046fc:	e0dd      	b.n	80048ba <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80046fe:	183b      	adds	r3, r7, r0
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d100      	bne.n	8004708 <HAL_UART_IRQHandler+0x4c0>
 8004706:	e0d8      	b.n	80048ba <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004708:	f3ef 8310 	mrs	r3, PRIMASK
 800470c:	60fb      	str	r3, [r7, #12]
  return(result);
 800470e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004710:	2488      	movs	r4, #136	@ 0x88
 8004712:	193a      	adds	r2, r7, r4
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	2301      	movs	r3, #1
 8004718:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f383 8810 	msr	PRIMASK, r3
}
 8004720:	46c0      	nop			@ (mov r8, r8)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4967      	ldr	r1, [pc, #412]	@ (80048cc <HAL_UART_IRQHandler+0x684>)
 800472e:	400a      	ands	r2, r1
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	193b      	adds	r3, r7, r4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f383 8810 	msr	PRIMASK, r3
}
 800473e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004740:	f3ef 8310 	mrs	r3, PRIMASK
 8004744:	61bb      	str	r3, [r7, #24]
  return(result);
 8004746:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004748:	2484      	movs	r4, #132	@ 0x84
 800474a:	193a      	adds	r2, r7, r4
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	2301      	movs	r3, #1
 8004750:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f383 8810 	msr	PRIMASK, r3
}
 8004758:	46c0      	nop			@ (mov r8, r8)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	495a      	ldr	r1, [pc, #360]	@ (80048d0 <HAL_UART_IRQHandler+0x688>)
 8004766:	400a      	ands	r2, r1
 8004768:	609a      	str	r2, [r3, #8]
 800476a:	193b      	adds	r3, r7, r4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	f383 8810 	msr	PRIMASK, r3
}
 8004776:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	228c      	movs	r2, #140	@ 0x8c
 800477c:	2120      	movs	r1, #32
 800477e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800478c:	f3ef 8310 	mrs	r3, PRIMASK
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004794:	2480      	movs	r4, #128	@ 0x80
 8004796:	193a      	adds	r2, r7, r4
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	2301      	movs	r3, #1
 800479c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a0:	f383 8810 	msr	PRIMASK, r3
}
 80047a4:	46c0      	nop			@ (mov r8, r8)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2110      	movs	r1, #16
 80047b2:	438a      	bics	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	193b      	adds	r3, r7, r4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047be:	f383 8810 	msr	PRIMASK, r3
}
 80047c2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047ca:	183b      	adds	r3, r7, r0
 80047cc:	881a      	ldrh	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0011      	movs	r1, r2
 80047d2:	0018      	movs	r0, r3
 80047d4:	f000 f88e 	bl	80048f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047d8:	e06f      	b.n	80048ba <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047da:	23a4      	movs	r3, #164	@ 0xa4
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	2380      	movs	r3, #128	@ 0x80
 80047e2:	035b      	lsls	r3, r3, #13
 80047e4:	4013      	ands	r3, r2
 80047e6:	d010      	beq.n	800480a <HAL_UART_IRQHandler+0x5c2>
 80047e8:	239c      	movs	r3, #156	@ 0x9c
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	2380      	movs	r3, #128	@ 0x80
 80047f0:	03db      	lsls	r3, r3, #15
 80047f2:	4013      	ands	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2280      	movs	r2, #128	@ 0x80
 80047fc:	0352      	lsls	r2, r2, #13
 80047fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	0018      	movs	r0, r3
 8004804:	f001 fa90 	bl	8005d28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004808:	e05a      	b.n	80048c0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800480a:	23a4      	movs	r3, #164	@ 0xa4
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2280      	movs	r2, #128	@ 0x80
 8004812:	4013      	ands	r3, r2
 8004814:	d016      	beq.n	8004844 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004816:	23a0      	movs	r3, #160	@ 0xa0
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2280      	movs	r2, #128	@ 0x80
 800481e:	4013      	ands	r3, r2
 8004820:	d106      	bne.n	8004830 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004822:	239c      	movs	r3, #156	@ 0x9c
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	2380      	movs	r3, #128	@ 0x80
 800482a:	041b      	lsls	r3, r3, #16
 800482c:	4013      	ands	r3, r2
 800482e:	d009      	beq.n	8004844 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004834:	2b00      	cmp	r3, #0
 8004836:	d042      	beq.n	80048be <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	0010      	movs	r0, r2
 8004840:	4798      	blx	r3
    }
    return;
 8004842:	e03c      	b.n	80048be <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004844:	23a4      	movs	r3, #164	@ 0xa4
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2240      	movs	r2, #64	@ 0x40
 800484c:	4013      	ands	r3, r2
 800484e:	d00a      	beq.n	8004866 <HAL_UART_IRQHandler+0x61e>
 8004850:	23a0      	movs	r3, #160	@ 0xa0
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2240      	movs	r2, #64	@ 0x40
 8004858:	4013      	ands	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	0018      	movs	r0, r3
 8004860:	f000 fd3d 	bl	80052de <UART_EndTransmit_IT>
    return;
 8004864:	e02c      	b.n	80048c0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004866:	23a4      	movs	r3, #164	@ 0xa4
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	2380      	movs	r3, #128	@ 0x80
 800486e:	041b      	lsls	r3, r3, #16
 8004870:	4013      	ands	r3, r2
 8004872:	d00b      	beq.n	800488c <HAL_UART_IRQHandler+0x644>
 8004874:	23a0      	movs	r3, #160	@ 0xa0
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	2380      	movs	r3, #128	@ 0x80
 800487c:	05db      	lsls	r3, r3, #23
 800487e:	4013      	ands	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	0018      	movs	r0, r3
 8004886:	f001 fa5f 	bl	8005d48 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800488a:	e019      	b.n	80048c0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800488c:	23a4      	movs	r3, #164	@ 0xa4
 800488e:	18fb      	adds	r3, r7, r3
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	2380      	movs	r3, #128	@ 0x80
 8004894:	045b      	lsls	r3, r3, #17
 8004896:	4013      	ands	r3, r2
 8004898:	d012      	beq.n	80048c0 <HAL_UART_IRQHandler+0x678>
 800489a:	23a0      	movs	r3, #160	@ 0xa0
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	da0d      	bge.n	80048c0 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	0018      	movs	r0, r3
 80048a8:	f001 fa46 	bl	8005d38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048ac:	e008      	b.n	80048c0 <HAL_UART_IRQHandler+0x678>
      return;
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	e006      	b.n	80048c0 <HAL_UART_IRQHandler+0x678>
    return;
 80048b2:	46c0      	nop			@ (mov r8, r8)
 80048b4:	e004      	b.n	80048c0 <HAL_UART_IRQHandler+0x678>
      return;
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	e002      	b.n	80048c0 <HAL_UART_IRQHandler+0x678>
      return;
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	e000      	b.n	80048c0 <HAL_UART_IRQHandler+0x678>
    return;
 80048be:	46c0      	nop			@ (mov r8, r8)
  }
}
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b02a      	add	sp, #168	@ 0xa8
 80048c4:	bdb0      	pop	{r4, r5, r7, pc}
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	fffffeff 	.word	0xfffffeff
 80048cc:	fffffedf 	.word	0xfffffedf
 80048d0:	effffffe 	.word	0xeffffffe

080048d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048dc:	46c0      	nop			@ (mov r8, r8)
 80048de:	46bd      	mov	sp, r7
 80048e0:	b002      	add	sp, #8
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048ec:	46c0      	nop			@ (mov r8, r8)
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b002      	add	sp, #8
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	000a      	movs	r2, r1
 80048fe:	1cbb      	adds	r3, r7, #2
 8004900:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	46bd      	mov	sp, r7
 8004906:	b002      	add	sp, #8
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004914:	231e      	movs	r3, #30
 8004916:	18fb      	adds	r3, r7, r3
 8004918:	2200      	movs	r2, #0
 800491a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4aab      	ldr	r2, [pc, #684]	@ (8004be8 <UART_SetConfig+0x2dc>)
 800493c:	4013      	ands	r3, r2
 800493e:	0019      	movs	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	430a      	orrs	r2, r1
 8004948:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4aa6      	ldr	r2, [pc, #664]	@ (8004bec <UART_SetConfig+0x2e0>)
 8004952:	4013      	ands	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4a9d      	ldr	r2, [pc, #628]	@ (8004bf0 <UART_SetConfig+0x2e4>)
 800497a:	4013      	ands	r3, r2
 800497c:	0019      	movs	r1, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	430a      	orrs	r2, r1
 8004986:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498e:	220f      	movs	r2, #15
 8004990:	4393      	bics	r3, r2
 8004992:	0019      	movs	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a93      	ldr	r2, [pc, #588]	@ (8004bf4 <UART_SetConfig+0x2e8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d127      	bne.n	80049fa <UART_SetConfig+0xee>
 80049aa:	4b93      	ldr	r3, [pc, #588]	@ (8004bf8 <UART_SetConfig+0x2ec>)
 80049ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ae:	2203      	movs	r2, #3
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d017      	beq.n	80049e6 <UART_SetConfig+0xda>
 80049b6:	d81b      	bhi.n	80049f0 <UART_SetConfig+0xe4>
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d00a      	beq.n	80049d2 <UART_SetConfig+0xc6>
 80049bc:	d818      	bhi.n	80049f0 <UART_SetConfig+0xe4>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <UART_SetConfig+0xbc>
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d00a      	beq.n	80049dc <UART_SetConfig+0xd0>
 80049c6:	e013      	b.n	80049f0 <UART_SetConfig+0xe4>
 80049c8:	231f      	movs	r3, #31
 80049ca:	18fb      	adds	r3, r7, r3
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	e021      	b.n	8004a16 <UART_SetConfig+0x10a>
 80049d2:	231f      	movs	r3, #31
 80049d4:	18fb      	adds	r3, r7, r3
 80049d6:	2202      	movs	r2, #2
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	e01c      	b.n	8004a16 <UART_SetConfig+0x10a>
 80049dc:	231f      	movs	r3, #31
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	2204      	movs	r2, #4
 80049e2:	701a      	strb	r2, [r3, #0]
 80049e4:	e017      	b.n	8004a16 <UART_SetConfig+0x10a>
 80049e6:	231f      	movs	r3, #31
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	2208      	movs	r2, #8
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	e012      	b.n	8004a16 <UART_SetConfig+0x10a>
 80049f0:	231f      	movs	r3, #31
 80049f2:	18fb      	adds	r3, r7, r3
 80049f4:	2210      	movs	r2, #16
 80049f6:	701a      	strb	r2, [r3, #0]
 80049f8:	e00d      	b.n	8004a16 <UART_SetConfig+0x10a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a7f      	ldr	r2, [pc, #508]	@ (8004bfc <UART_SetConfig+0x2f0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d104      	bne.n	8004a0e <UART_SetConfig+0x102>
 8004a04:	231f      	movs	r3, #31
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	2200      	movs	r2, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	e003      	b.n	8004a16 <UART_SetConfig+0x10a>
 8004a0e:	231f      	movs	r3, #31
 8004a10:	18fb      	adds	r3, r7, r3
 8004a12:	2210      	movs	r2, #16
 8004a14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69da      	ldr	r2, [r3, #28]
 8004a1a:	2380      	movs	r3, #128	@ 0x80
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d000      	beq.n	8004a24 <UART_SetConfig+0x118>
 8004a22:	e06f      	b.n	8004b04 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004a24:	231f      	movs	r3, #31
 8004a26:	18fb      	adds	r3, r7, r3
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d01f      	beq.n	8004a6e <UART_SetConfig+0x162>
 8004a2e:	dc22      	bgt.n	8004a76 <UART_SetConfig+0x16a>
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d017      	beq.n	8004a64 <UART_SetConfig+0x158>
 8004a34:	dc1f      	bgt.n	8004a76 <UART_SetConfig+0x16a>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <UART_SetConfig+0x134>
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d005      	beq.n	8004a4a <UART_SetConfig+0x13e>
 8004a3e:	e01a      	b.n	8004a76 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a40:	f7fe f934 	bl	8002cac <HAL_RCC_GetPCLK1Freq>
 8004a44:	0003      	movs	r3, r0
 8004a46:	61bb      	str	r3, [r7, #24]
        break;
 8004a48:	e01c      	b.n	8004a84 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8004bf8 <UART_SetConfig+0x2ec>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	2207      	movs	r2, #7
 8004a52:	4013      	ands	r3, r2
 8004a54:	3301      	adds	r3, #1
 8004a56:	0019      	movs	r1, r3
 8004a58:	4869      	ldr	r0, [pc, #420]	@ (8004c00 <UART_SetConfig+0x2f4>)
 8004a5a:	f7fb fb71 	bl	8000140 <__udivsi3>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	61bb      	str	r3, [r7, #24]
        break;
 8004a62:	e00f      	b.n	8004a84 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a64:	f7fe f8c2 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	61bb      	str	r3, [r7, #24]
        break;
 8004a6c:	e00a      	b.n	8004a84 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a6e:	2380      	movs	r3, #128	@ 0x80
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	61bb      	str	r3, [r7, #24]
        break;
 8004a74:	e006      	b.n	8004a84 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a7a:	231e      	movs	r3, #30
 8004a7c:	18fb      	adds	r3, r7, r3
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
        break;
 8004a82:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d100      	bne.n	8004a8c <UART_SetConfig+0x180>
 8004a8a:	e097      	b.n	8004bbc <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a90:	4b5c      	ldr	r3, [pc, #368]	@ (8004c04 <UART_SetConfig+0x2f8>)
 8004a92:	0052      	lsls	r2, r2, #1
 8004a94:	5ad3      	ldrh	r3, [r2, r3]
 8004a96:	0019      	movs	r1, r3
 8004a98:	69b8      	ldr	r0, [r7, #24]
 8004a9a:	f7fb fb51 	bl	8000140 <__udivsi3>
 8004a9e:	0003      	movs	r3, r0
 8004aa0:	005a      	lsls	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	18d2      	adds	r2, r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	0019      	movs	r1, r3
 8004ab0:	0010      	movs	r0, r2
 8004ab2:	f7fb fb45 	bl	8000140 <__udivsi3>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b0f      	cmp	r3, #15
 8004abe:	d91c      	bls.n	8004afa <UART_SetConfig+0x1ee>
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	2380      	movs	r3, #128	@ 0x80
 8004ac4:	025b      	lsls	r3, r3, #9
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d217      	bcs.n	8004afa <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	200e      	movs	r0, #14
 8004ad0:	183b      	adds	r3, r7, r0
 8004ad2:	210f      	movs	r1, #15
 8004ad4:	438a      	bics	r2, r1
 8004ad6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2207      	movs	r2, #7
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	b299      	uxth	r1, r3
 8004ae4:	183b      	adds	r3, r7, r0
 8004ae6:	183a      	adds	r2, r7, r0
 8004ae8:	8812      	ldrh	r2, [r2, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	183a      	adds	r2, r7, r0
 8004af4:	8812      	ldrh	r2, [r2, #0]
 8004af6:	60da      	str	r2, [r3, #12]
 8004af8:	e060      	b.n	8004bbc <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004afa:	231e      	movs	r3, #30
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	e05b      	b.n	8004bbc <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b04:	231f      	movs	r3, #31
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d01f      	beq.n	8004b4e <UART_SetConfig+0x242>
 8004b0e:	dc22      	bgt.n	8004b56 <UART_SetConfig+0x24a>
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d017      	beq.n	8004b44 <UART_SetConfig+0x238>
 8004b14:	dc1f      	bgt.n	8004b56 <UART_SetConfig+0x24a>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <UART_SetConfig+0x214>
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d005      	beq.n	8004b2a <UART_SetConfig+0x21e>
 8004b1e:	e01a      	b.n	8004b56 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b20:	f7fe f8c4 	bl	8002cac <HAL_RCC_GetPCLK1Freq>
 8004b24:	0003      	movs	r3, r0
 8004b26:	61bb      	str	r3, [r7, #24]
        break;
 8004b28:	e01c      	b.n	8004b64 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004b2a:	4b33      	ldr	r3, [pc, #204]	@ (8004bf8 <UART_SetConfig+0x2ec>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	2207      	movs	r2, #7
 8004b32:	4013      	ands	r3, r2
 8004b34:	3301      	adds	r3, #1
 8004b36:	0019      	movs	r1, r3
 8004b38:	4831      	ldr	r0, [pc, #196]	@ (8004c00 <UART_SetConfig+0x2f4>)
 8004b3a:	f7fb fb01 	bl	8000140 <__udivsi3>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	61bb      	str	r3, [r7, #24]
        break;
 8004b42:	e00f      	b.n	8004b64 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b44:	f7fe f852 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	61bb      	str	r3, [r7, #24]
        break;
 8004b4c:	e00a      	b.n	8004b64 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	2380      	movs	r3, #128	@ 0x80
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	61bb      	str	r3, [r7, #24]
        break;
 8004b54:	e006      	b.n	8004b64 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b5a:	231e      	movs	r3, #30
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	2201      	movs	r2, #1
 8004b60:	701a      	strb	r2, [r3, #0]
        break;
 8004b62:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d028      	beq.n	8004bbc <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b6e:	4b25      	ldr	r3, [pc, #148]	@ (8004c04 <UART_SetConfig+0x2f8>)
 8004b70:	0052      	lsls	r2, r2, #1
 8004b72:	5ad3      	ldrh	r3, [r2, r3]
 8004b74:	0019      	movs	r1, r3
 8004b76:	69b8      	ldr	r0, [r7, #24]
 8004b78:	f7fb fae2 	bl	8000140 <__udivsi3>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	001a      	movs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	18d2      	adds	r2, r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	0010      	movs	r0, r2
 8004b90:	f7fb fad6 	bl	8000140 <__udivsi3>
 8004b94:	0003      	movs	r3, r0
 8004b96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b0f      	cmp	r3, #15
 8004b9c:	d90a      	bls.n	8004bb4 <UART_SetConfig+0x2a8>
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	2380      	movs	r3, #128	@ 0x80
 8004ba2:	025b      	lsls	r3, r3, #9
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d205      	bcs.n	8004bb4 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60da      	str	r2, [r3, #12]
 8004bb2:	e003      	b.n	8004bbc <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004bb4:	231e      	movs	r3, #30
 8004bb6:	18fb      	adds	r3, r7, r3
 8004bb8:	2201      	movs	r2, #1
 8004bba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	226a      	movs	r2, #106	@ 0x6a
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2268      	movs	r2, #104	@ 0x68
 8004bc8:	2101      	movs	r1, #1
 8004bca:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004bd8:	231e      	movs	r3, #30
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	781b      	ldrb	r3, [r3, #0]
}
 8004bde:	0018      	movs	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b008      	add	sp, #32
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	46c0      	nop			@ (mov r8, r8)
 8004be8:	cfff69f3 	.word	0xcfff69f3
 8004bec:	ffffcfff 	.word	0xffffcfff
 8004bf0:	11fff4ff 	.word	0x11fff4ff
 8004bf4:	40013800 	.word	0x40013800
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	40004400 	.word	0x40004400
 8004c00:	02dc6c00 	.word	0x02dc6c00
 8004c04:	08006c6c 	.word	0x08006c6c

08004c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	2208      	movs	r2, #8
 8004c16:	4013      	ands	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a4a      	ldr	r2, [pc, #296]	@ (8004d4c <UART_AdvFeatureConfig+0x144>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	0019      	movs	r1, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c36:	2201      	movs	r2, #1
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d00b      	beq.n	8004c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	4a43      	ldr	r2, [pc, #268]	@ (8004d50 <UART_AdvFeatureConfig+0x148>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	0019      	movs	r1, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	2202      	movs	r2, #2
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d00b      	beq.n	8004c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	4a3b      	ldr	r2, [pc, #236]	@ (8004d54 <UART_AdvFeatureConfig+0x14c>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	0019      	movs	r1, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d00b      	beq.n	8004c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	4a34      	ldr	r2, [pc, #208]	@ (8004d58 <UART_AdvFeatureConfig+0x150>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	0019      	movs	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a2c      	ldr	r2, [pc, #176]	@ (8004d5c <UART_AdvFeatureConfig+0x154>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	0019      	movs	r1, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	4a25      	ldr	r2, [pc, #148]	@ (8004d60 <UART_AdvFeatureConfig+0x158>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	0019      	movs	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	2240      	movs	r2, #64	@ 0x40
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d01d      	beq.n	8004d22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a1d      	ldr	r2, [pc, #116]	@ (8004d64 <UART_AdvFeatureConfig+0x15c>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d02:	2380      	movs	r3, #128	@ 0x80
 8004d04:	035b      	lsls	r3, r3, #13
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d10b      	bne.n	8004d22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a15      	ldr	r2, [pc, #84]	@ (8004d68 <UART_AdvFeatureConfig+0x160>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	0019      	movs	r1, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d26:	2280      	movs	r2, #128	@ 0x80
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d00b      	beq.n	8004d44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	4a0e      	ldr	r2, [pc, #56]	@ (8004d6c <UART_AdvFeatureConfig+0x164>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	0019      	movs	r1, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
  }
}
 8004d44:	46c0      	nop			@ (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b002      	add	sp, #8
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	ffff7fff 	.word	0xffff7fff
 8004d50:	fffdffff 	.word	0xfffdffff
 8004d54:	fffeffff 	.word	0xfffeffff
 8004d58:	fffbffff 	.word	0xfffbffff
 8004d5c:	ffffefff 	.word	0xffffefff
 8004d60:	ffffdfff 	.word	0xffffdfff
 8004d64:	ffefffff 	.word	0xffefffff
 8004d68:	ff9fffff 	.word	0xff9fffff
 8004d6c:	fff7ffff 	.word	0xfff7ffff

08004d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b092      	sub	sp, #72	@ 0x48
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2290      	movs	r2, #144	@ 0x90
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d80:	f7fc ffa2 	bl	8001cc8 <HAL_GetTick>
 8004d84:	0003      	movs	r3, r0
 8004d86:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2208      	movs	r2, #8
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d12d      	bne.n	8004df2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d98:	2280      	movs	r2, #128	@ 0x80
 8004d9a:	0391      	lsls	r1, r2, #14
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4a47      	ldr	r2, [pc, #284]	@ (8004ebc <UART_CheckIdleState+0x14c>)
 8004da0:	9200      	str	r2, [sp, #0]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f000 f88e 	bl	8004ec4 <UART_WaitOnFlagUntilTimeout>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d022      	beq.n	8004df2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004dac:	f3ef 8310 	mrs	r3, PRIMASK
 8004db0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004db4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004db6:	2301      	movs	r3, #1
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	f383 8810 	msr	PRIMASK, r3
}
 8004dc0:	46c0      	nop			@ (mov r8, r8)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2180      	movs	r1, #128	@ 0x80
 8004dce:	438a      	bics	r2, r1
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd8:	f383 8810 	msr	PRIMASK, r3
}
 8004ddc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2288      	movs	r2, #136	@ 0x88
 8004de2:	2120      	movs	r1, #32
 8004de4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2284      	movs	r2, #132	@ 0x84
 8004dea:	2100      	movs	r1, #0
 8004dec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e060      	b.n	8004eb4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d146      	bne.n	8004e8e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e02:	2280      	movs	r2, #128	@ 0x80
 8004e04:	03d1      	lsls	r1, r2, #15
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4a2c      	ldr	r2, [pc, #176]	@ (8004ebc <UART_CheckIdleState+0x14c>)
 8004e0a:	9200      	str	r2, [sp, #0]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f000 f859 	bl	8004ec4 <UART_WaitOnFlagUntilTimeout>
 8004e12:	1e03      	subs	r3, r0, #0
 8004e14:	d03b      	beq.n	8004e8e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e16:	f3ef 8310 	mrs	r3, PRIMASK
 8004e1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e20:	2301      	movs	r3, #1
 8004e22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f383 8810 	msr	PRIMASK, r3
}
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4922      	ldr	r1, [pc, #136]	@ (8004ec0 <UART_CheckIdleState+0x150>)
 8004e38:	400a      	ands	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f383 8810 	msr	PRIMASK, r3
}
 8004e46:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e48:	f3ef 8310 	mrs	r3, PRIMASK
 8004e4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e52:	2301      	movs	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f383 8810 	msr	PRIMASK, r3
}
 8004e5c:	46c0      	nop			@ (mov r8, r8)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2101      	movs	r1, #1
 8004e6a:	438a      	bics	r2, r1
 8004e6c:	609a      	str	r2, [r3, #8]
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	f383 8810 	msr	PRIMASK, r3
}
 8004e78:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	228c      	movs	r2, #140	@ 0x8c
 8004e7e:	2120      	movs	r1, #32
 8004e80:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2284      	movs	r2, #132	@ 0x84
 8004e86:	2100      	movs	r1, #0
 8004e88:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e012      	b.n	8004eb4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2288      	movs	r2, #136	@ 0x88
 8004e92:	2120      	movs	r1, #32
 8004e94:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	228c      	movs	r2, #140	@ 0x8c
 8004e9a:	2120      	movs	r1, #32
 8004e9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2284      	movs	r2, #132	@ 0x84
 8004eae:	2100      	movs	r1, #0
 8004eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b010      	add	sp, #64	@ 0x40
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	01ffffff 	.word	0x01ffffff
 8004ec0:	fffffedf 	.word	0xfffffedf

08004ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	1dfb      	adds	r3, r7, #7
 8004ed2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed4:	e051      	b.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	d04e      	beq.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004edc:	f7fc fef4 	bl	8001cc8 <HAL_GetTick>
 8004ee0:	0002      	movs	r2, r0
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d302      	bcc.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e051      	b.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2204      	movs	r2, #4
 8004efe:	4013      	ands	r3, r2
 8004f00:	d03b      	beq.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b80      	cmp	r3, #128	@ 0x80
 8004f06:	d038      	beq.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b40      	cmp	r3, #64	@ 0x40
 8004f0c:	d035      	beq.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	2208      	movs	r2, #8
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d111      	bne.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2208      	movs	r2, #8
 8004f22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	0018      	movs	r0, r3
 8004f28:	f000 f960 	bl	80051ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2290      	movs	r2, #144	@ 0x90
 8004f30:	2108      	movs	r1, #8
 8004f32:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2284      	movs	r2, #132	@ 0x84
 8004f38:	2100      	movs	r1, #0
 8004f3a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e02c      	b.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69da      	ldr	r2, [r3, #28]
 8004f46:	2380      	movs	r3, #128	@ 0x80
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	401a      	ands	r2, r3
 8004f4c:	2380      	movs	r3, #128	@ 0x80
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d112      	bne.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2280      	movs	r2, #128	@ 0x80
 8004f5a:	0112      	lsls	r2, r2, #4
 8004f5c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	0018      	movs	r0, r3
 8004f62:	f000 f943 	bl	80051ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2290      	movs	r2, #144	@ 0x90
 8004f6a:	2120      	movs	r1, #32
 8004f6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2284      	movs	r2, #132	@ 0x84
 8004f72:	2100      	movs	r1, #0
 8004f74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e00f      	b.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	4013      	ands	r3, r2
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	425a      	negs	r2, r3
 8004f8a:	4153      	adcs	r3, r2
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	001a      	movs	r2, r3
 8004f90:	1dfb      	adds	r3, r7, #7
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d09e      	beq.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	b004      	add	sp, #16
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b098      	sub	sp, #96	@ 0x60
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	1dbb      	adds	r3, r7, #6
 8004fb0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	1dba      	adds	r2, r7, #6
 8004fbc:	215c      	movs	r1, #92	@ 0x5c
 8004fbe:	8812      	ldrh	r2, [r2, #0]
 8004fc0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1dba      	adds	r2, r7, #6
 8004fc6:	215e      	movs	r1, #94	@ 0x5e
 8004fc8:	8812      	ldrh	r2, [r2, #0]
 8004fca:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	2380      	movs	r3, #128	@ 0x80
 8004fd8:	015b      	lsls	r3, r3, #5
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d10d      	bne.n	8004ffa <UART_Start_Receive_IT+0x56>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d104      	bne.n	8004ff0 <UART_Start_Receive_IT+0x4c>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2260      	movs	r2, #96	@ 0x60
 8004fea:	497b      	ldr	r1, [pc, #492]	@ (80051d8 <UART_Start_Receive_IT+0x234>)
 8004fec:	5299      	strh	r1, [r3, r2]
 8004fee:	e02e      	b.n	800504e <UART_Start_Receive_IT+0xaa>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2260      	movs	r2, #96	@ 0x60
 8004ff4:	21ff      	movs	r1, #255	@ 0xff
 8004ff6:	5299      	strh	r1, [r3, r2]
 8004ff8:	e029      	b.n	800504e <UART_Start_Receive_IT+0xaa>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10d      	bne.n	800501e <UART_Start_Receive_IT+0x7a>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d104      	bne.n	8005014 <UART_Start_Receive_IT+0x70>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2260      	movs	r2, #96	@ 0x60
 800500e:	21ff      	movs	r1, #255	@ 0xff
 8005010:	5299      	strh	r1, [r3, r2]
 8005012:	e01c      	b.n	800504e <UART_Start_Receive_IT+0xaa>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2260      	movs	r2, #96	@ 0x60
 8005018:	217f      	movs	r1, #127	@ 0x7f
 800501a:	5299      	strh	r1, [r3, r2]
 800501c:	e017      	b.n	800504e <UART_Start_Receive_IT+0xaa>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	2380      	movs	r3, #128	@ 0x80
 8005024:	055b      	lsls	r3, r3, #21
 8005026:	429a      	cmp	r2, r3
 8005028:	d10d      	bne.n	8005046 <UART_Start_Receive_IT+0xa2>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d104      	bne.n	800503c <UART_Start_Receive_IT+0x98>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2260      	movs	r2, #96	@ 0x60
 8005036:	217f      	movs	r1, #127	@ 0x7f
 8005038:	5299      	strh	r1, [r3, r2]
 800503a:	e008      	b.n	800504e <UART_Start_Receive_IT+0xaa>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2260      	movs	r2, #96	@ 0x60
 8005040:	213f      	movs	r1, #63	@ 0x3f
 8005042:	5299      	strh	r1, [r3, r2]
 8005044:	e003      	b.n	800504e <UART_Start_Receive_IT+0xaa>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2260      	movs	r2, #96	@ 0x60
 800504a:	2100      	movs	r1, #0
 800504c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2290      	movs	r2, #144	@ 0x90
 8005052:	2100      	movs	r1, #0
 8005054:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	228c      	movs	r2, #140	@ 0x8c
 800505a:	2122      	movs	r1, #34	@ 0x22
 800505c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800505e:	f3ef 8310 	mrs	r3, PRIMASK
 8005062:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8005064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005066:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005068:	2301      	movs	r3, #1
 800506a:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800506e:	f383 8810 	msr	PRIMASK, r3
}
 8005072:	46c0      	nop			@ (mov r8, r8)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2101      	movs	r1, #1
 8005080:	430a      	orrs	r2, r1
 8005082:	609a      	str	r2, [r3, #8]
 8005084:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005086:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800508a:	f383 8810 	msr	PRIMASK, r3
}
 800508e:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005094:	2380      	movs	r3, #128	@ 0x80
 8005096:	059b      	lsls	r3, r3, #22
 8005098:	429a      	cmp	r2, r3
 800509a:	d150      	bne.n	800513e <UART_Start_Receive_IT+0x19a>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2268      	movs	r2, #104	@ 0x68
 80050a0:	5a9b      	ldrh	r3, [r3, r2]
 80050a2:	1dba      	adds	r2, r7, #6
 80050a4:	8812      	ldrh	r2, [r2, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d349      	bcc.n	800513e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	2380      	movs	r3, #128	@ 0x80
 80050b0:	015b      	lsls	r3, r3, #5
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d107      	bne.n	80050c6 <UART_Start_Receive_IT+0x122>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4a46      	ldr	r2, [pc, #280]	@ (80051dc <UART_Start_Receive_IT+0x238>)
 80050c2:	675a      	str	r2, [r3, #116]	@ 0x74
 80050c4:	e002      	b.n	80050cc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a45      	ldr	r2, [pc, #276]	@ (80051e0 <UART_Start_Receive_IT+0x23c>)
 80050ca:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d019      	beq.n	8005108 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050d4:	f3ef 8310 	mrs	r3, PRIMASK
 80050d8:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80050da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050de:	2301      	movs	r3, #1
 80050e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e4:	f383 8810 	msr	PRIMASK, r3
}
 80050e8:	46c0      	nop			@ (mov r8, r8)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2180      	movs	r1, #128	@ 0x80
 80050f6:	0049      	lsls	r1, r1, #1
 80050f8:	430a      	orrs	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005102:	f383 8810 	msr	PRIMASK, r3
}
 8005106:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005108:	f3ef 8310 	mrs	r3, PRIMASK
 800510c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005110:	657b      	str	r3, [r7, #84]	@ 0x54
 8005112:	2301      	movs	r3, #1
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005118:	f383 8810 	msr	PRIMASK, r3
}
 800511c:	46c0      	nop			@ (mov r8, r8)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2180      	movs	r1, #128	@ 0x80
 800512a:	0549      	lsls	r1, r1, #21
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005132:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	46c0      	nop			@ (mov r8, r8)
 800513c:	e047      	b.n	80051ce <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	2380      	movs	r3, #128	@ 0x80
 8005144:	015b      	lsls	r3, r3, #5
 8005146:	429a      	cmp	r2, r3
 8005148:	d107      	bne.n	800515a <UART_Start_Receive_IT+0x1b6>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d103      	bne.n	800515a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4a23      	ldr	r2, [pc, #140]	@ (80051e4 <UART_Start_Receive_IT+0x240>)
 8005156:	675a      	str	r2, [r3, #116]	@ 0x74
 8005158:	e002      	b.n	8005160 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4a22      	ldr	r2, [pc, #136]	@ (80051e8 <UART_Start_Receive_IT+0x244>)
 800515e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d019      	beq.n	800519c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005168:	f3ef 8310 	mrs	r3, PRIMASK
 800516c:	61fb      	str	r3, [r7, #28]
  return(result);
 800516e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005170:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005172:	2301      	movs	r3, #1
 8005174:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	f383 8810 	msr	PRIMASK, r3
}
 800517c:	46c0      	nop			@ (mov r8, r8)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2190      	movs	r1, #144	@ 0x90
 800518a:	0049      	lsls	r1, r1, #1
 800518c:	430a      	orrs	r2, r1
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005192:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	f383 8810 	msr	PRIMASK, r3
}
 800519a:	e018      	b.n	80051ce <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800519c:	f3ef 8310 	mrs	r3, PRIMASK
 80051a0:	613b      	str	r3, [r7, #16]
  return(result);
 80051a2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80051a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80051a6:	2301      	movs	r3, #1
 80051a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f383 8810 	msr	PRIMASK, r3
}
 80051b0:	46c0      	nop			@ (mov r8, r8)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2120      	movs	r1, #32
 80051be:	430a      	orrs	r2, r1
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f383 8810 	msr	PRIMASK, r3
}
 80051cc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	0018      	movs	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b018      	add	sp, #96	@ 0x60
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	000001ff 	.word	0x000001ff
 80051dc:	080059dd 	.word	0x080059dd
 80051e0:	080056a9 	.word	0x080056a9
 80051e4:	080054f1 	.word	0x080054f1
 80051e8:	08005339 	.word	0x08005339

080051ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08e      	sub	sp, #56	@ 0x38
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051f4:	f3ef 8310 	mrs	r3, PRIMASK
 80051f8:	617b      	str	r3, [r7, #20]
  return(result);
 80051fa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fe:	2301      	movs	r3, #1
 8005200:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f383 8810 	msr	PRIMASK, r3
}
 8005208:	46c0      	nop			@ (mov r8, r8)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4926      	ldr	r1, [pc, #152]	@ (80052b0 <UART_EndRxTransfer+0xc4>)
 8005216:	400a      	ands	r2, r1
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f383 8810 	msr	PRIMASK, r3
}
 8005224:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005226:	f3ef 8310 	mrs	r3, PRIMASK
 800522a:	623b      	str	r3, [r7, #32]
  return(result);
 800522c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800522e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005230:	2301      	movs	r3, #1
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	f383 8810 	msr	PRIMASK, r3
}
 800523a:	46c0      	nop			@ (mov r8, r8)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	491b      	ldr	r1, [pc, #108]	@ (80052b4 <UART_EndRxTransfer+0xc8>)
 8005248:	400a      	ands	r2, r1
 800524a:	609a      	str	r2, [r3, #8]
 800524c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005252:	f383 8810 	msr	PRIMASK, r3
}
 8005256:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800525c:	2b01      	cmp	r3, #1
 800525e:	d118      	bne.n	8005292 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005260:	f3ef 8310 	mrs	r3, PRIMASK
 8005264:	60bb      	str	r3, [r7, #8]
  return(result);
 8005266:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800526a:	2301      	movs	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f383 8810 	msr	PRIMASK, r3
}
 8005274:	46c0      	nop			@ (mov r8, r8)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2110      	movs	r1, #16
 8005282:	438a      	bics	r2, r1
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005288:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f383 8810 	msr	PRIMASK, r3
}
 8005290:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	228c      	movs	r2, #140	@ 0x8c
 8005296:	2120      	movs	r1, #32
 8005298:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80052a6:	46c0      	nop			@ (mov r8, r8)
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b00e      	add	sp, #56	@ 0x38
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			@ (mov r8, r8)
 80052b0:	fffffedf 	.word	0xfffffedf
 80052b4:	effffffe 	.word	0xeffffffe

080052b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	225e      	movs	r2, #94	@ 0x5e
 80052ca:	2100      	movs	r1, #0
 80052cc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f7ff fb07 	bl	80048e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052d6:	46c0      	nop			@ (mov r8, r8)
 80052d8:	46bd      	mov	sp, r7
 80052da:	b004      	add	sp, #16
 80052dc:	bd80      	pop	{r7, pc}

080052de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b086      	sub	sp, #24
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052e6:	f3ef 8310 	mrs	r3, PRIMASK
 80052ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80052ec:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	2301      	movs	r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f383 8810 	msr	PRIMASK, r3
}
 80052fa:	46c0      	nop			@ (mov r8, r8)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2140      	movs	r1, #64	@ 0x40
 8005308:	438a      	bics	r2, r1
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f383 8810 	msr	PRIMASK, r3
}
 8005316:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2288      	movs	r2, #136	@ 0x88
 800531c:	2120      	movs	r1, #32
 800531e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	0018      	movs	r0, r3
 800532a:	f7ff fad3 	bl	80048d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	46bd      	mov	sp, r7
 8005332:	b006      	add	sp, #24
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b094      	sub	sp, #80	@ 0x50
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005340:	204e      	movs	r0, #78	@ 0x4e
 8005342:	183b      	adds	r3, r7, r0
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	2160      	movs	r1, #96	@ 0x60
 8005348:	5a52      	ldrh	r2, [r2, r1]
 800534a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	228c      	movs	r2, #140	@ 0x8c
 8005350:	589b      	ldr	r3, [r3, r2]
 8005352:	2b22      	cmp	r3, #34	@ 0x22
 8005354:	d000      	beq.n	8005358 <UART_RxISR_8BIT+0x20>
 8005356:	e0ba      	b.n	80054ce <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800535e:	214c      	movs	r1, #76	@ 0x4c
 8005360:	187b      	adds	r3, r7, r1
 8005362:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005364:	187b      	adds	r3, r7, r1
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	b2da      	uxtb	r2, r3
 800536a:	183b      	adds	r3, r7, r0
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b2d9      	uxtb	r1, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005374:	400a      	ands	r2, r1
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	225e      	movs	r2, #94	@ 0x5e
 8005388:	5a9b      	ldrh	r3, [r3, r2]
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b299      	uxth	r1, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	225e      	movs	r2, #94	@ 0x5e
 8005394:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	225e      	movs	r2, #94	@ 0x5e
 800539a:	5a9b      	ldrh	r3, [r3, r2]
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d000      	beq.n	80053a4 <UART_RxISR_8BIT+0x6c>
 80053a2:	e09c      	b.n	80054de <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80053a4:	f3ef 8310 	mrs	r3, PRIMASK
 80053a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ae:	2301      	movs	r3, #1
 80053b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b4:	f383 8810 	msr	PRIMASK, r3
}
 80053b8:	46c0      	nop			@ (mov r8, r8)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4948      	ldr	r1, [pc, #288]	@ (80054e8 <UART_RxISR_8BIT+0x1b0>)
 80053c6:	400a      	ands	r2, r1
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d0:	f383 8810 	msr	PRIMASK, r3
}
 80053d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80053d6:	f3ef 8310 	mrs	r3, PRIMASK
 80053da:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80053dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053de:	647b      	str	r3, [r7, #68]	@ 0x44
 80053e0:	2301      	movs	r3, #1
 80053e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e6:	f383 8810 	msr	PRIMASK, r3
}
 80053ea:	46c0      	nop			@ (mov r8, r8)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2101      	movs	r1, #1
 80053f8:	438a      	bics	r2, r1
 80053fa:	609a      	str	r2, [r3, #8]
 80053fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005402:	f383 8810 	msr	PRIMASK, r3
}
 8005406:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	228c      	movs	r2, #140	@ 0x8c
 800540c:	2120      	movs	r1, #32
 800540e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	2380      	movs	r3, #128	@ 0x80
 8005424:	041b      	lsls	r3, r3, #16
 8005426:	4013      	ands	r3, r2
 8005428:	d018      	beq.n	800545c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800542a:	f3ef 8310 	mrs	r3, PRIMASK
 800542e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005430:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005432:	643b      	str	r3, [r7, #64]	@ 0x40
 8005434:	2301      	movs	r3, #1
 8005436:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f383 8810 	msr	PRIMASK, r3
}
 800543e:	46c0      	nop			@ (mov r8, r8)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4928      	ldr	r1, [pc, #160]	@ (80054ec <UART_RxISR_8BIT+0x1b4>)
 800544c:	400a      	ands	r2, r1
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005452:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	f383 8810 	msr	PRIMASK, r3
}
 800545a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d12f      	bne.n	80054c4 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800546a:	f3ef 8310 	mrs	r3, PRIMASK
 800546e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005470:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005474:	2301      	movs	r3, #1
 8005476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f383 8810 	msr	PRIMASK, r3
}
 800547e:	46c0      	nop			@ (mov r8, r8)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2110      	movs	r1, #16
 800548c:	438a      	bics	r2, r1
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005492:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f383 8810 	msr	PRIMASK, r3
}
 800549a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	2210      	movs	r2, #16
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d103      	bne.n	80054b2 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2210      	movs	r2, #16
 80054b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	225c      	movs	r2, #92	@ 0x5c
 80054b6:	5a9a      	ldrh	r2, [r3, r2]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	0011      	movs	r1, r2
 80054bc:	0018      	movs	r0, r3
 80054be:	f7ff fa19 	bl	80048f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054c2:	e00c      	b.n	80054de <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	0018      	movs	r0, r3
 80054c8:	f7fc f914 	bl	80016f4 <HAL_UART_RxCpltCallback>
}
 80054cc:	e007      	b.n	80054de <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699a      	ldr	r2, [r3, #24]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2108      	movs	r1, #8
 80054da:	430a      	orrs	r2, r1
 80054dc:	619a      	str	r2, [r3, #24]
}
 80054de:	46c0      	nop			@ (mov r8, r8)
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b014      	add	sp, #80	@ 0x50
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	46c0      	nop			@ (mov r8, r8)
 80054e8:	fffffedf 	.word	0xfffffedf
 80054ec:	fbffffff 	.word	0xfbffffff

080054f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b094      	sub	sp, #80	@ 0x50
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80054f8:	204e      	movs	r0, #78	@ 0x4e
 80054fa:	183b      	adds	r3, r7, r0
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	2160      	movs	r1, #96	@ 0x60
 8005500:	5a52      	ldrh	r2, [r2, r1]
 8005502:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	228c      	movs	r2, #140	@ 0x8c
 8005508:	589b      	ldr	r3, [r3, r2]
 800550a:	2b22      	cmp	r3, #34	@ 0x22
 800550c:	d000      	beq.n	8005510 <UART_RxISR_16BIT+0x20>
 800550e:	e0ba      	b.n	8005686 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005516:	214c      	movs	r1, #76	@ 0x4c
 8005518:	187b      	adds	r3, r7, r1
 800551a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005520:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005522:	187b      	adds	r3, r7, r1
 8005524:	183a      	adds	r2, r7, r0
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	8812      	ldrh	r2, [r2, #0]
 800552a:	4013      	ands	r3, r2
 800552c:	b29a      	uxth	r2, r3
 800552e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005530:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005536:	1c9a      	adds	r2, r3, #2
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	225e      	movs	r2, #94	@ 0x5e
 8005540:	5a9b      	ldrh	r3, [r3, r2]
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b299      	uxth	r1, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	225e      	movs	r2, #94	@ 0x5e
 800554c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	225e      	movs	r2, #94	@ 0x5e
 8005552:	5a9b      	ldrh	r3, [r3, r2]
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d000      	beq.n	800555c <UART_RxISR_16BIT+0x6c>
 800555a:	e09c      	b.n	8005696 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800555c:	f3ef 8310 	mrs	r3, PRIMASK
 8005560:	623b      	str	r3, [r7, #32]
  return(result);
 8005562:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005564:	647b      	str	r3, [r7, #68]	@ 0x44
 8005566:	2301      	movs	r3, #1
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	f383 8810 	msr	PRIMASK, r3
}
 8005570:	46c0      	nop			@ (mov r8, r8)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4948      	ldr	r1, [pc, #288]	@ (80056a0 <UART_RxISR_16BIT+0x1b0>)
 800557e:	400a      	ands	r2, r1
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005584:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005588:	f383 8810 	msr	PRIMASK, r3
}
 800558c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800558e:	f3ef 8310 	mrs	r3, PRIMASK
 8005592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005596:	643b      	str	r3, [r7, #64]	@ 0x40
 8005598:	2301      	movs	r3, #1
 800559a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559e:	f383 8810 	msr	PRIMASK, r3
}
 80055a2:	46c0      	nop			@ (mov r8, r8)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2101      	movs	r1, #1
 80055b0:	438a      	bics	r2, r1
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ba:	f383 8810 	msr	PRIMASK, r3
}
 80055be:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	228c      	movs	r2, #140	@ 0x8c
 80055c4:	2120      	movs	r1, #32
 80055c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	2380      	movs	r3, #128	@ 0x80
 80055dc:	041b      	lsls	r3, r3, #16
 80055de:	4013      	ands	r3, r2
 80055e0:	d018      	beq.n	8005614 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055e2:	f3ef 8310 	mrs	r3, PRIMASK
 80055e6:	617b      	str	r3, [r7, #20]
  return(result);
 80055e8:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055ec:	2301      	movs	r3, #1
 80055ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f383 8810 	msr	PRIMASK, r3
}
 80055f6:	46c0      	nop			@ (mov r8, r8)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4928      	ldr	r1, [pc, #160]	@ (80056a4 <UART_RxISR_16BIT+0x1b4>)
 8005604:	400a      	ands	r2, r1
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800560a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f383 8810 	msr	PRIMASK, r3
}
 8005612:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d12f      	bne.n	800567c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005622:	f3ef 8310 	mrs	r3, PRIMASK
 8005626:	60bb      	str	r3, [r7, #8]
  return(result);
 8005628:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800562c:	2301      	movs	r3, #1
 800562e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f383 8810 	msr	PRIMASK, r3
}
 8005636:	46c0      	nop			@ (mov r8, r8)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2110      	movs	r1, #16
 8005644:	438a      	bics	r2, r1
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f383 8810 	msr	PRIMASK, r3
}
 8005652:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	2210      	movs	r2, #16
 800565c:	4013      	ands	r3, r2
 800565e:	2b10      	cmp	r3, #16
 8005660:	d103      	bne.n	800566a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2210      	movs	r2, #16
 8005668:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	225c      	movs	r2, #92	@ 0x5c
 800566e:	5a9a      	ldrh	r2, [r3, r2]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	0011      	movs	r1, r2
 8005674:	0018      	movs	r0, r3
 8005676:	f7ff f93d 	bl	80048f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800567a:	e00c      	b.n	8005696 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	0018      	movs	r0, r3
 8005680:	f7fc f838 	bl	80016f4 <HAL_UART_RxCpltCallback>
}
 8005684:	e007      	b.n	8005696 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2108      	movs	r1, #8
 8005692:	430a      	orrs	r2, r1
 8005694:	619a      	str	r2, [r3, #24]
}
 8005696:	46c0      	nop			@ (mov r8, r8)
 8005698:	46bd      	mov	sp, r7
 800569a:	b014      	add	sp, #80	@ 0x50
 800569c:	bd80      	pop	{r7, pc}
 800569e:	46c0      	nop			@ (mov r8, r8)
 80056a0:	fffffedf 	.word	0xfffffedf
 80056a4:	fbffffff 	.word	0xfbffffff

080056a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b0a0      	sub	sp, #128	@ 0x80
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80056b0:	237a      	movs	r3, #122	@ 0x7a
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	2160      	movs	r1, #96	@ 0x60
 80056b8:	5a52      	ldrh	r2, [r2, r1]
 80056ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	228c      	movs	r2, #140	@ 0x8c
 80056d8:	589b      	ldr	r3, [r3, r2]
 80056da:	2b22      	cmp	r3, #34	@ 0x22
 80056dc:	d000      	beq.n	80056e0 <UART_RxISR_8BIT_FIFOEN+0x38>
 80056de:	e166      	b.n	80059ae <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80056e0:	236e      	movs	r3, #110	@ 0x6e
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	2168      	movs	r1, #104	@ 0x68
 80056e8:	5a52      	ldrh	r2, [r2, r1]
 80056ea:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056ec:	e10d      	b.n	800590a <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056f4:	216c      	movs	r1, #108	@ 0x6c
 80056f6:	187b      	adds	r3, r7, r1
 80056f8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056fa:	187b      	adds	r3, r7, r1
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	237a      	movs	r3, #122	@ 0x7a
 8005702:	18fb      	adds	r3, r7, r3
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b2d9      	uxtb	r1, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570c:	400a      	ands	r2, r1
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	225e      	movs	r2, #94	@ 0x5e
 8005720:	5a9b      	ldrh	r3, [r3, r2]
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b299      	uxth	r1, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	225e      	movs	r2, #94	@ 0x5e
 800572c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005736:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005738:	2207      	movs	r2, #7
 800573a:	4013      	ands	r3, r2
 800573c:	d049      	beq.n	80057d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800573e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005740:	2201      	movs	r2, #1
 8005742:	4013      	ands	r3, r2
 8005744:	d010      	beq.n	8005768 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005746:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005748:	2380      	movs	r3, #128	@ 0x80
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	4013      	ands	r3, r2
 800574e:	d00b      	beq.n	8005768 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2201      	movs	r2, #1
 8005756:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2290      	movs	r2, #144	@ 0x90
 800575c:	589b      	ldr	r3, [r3, r2]
 800575e:	2201      	movs	r2, #1
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2190      	movs	r1, #144	@ 0x90
 8005766:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005768:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800576a:	2202      	movs	r2, #2
 800576c:	4013      	ands	r3, r2
 800576e:	d00f      	beq.n	8005790 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005770:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005772:	2201      	movs	r2, #1
 8005774:	4013      	ands	r3, r2
 8005776:	d00b      	beq.n	8005790 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2202      	movs	r2, #2
 800577e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2290      	movs	r2, #144	@ 0x90
 8005784:	589b      	ldr	r3, [r3, r2]
 8005786:	2204      	movs	r2, #4
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2190      	movs	r1, #144	@ 0x90
 800578e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005790:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005792:	2204      	movs	r2, #4
 8005794:	4013      	ands	r3, r2
 8005796:	d00f      	beq.n	80057b8 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005798:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800579a:	2201      	movs	r2, #1
 800579c:	4013      	ands	r3, r2
 800579e:	d00b      	beq.n	80057b8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2204      	movs	r2, #4
 80057a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2290      	movs	r2, #144	@ 0x90
 80057ac:	589b      	ldr	r3, [r3, r2]
 80057ae:	2202      	movs	r2, #2
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2190      	movs	r1, #144	@ 0x90
 80057b6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2290      	movs	r2, #144	@ 0x90
 80057bc:	589b      	ldr	r3, [r3, r2]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	0018      	movs	r0, r3
 80057c6:	f7ff f88d 	bl	80048e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2290      	movs	r2, #144	@ 0x90
 80057ce:	2100      	movs	r1, #0
 80057d0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	225e      	movs	r2, #94	@ 0x5e
 80057d6:	5a9b      	ldrh	r3, [r3, r2]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d000      	beq.n	80057e0 <UART_RxISR_8BIT_FIFOEN+0x138>
 80057de:	e094      	b.n	800590a <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057e0:	f3ef 8310 	mrs	r3, PRIMASK
 80057e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80057e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057ea:	2301      	movs	r3, #1
 80057ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f0:	f383 8810 	msr	PRIMASK, r3
}
 80057f4:	46c0      	nop			@ (mov r8, r8)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4971      	ldr	r1, [pc, #452]	@ (80059c8 <UART_RxISR_8BIT_FIFOEN+0x320>)
 8005802:	400a      	ands	r2, r1
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005808:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800580c:	f383 8810 	msr	PRIMASK, r3
}
 8005810:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005812:	f3ef 8310 	mrs	r3, PRIMASK
 8005816:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800581a:	667b      	str	r3, [r7, #100]	@ 0x64
 800581c:	2301      	movs	r3, #1
 800581e:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005822:	f383 8810 	msr	PRIMASK, r3
}
 8005826:	46c0      	nop			@ (mov r8, r8)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4966      	ldr	r1, [pc, #408]	@ (80059cc <UART_RxISR_8BIT_FIFOEN+0x324>)
 8005834:	400a      	ands	r2, r1
 8005836:	609a      	str	r2, [r3, #8]
 8005838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800583a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800583e:	f383 8810 	msr	PRIMASK, r3
}
 8005842:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	228c      	movs	r2, #140	@ 0x8c
 8005848:	2120      	movs	r1, #32
 800584a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	2380      	movs	r3, #128	@ 0x80
 8005860:	041b      	lsls	r3, r3, #16
 8005862:	4013      	ands	r3, r2
 8005864:	d018      	beq.n	8005898 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005866:	f3ef 8310 	mrs	r3, PRIMASK
 800586a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800586e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005870:	2301      	movs	r3, #1
 8005872:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005876:	f383 8810 	msr	PRIMASK, r3
}
 800587a:	46c0      	nop			@ (mov r8, r8)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4952      	ldr	r1, [pc, #328]	@ (80059d0 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005888:	400a      	ands	r2, r1
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800588e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005892:	f383 8810 	msr	PRIMASK, r3
}
 8005896:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d12f      	bne.n	8005900 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80058a6:	f3ef 8310 	mrs	r3, PRIMASK
 80058aa:	623b      	str	r3, [r7, #32]
  return(result);
 80058ac:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058b0:	2301      	movs	r3, #1
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	f383 8810 	msr	PRIMASK, r3
}
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2110      	movs	r1, #16
 80058c8:	438a      	bics	r2, r1
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d2:	f383 8810 	msr	PRIMASK, r3
}
 80058d6:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	2210      	movs	r2, #16
 80058e0:	4013      	ands	r3, r2
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d103      	bne.n	80058ee <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2210      	movs	r2, #16
 80058ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	225c      	movs	r2, #92	@ 0x5c
 80058f2:	5a9a      	ldrh	r2, [r3, r2]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	0011      	movs	r1, r2
 80058f8:	0018      	movs	r0, r3
 80058fa:	f7fe fffb 	bl	80048f4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80058fe:	e00e      	b.n	800591e <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	0018      	movs	r0, r3
 8005904:	f7fb fef6 	bl	80016f4 <HAL_UART_RxCpltCallback>
        break;
 8005908:	e009      	b.n	800591e <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800590a:	236e      	movs	r3, #110	@ 0x6e
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d004      	beq.n	800591e <UART_RxISR_8BIT_FIFOEN+0x276>
 8005914:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005916:	2220      	movs	r2, #32
 8005918:	4013      	ands	r3, r2
 800591a:	d000      	beq.n	800591e <UART_RxISR_8BIT_FIFOEN+0x276>
 800591c:	e6e7      	b.n	80056ee <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800591e:	205a      	movs	r0, #90	@ 0x5a
 8005920:	183b      	adds	r3, r7, r0
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	215e      	movs	r1, #94	@ 0x5e
 8005926:	5a52      	ldrh	r2, [r2, r1]
 8005928:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800592a:	0001      	movs	r1, r0
 800592c:	187b      	adds	r3, r7, r1
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d044      	beq.n	80059be <UART_RxISR_8BIT_FIFOEN+0x316>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2268      	movs	r2, #104	@ 0x68
 8005938:	5a9b      	ldrh	r3, [r3, r2]
 800593a:	187a      	adds	r2, r7, r1
 800593c:	8812      	ldrh	r2, [r2, #0]
 800593e:	429a      	cmp	r2, r3
 8005940:	d23d      	bcs.n	80059be <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005942:	f3ef 8310 	mrs	r3, PRIMASK
 8005946:	60bb      	str	r3, [r7, #8]
  return(result);
 8005948:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800594a:	657b      	str	r3, [r7, #84]	@ 0x54
 800594c:	2301      	movs	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f383 8810 	msr	PRIMASK, r3
}
 8005956:	46c0      	nop			@ (mov r8, r8)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	491c      	ldr	r1, [pc, #112]	@ (80059d4 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005964:	400a      	ands	r2, r1
 8005966:	609a      	str	r2, [r3, #8]
 8005968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800596a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f383 8810 	msr	PRIMASK, r3
}
 8005972:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a18      	ldr	r2, [pc, #96]	@ (80059d8 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8005978:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800597a:	f3ef 8310 	mrs	r3, PRIMASK
 800597e:	617b      	str	r3, [r7, #20]
  return(result);
 8005980:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005982:	653b      	str	r3, [r7, #80]	@ 0x50
 8005984:	2301      	movs	r3, #1
 8005986:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f383 8810 	msr	PRIMASK, r3
}
 800598e:	46c0      	nop			@ (mov r8, r8)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2120      	movs	r1, #32
 800599c:	430a      	orrs	r2, r1
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f383 8810 	msr	PRIMASK, r3
}
 80059aa:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059ac:	e007      	b.n	80059be <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699a      	ldr	r2, [r3, #24]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2108      	movs	r1, #8
 80059ba:	430a      	orrs	r2, r1
 80059bc:	619a      	str	r2, [r3, #24]
}
 80059be:	46c0      	nop			@ (mov r8, r8)
 80059c0:	46bd      	mov	sp, r7
 80059c2:	b020      	add	sp, #128	@ 0x80
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	46c0      	nop			@ (mov r8, r8)
 80059c8:	fffffeff 	.word	0xfffffeff
 80059cc:	effffffe 	.word	0xeffffffe
 80059d0:	fbffffff 	.word	0xfbffffff
 80059d4:	efffffff 	.word	0xefffffff
 80059d8:	08005339 	.word	0x08005339

080059dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b0a2      	sub	sp, #136	@ 0x88
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80059e4:	2382      	movs	r3, #130	@ 0x82
 80059e6:	18fb      	adds	r3, r7, r3
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	2160      	movs	r1, #96	@ 0x60
 80059ec:	5a52      	ldrh	r2, [r2, r1]
 80059ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	2284      	movs	r2, #132	@ 0x84
 80059f8:	18ba      	adds	r2, r7, r2
 80059fa:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	228c      	movs	r2, #140	@ 0x8c
 8005a10:	589b      	ldr	r3, [r3, r2]
 8005a12:	2b22      	cmp	r3, #34	@ 0x22
 8005a14:	d000      	beq.n	8005a18 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005a16:	e170      	b.n	8005cfa <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a18:	2376      	movs	r3, #118	@ 0x76
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	2168      	movs	r1, #104	@ 0x68
 8005a20:	5a52      	ldrh	r2, [r2, r1]
 8005a22:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a24:	e115      	b.n	8005c52 <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a2c:	2174      	movs	r1, #116	@ 0x74
 8005a2e:	187b      	adds	r3, r7, r1
 8005a30:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a36:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005a38:	187b      	adds	r3, r7, r1
 8005a3a:	2282      	movs	r2, #130	@ 0x82
 8005a3c:	18ba      	adds	r2, r7, r2
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	8812      	ldrh	r2, [r2, #0]
 8005a42:	4013      	ands	r3, r2
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4e:	1c9a      	adds	r2, r3, #2
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	225e      	movs	r2, #94	@ 0x5e
 8005a58:	5a9b      	ldrh	r3, [r3, r2]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b299      	uxth	r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	225e      	movs	r2, #94	@ 0x5e
 8005a64:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	2184      	movs	r1, #132	@ 0x84
 8005a6e:	187a      	adds	r2, r7, r1
 8005a70:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005a72:	187b      	adds	r3, r7, r1
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2207      	movs	r2, #7
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d04e      	beq.n	8005b1a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a7c:	187b      	adds	r3, r7, r1
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2201      	movs	r2, #1
 8005a82:	4013      	ands	r3, r2
 8005a84:	d010      	beq.n	8005aa8 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005a86:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005a88:	2380      	movs	r3, #128	@ 0x80
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d00b      	beq.n	8005aa8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2201      	movs	r2, #1
 8005a96:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2290      	movs	r2, #144	@ 0x90
 8005a9c:	589b      	ldr	r3, [r3, r2]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2190      	movs	r1, #144	@ 0x90
 8005aa6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aa8:	2384      	movs	r3, #132	@ 0x84
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	d00f      	beq.n	8005ad4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	4013      	ands	r3, r2
 8005aba:	d00b      	beq.n	8005ad4 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2290      	movs	r2, #144	@ 0x90
 8005ac8:	589b      	ldr	r3, [r3, r2]
 8005aca:	2204      	movs	r2, #4
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2190      	movs	r1, #144	@ 0x90
 8005ad2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad4:	2384      	movs	r3, #132	@ 0x84
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2204      	movs	r2, #4
 8005adc:	4013      	ands	r3, r2
 8005ade:	d00f      	beq.n	8005b00 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005ae0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d00b      	beq.n	8005b00 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2204      	movs	r2, #4
 8005aee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2290      	movs	r2, #144	@ 0x90
 8005af4:	589b      	ldr	r3, [r3, r2]
 8005af6:	2202      	movs	r2, #2
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2190      	movs	r1, #144	@ 0x90
 8005afe:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2290      	movs	r2, #144	@ 0x90
 8005b04:	589b      	ldr	r3, [r3, r2]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d007      	beq.n	8005b1a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f7fe fee9 	bl	80048e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2290      	movs	r2, #144	@ 0x90
 8005b16:	2100      	movs	r1, #0
 8005b18:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	225e      	movs	r2, #94	@ 0x5e
 8005b1e:	5a9b      	ldrh	r3, [r3, r2]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d000      	beq.n	8005b28 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005b26:	e094      	b.n	8005c52 <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b28:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b32:	2301      	movs	r3, #1
 8005b34:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b38:	f383 8810 	msr	PRIMASK, r3
}
 8005b3c:	46c0      	nop			@ (mov r8, r8)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4972      	ldr	r1, [pc, #456]	@ (8005d14 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8005b4a:	400a      	ands	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b50:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b54:	f383 8810 	msr	PRIMASK, r3
}
 8005b58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b64:	2301      	movs	r3, #1
 8005b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b6a:	f383 8810 	msr	PRIMASK, r3
}
 8005b6e:	46c0      	nop			@ (mov r8, r8)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4967      	ldr	r1, [pc, #412]	@ (8005d18 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8005b7c:	400a      	ands	r2, r1
 8005b7e:	609a      	str	r2, [r3, #8]
 8005b80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b82:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b86:	f383 8810 	msr	PRIMASK, r3
}
 8005b8a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	228c      	movs	r2, #140	@ 0x8c
 8005b90:	2120      	movs	r1, #32
 8005b92:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	2380      	movs	r3, #128	@ 0x80
 8005ba8:	041b      	lsls	r3, r3, #16
 8005baa:	4013      	ands	r3, r2
 8005bac:	d018      	beq.n	8005be0 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005bae:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bb8:	2301      	movs	r3, #1
 8005bba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bbe:	f383 8810 	msr	PRIMASK, r3
}
 8005bc2:	46c0      	nop			@ (mov r8, r8)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4953      	ldr	r1, [pc, #332]	@ (8005d1c <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005bd0:	400a      	ands	r2, r1
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bda:	f383 8810 	msr	PRIMASK, r3
}
 8005bde:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d12f      	bne.n	8005c48 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005bee:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfe:	f383 8810 	msr	PRIMASK, r3
}
 8005c02:	46c0      	nop			@ (mov r8, r8)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2110      	movs	r1, #16
 8005c10:	438a      	bics	r2, r1
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1a:	f383 8810 	msr	PRIMASK, r3
}
 8005c1e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	2210      	movs	r2, #16
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b10      	cmp	r3, #16
 8005c2c:	d103      	bne.n	8005c36 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2210      	movs	r2, #16
 8005c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	225c      	movs	r2, #92	@ 0x5c
 8005c3a:	5a9a      	ldrh	r2, [r3, r2]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	0011      	movs	r1, r2
 8005c40:	0018      	movs	r0, r3
 8005c42:	f7fe fe57 	bl	80048f4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005c46:	e010      	b.n	8005c6a <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f7fb fd52 	bl	80016f4 <HAL_UART_RxCpltCallback>
        break;
 8005c50:	e00b      	b.n	8005c6a <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c52:	2376      	movs	r3, #118	@ 0x76
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d006      	beq.n	8005c6a <UART_RxISR_16BIT_FIFOEN+0x28e>
 8005c5c:	2384      	movs	r3, #132	@ 0x84
 8005c5e:	18fb      	adds	r3, r7, r3
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2220      	movs	r2, #32
 8005c64:	4013      	ands	r3, r2
 8005c66:	d000      	beq.n	8005c6a <UART_RxISR_16BIT_FIFOEN+0x28e>
 8005c68:	e6dd      	b.n	8005a26 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c6a:	205e      	movs	r0, #94	@ 0x5e
 8005c6c:	183b      	adds	r3, r7, r0
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	215e      	movs	r1, #94	@ 0x5e
 8005c72:	5a52      	ldrh	r2, [r2, r1]
 8005c74:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c76:	0001      	movs	r1, r0
 8005c78:	187b      	adds	r3, r7, r1
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d044      	beq.n	8005d0a <UART_RxISR_16BIT_FIFOEN+0x32e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2268      	movs	r2, #104	@ 0x68
 8005c84:	5a9b      	ldrh	r3, [r3, r2]
 8005c86:	187a      	adds	r2, r7, r1
 8005c88:	8812      	ldrh	r2, [r2, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d23d      	bcs.n	8005d0a <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c92:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c94:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c98:	2301      	movs	r3, #1
 8005c9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f383 8810 	msr	PRIMASK, r3
}
 8005ca2:	46c0      	nop			@ (mov r8, r8)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	491c      	ldr	r1, [pc, #112]	@ (8005d20 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005cb0:	400a      	ands	r2, r1
 8005cb2:	609a      	str	r2, [r3, #8]
 8005cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f383 8810 	msr	PRIMASK, r3
}
 8005cbe:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a18      	ldr	r2, [pc, #96]	@ (8005d24 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8005cc4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cca:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ccc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005cce:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f383 8810 	msr	PRIMASK, r3
}
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2120      	movs	r1, #32
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	f383 8810 	msr	PRIMASK, r3
}
 8005cf6:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cf8:	e007      	b.n	8005d0a <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	699a      	ldr	r2, [r3, #24]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2108      	movs	r1, #8
 8005d06:	430a      	orrs	r2, r1
 8005d08:	619a      	str	r2, [r3, #24]
}
 8005d0a:	46c0      	nop			@ (mov r8, r8)
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	b022      	add	sp, #136	@ 0x88
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	46c0      	nop			@ (mov r8, r8)
 8005d14:	fffffeff 	.word	0xfffffeff
 8005d18:	effffffe 	.word	0xeffffffe
 8005d1c:	fbffffff 	.word	0xfbffffff
 8005d20:	efffffff 	.word	0xefffffff
 8005d24:	080054f1 	.word	0x080054f1

08005d28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d30:	46c0      	nop			@ (mov r8, r8)
 8005d32:	46bd      	mov	sp, r7
 8005d34:	b002      	add	sp, #8
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005d40:	46c0      	nop			@ (mov r8, r8)
 8005d42:	46bd      	mov	sp, r7
 8005d44:	b002      	add	sp, #8
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005d50:	46c0      	nop			@ (mov r8, r8)
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b002      	add	sp, #8
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2284      	movs	r2, #132	@ 0x84
 8005d64:	5c9b      	ldrb	r3, [r3, r2]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_UARTEx_DisableFifoMode+0x16>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e027      	b.n	8005dbe <HAL_UARTEx_DisableFifoMode+0x66>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2284      	movs	r2, #132	@ 0x84
 8005d72:	2101      	movs	r1, #1
 8005d74:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2288      	movs	r2, #136	@ 0x88
 8005d7a:	2124      	movs	r1, #36	@ 0x24
 8005d7c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2101      	movs	r1, #1
 8005d92:	438a      	bics	r2, r1
 8005d94:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4a0b      	ldr	r2, [pc, #44]	@ (8005dc8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2288      	movs	r2, #136	@ 0x88
 8005db0:	2120      	movs	r1, #32
 8005db2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2284      	movs	r2, #132	@ 0x84
 8005db8:	2100      	movs	r1, #0
 8005dba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b004      	add	sp, #16
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			@ (mov r8, r8)
 8005dc8:	dfffffff 	.word	0xdfffffff

08005dcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2284      	movs	r2, #132	@ 0x84
 8005dda:	5c9b      	ldrb	r3, [r3, r2]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e02e      	b.n	8005e42 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2284      	movs	r2, #132	@ 0x84
 8005de8:	2101      	movs	r1, #1
 8005dea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2288      	movs	r2, #136	@ 0x88
 8005df0:	2124      	movs	r1, #36	@ 0x24
 8005df2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2101      	movs	r1, #1
 8005e08:	438a      	bics	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	08d9      	lsrs	r1, r3, #3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	0018      	movs	r0, r3
 8005e24:	f000 f854 	bl	8005ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2288      	movs	r2, #136	@ 0x88
 8005e34:	2120      	movs	r1, #32
 8005e36:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2284      	movs	r2, #132	@ 0x84
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	0018      	movs	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	b004      	add	sp, #16
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2284      	movs	r2, #132	@ 0x84
 8005e5a:	5c9b      	ldrb	r3, [r3, r2]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e02f      	b.n	8005ec4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2284      	movs	r2, #132	@ 0x84
 8005e68:	2101      	movs	r1, #1
 8005e6a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2288      	movs	r2, #136	@ 0x88
 8005e70:	2124      	movs	r1, #36	@ 0x24
 8005e72:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2101      	movs	r1, #1
 8005e88:	438a      	bics	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	4a0e      	ldr	r2, [pc, #56]	@ (8005ecc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	0019      	movs	r1, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f000 f813 	bl	8005ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2288      	movs	r2, #136	@ 0x88
 8005eb6:	2120      	movs	r1, #32
 8005eb8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2284      	movs	r2, #132	@ 0x84
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b004      	add	sp, #16
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	f1ffffff 	.word	0xf1ffffff

08005ed0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d108      	bne.n	8005ef2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	226a      	movs	r2, #106	@ 0x6a
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2268      	movs	r2, #104	@ 0x68
 8005eec:	2101      	movs	r1, #1
 8005eee:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ef0:	e043      	b.n	8005f7a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ef2:	260f      	movs	r6, #15
 8005ef4:	19bb      	adds	r3, r7, r6
 8005ef6:	2208      	movs	r2, #8
 8005ef8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005efa:	200e      	movs	r0, #14
 8005efc:	183b      	adds	r3, r7, r0
 8005efe:	2208      	movs	r2, #8
 8005f00:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	0e5b      	lsrs	r3, r3, #25
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	240d      	movs	r4, #13
 8005f0e:	193b      	adds	r3, r7, r4
 8005f10:	2107      	movs	r1, #7
 8005f12:	400a      	ands	r2, r1
 8005f14:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	0f5b      	lsrs	r3, r3, #29
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	250c      	movs	r5, #12
 8005f22:	197b      	adds	r3, r7, r5
 8005f24:	2107      	movs	r1, #7
 8005f26:	400a      	ands	r2, r1
 8005f28:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f2a:	183b      	adds	r3, r7, r0
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	197a      	adds	r2, r7, r5
 8005f30:	7812      	ldrb	r2, [r2, #0]
 8005f32:	4914      	ldr	r1, [pc, #80]	@ (8005f84 <UARTEx_SetNbDataToProcess+0xb4>)
 8005f34:	5c8a      	ldrb	r2, [r1, r2]
 8005f36:	435a      	muls	r2, r3
 8005f38:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f3a:	197b      	adds	r3, r7, r5
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	4a12      	ldr	r2, [pc, #72]	@ (8005f88 <UARTEx_SetNbDataToProcess+0xb8>)
 8005f40:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f42:	0019      	movs	r1, r3
 8005f44:	f7fa f986 	bl	8000254 <__divsi3>
 8005f48:	0003      	movs	r3, r0
 8005f4a:	b299      	uxth	r1, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	226a      	movs	r2, #106	@ 0x6a
 8005f50:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f52:	19bb      	adds	r3, r7, r6
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	193a      	adds	r2, r7, r4
 8005f58:	7812      	ldrb	r2, [r2, #0]
 8005f5a:	490a      	ldr	r1, [pc, #40]	@ (8005f84 <UARTEx_SetNbDataToProcess+0xb4>)
 8005f5c:	5c8a      	ldrb	r2, [r1, r2]
 8005f5e:	435a      	muls	r2, r3
 8005f60:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f62:	193b      	adds	r3, r7, r4
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	4a08      	ldr	r2, [pc, #32]	@ (8005f88 <UARTEx_SetNbDataToProcess+0xb8>)
 8005f68:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f6a:	0019      	movs	r1, r3
 8005f6c:	f7fa f972 	bl	8000254 <__divsi3>
 8005f70:	0003      	movs	r3, r0
 8005f72:	b299      	uxth	r1, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2268      	movs	r2, #104	@ 0x68
 8005f78:	5299      	strh	r1, [r3, r2]
}
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	b005      	add	sp, #20
 8005f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f82:	46c0      	nop			@ (mov r8, r8)
 8005f84:	08006c84 	.word	0x08006c84
 8005f88:	08006c8c 	.word	0x08006c8c

08005f8c <atoi>:
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	220a      	movs	r2, #10
 8005f90:	2100      	movs	r1, #0
 8005f92:	f000 f88b 	bl	80060ac <strtol>
 8005f96:	bd10      	pop	{r4, pc}

08005f98 <_strtol_l.isra.0>:
 8005f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	0017      	movs	r7, r2
 8005f9e:	001e      	movs	r6, r3
 8005fa0:	9003      	str	r0, [sp, #12]
 8005fa2:	9101      	str	r1, [sp, #4]
 8005fa4:	2b24      	cmp	r3, #36	@ 0x24
 8005fa6:	d823      	bhi.n	8005ff0 <_strtol_l.isra.0+0x58>
 8005fa8:	000c      	movs	r4, r1
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d020      	beq.n	8005ff0 <_strtol_l.isra.0+0x58>
 8005fae:	4b3d      	ldr	r3, [pc, #244]	@ (80060a4 <_strtol_l.isra.0+0x10c>)
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	469c      	mov	ip, r3
 8005fb4:	0023      	movs	r3, r4
 8005fb6:	4661      	mov	r1, ip
 8005fb8:	781d      	ldrb	r5, [r3, #0]
 8005fba:	3401      	adds	r4, #1
 8005fbc:	5d48      	ldrb	r0, [r1, r5]
 8005fbe:	0001      	movs	r1, r0
 8005fc0:	4011      	ands	r1, r2
 8005fc2:	4210      	tst	r0, r2
 8005fc4:	d1f6      	bne.n	8005fb4 <_strtol_l.isra.0+0x1c>
 8005fc6:	2d2d      	cmp	r5, #45	@ 0x2d
 8005fc8:	d119      	bne.n	8005ffe <_strtol_l.isra.0+0x66>
 8005fca:	7825      	ldrb	r5, [r4, #0]
 8005fcc:	1c9c      	adds	r4, r3, #2
 8005fce:	2301      	movs	r3, #1
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	0033      	movs	r3, r6
 8005fd6:	4393      	bics	r3, r2
 8005fd8:	d11d      	bne.n	8006016 <_strtol_l.isra.0+0x7e>
 8005fda:	2d30      	cmp	r5, #48	@ 0x30
 8005fdc:	d115      	bne.n	800600a <_strtol_l.isra.0+0x72>
 8005fde:	2120      	movs	r1, #32
 8005fe0:	7823      	ldrb	r3, [r4, #0]
 8005fe2:	438b      	bics	r3, r1
 8005fe4:	2b58      	cmp	r3, #88	@ 0x58
 8005fe6:	d110      	bne.n	800600a <_strtol_l.isra.0+0x72>
 8005fe8:	7865      	ldrb	r5, [r4, #1]
 8005fea:	3402      	adds	r4, #2
 8005fec:	2610      	movs	r6, #16
 8005fee:	e012      	b.n	8006016 <_strtol_l.isra.0+0x7e>
 8005ff0:	f000 f8da 	bl	80061a8 <__errno>
 8005ff4:	2316      	movs	r3, #22
 8005ff6:	6003      	str	r3, [r0, #0]
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	b005      	add	sp, #20
 8005ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ffe:	9100      	str	r1, [sp, #0]
 8006000:	2d2b      	cmp	r5, #43	@ 0x2b
 8006002:	d1e6      	bne.n	8005fd2 <_strtol_l.isra.0+0x3a>
 8006004:	7825      	ldrb	r5, [r4, #0]
 8006006:	1c9c      	adds	r4, r3, #2
 8006008:	e7e3      	b.n	8005fd2 <_strtol_l.isra.0+0x3a>
 800600a:	2e00      	cmp	r6, #0
 800600c:	d1ee      	bne.n	8005fec <_strtol_l.isra.0+0x54>
 800600e:	360a      	adds	r6, #10
 8006010:	2d30      	cmp	r5, #48	@ 0x30
 8006012:	d100      	bne.n	8006016 <_strtol_l.isra.0+0x7e>
 8006014:	3e02      	subs	r6, #2
 8006016:	4a24      	ldr	r2, [pc, #144]	@ (80060a8 <_strtol_l.isra.0+0x110>)
 8006018:	9b00      	ldr	r3, [sp, #0]
 800601a:	4694      	mov	ip, r2
 800601c:	4463      	add	r3, ip
 800601e:	0031      	movs	r1, r6
 8006020:	0018      	movs	r0, r3
 8006022:	9302      	str	r3, [sp, #8]
 8006024:	f7fa f912 	bl	800024c <__aeabi_uidivmod>
 8006028:	2200      	movs	r2, #0
 800602a:	4684      	mov	ip, r0
 800602c:	0010      	movs	r0, r2
 800602e:	002b      	movs	r3, r5
 8006030:	3b30      	subs	r3, #48	@ 0x30
 8006032:	2b09      	cmp	r3, #9
 8006034:	d811      	bhi.n	800605a <_strtol_l.isra.0+0xc2>
 8006036:	001d      	movs	r5, r3
 8006038:	42ae      	cmp	r6, r5
 800603a:	dd1d      	ble.n	8006078 <_strtol_l.isra.0+0xe0>
 800603c:	1c53      	adds	r3, r2, #1
 800603e:	d009      	beq.n	8006054 <_strtol_l.isra.0+0xbc>
 8006040:	2201      	movs	r2, #1
 8006042:	4252      	negs	r2, r2
 8006044:	4584      	cmp	ip, r0
 8006046:	d305      	bcc.n	8006054 <_strtol_l.isra.0+0xbc>
 8006048:	d101      	bne.n	800604e <_strtol_l.isra.0+0xb6>
 800604a:	42a9      	cmp	r1, r5
 800604c:	db11      	blt.n	8006072 <_strtol_l.isra.0+0xda>
 800604e:	2201      	movs	r2, #1
 8006050:	4370      	muls	r0, r6
 8006052:	1828      	adds	r0, r5, r0
 8006054:	7825      	ldrb	r5, [r4, #0]
 8006056:	3401      	adds	r4, #1
 8006058:	e7e9      	b.n	800602e <_strtol_l.isra.0+0x96>
 800605a:	002b      	movs	r3, r5
 800605c:	3b41      	subs	r3, #65	@ 0x41
 800605e:	2b19      	cmp	r3, #25
 8006060:	d801      	bhi.n	8006066 <_strtol_l.isra.0+0xce>
 8006062:	3d37      	subs	r5, #55	@ 0x37
 8006064:	e7e8      	b.n	8006038 <_strtol_l.isra.0+0xa0>
 8006066:	002b      	movs	r3, r5
 8006068:	3b61      	subs	r3, #97	@ 0x61
 800606a:	2b19      	cmp	r3, #25
 800606c:	d804      	bhi.n	8006078 <_strtol_l.isra.0+0xe0>
 800606e:	3d57      	subs	r5, #87	@ 0x57
 8006070:	e7e2      	b.n	8006038 <_strtol_l.isra.0+0xa0>
 8006072:	2201      	movs	r2, #1
 8006074:	4252      	negs	r2, r2
 8006076:	e7ed      	b.n	8006054 <_strtol_l.isra.0+0xbc>
 8006078:	1c53      	adds	r3, r2, #1
 800607a:	d108      	bne.n	800608e <_strtol_l.isra.0+0xf6>
 800607c:	2322      	movs	r3, #34	@ 0x22
 800607e:	9a03      	ldr	r2, [sp, #12]
 8006080:	9802      	ldr	r0, [sp, #8]
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	2f00      	cmp	r7, #0
 8006086:	d0b8      	beq.n	8005ffa <_strtol_l.isra.0+0x62>
 8006088:	1e63      	subs	r3, r4, #1
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	e007      	b.n	800609e <_strtol_l.isra.0+0x106>
 800608e:	9b00      	ldr	r3, [sp, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d000      	beq.n	8006096 <_strtol_l.isra.0+0xfe>
 8006094:	4240      	negs	r0, r0
 8006096:	2f00      	cmp	r7, #0
 8006098:	d0af      	beq.n	8005ffa <_strtol_l.isra.0+0x62>
 800609a:	2a00      	cmp	r2, #0
 800609c:	d1f4      	bne.n	8006088 <_strtol_l.isra.0+0xf0>
 800609e:	9b01      	ldr	r3, [sp, #4]
 80060a0:	603b      	str	r3, [r7, #0]
 80060a2:	e7aa      	b.n	8005ffa <_strtol_l.isra.0+0x62>
 80060a4:	08006c95 	.word	0x08006c95
 80060a8:	7fffffff 	.word	0x7fffffff

080060ac <strtol>:
 80060ac:	b510      	push	{r4, lr}
 80060ae:	4c04      	ldr	r4, [pc, #16]	@ (80060c0 <strtol+0x14>)
 80060b0:	0013      	movs	r3, r2
 80060b2:	000a      	movs	r2, r1
 80060b4:	0001      	movs	r1, r0
 80060b6:	6820      	ldr	r0, [r4, #0]
 80060b8:	f7ff ff6e 	bl	8005f98 <_strtol_l.isra.0>
 80060bc:	bd10      	pop	{r4, pc}
 80060be:	46c0      	nop			@ (mov r8, r8)
 80060c0:	20000010 	.word	0x20000010

080060c4 <sniprintf>:
 80060c4:	b40c      	push	{r2, r3}
 80060c6:	b530      	push	{r4, r5, lr}
 80060c8:	4b18      	ldr	r3, [pc, #96]	@ (800612c <sniprintf+0x68>)
 80060ca:	000c      	movs	r4, r1
 80060cc:	681d      	ldr	r5, [r3, #0]
 80060ce:	b09d      	sub	sp, #116	@ 0x74
 80060d0:	2900      	cmp	r1, #0
 80060d2:	da08      	bge.n	80060e6 <sniprintf+0x22>
 80060d4:	238b      	movs	r3, #139	@ 0x8b
 80060d6:	2001      	movs	r0, #1
 80060d8:	602b      	str	r3, [r5, #0]
 80060da:	4240      	negs	r0, r0
 80060dc:	b01d      	add	sp, #116	@ 0x74
 80060de:	bc30      	pop	{r4, r5}
 80060e0:	bc08      	pop	{r3}
 80060e2:	b002      	add	sp, #8
 80060e4:	4718      	bx	r3
 80060e6:	2382      	movs	r3, #130	@ 0x82
 80060e8:	466a      	mov	r2, sp
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	8293      	strh	r3, [r2, #20]
 80060ee:	2300      	movs	r3, #0
 80060f0:	9002      	str	r0, [sp, #8]
 80060f2:	931b      	str	r3, [sp, #108]	@ 0x6c
 80060f4:	9006      	str	r0, [sp, #24]
 80060f6:	4299      	cmp	r1, r3
 80060f8:	d000      	beq.n	80060fc <sniprintf+0x38>
 80060fa:	1e4b      	subs	r3, r1, #1
 80060fc:	9304      	str	r3, [sp, #16]
 80060fe:	9307      	str	r3, [sp, #28]
 8006100:	2301      	movs	r3, #1
 8006102:	466a      	mov	r2, sp
 8006104:	425b      	negs	r3, r3
 8006106:	82d3      	strh	r3, [r2, #22]
 8006108:	0028      	movs	r0, r5
 800610a:	ab21      	add	r3, sp, #132	@ 0x84
 800610c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800610e:	a902      	add	r1, sp, #8
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	f000 f9d1 	bl	80064b8 <_svfiprintf_r>
 8006116:	1c43      	adds	r3, r0, #1
 8006118:	da01      	bge.n	800611e <sniprintf+0x5a>
 800611a:	238b      	movs	r3, #139	@ 0x8b
 800611c:	602b      	str	r3, [r5, #0]
 800611e:	2c00      	cmp	r4, #0
 8006120:	d0dc      	beq.n	80060dc <sniprintf+0x18>
 8006122:	2200      	movs	r2, #0
 8006124:	9b02      	ldr	r3, [sp, #8]
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	e7d8      	b.n	80060dc <sniprintf+0x18>
 800612a:	46c0      	nop			@ (mov r8, r8)
 800612c:	20000010 	.word	0x20000010

08006130 <memset>:
 8006130:	0003      	movs	r3, r0
 8006132:	1882      	adds	r2, r0, r2
 8006134:	4293      	cmp	r3, r2
 8006136:	d100      	bne.n	800613a <memset+0xa>
 8006138:	4770      	bx	lr
 800613a:	7019      	strb	r1, [r3, #0]
 800613c:	3301      	adds	r3, #1
 800613e:	e7f9      	b.n	8006134 <memset+0x4>

08006140 <strchr>:
 8006140:	b2c9      	uxtb	r1, r1
 8006142:	7803      	ldrb	r3, [r0, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d004      	beq.n	8006152 <strchr+0x12>
 8006148:	428b      	cmp	r3, r1
 800614a:	d100      	bne.n	800614e <strchr+0xe>
 800614c:	4770      	bx	lr
 800614e:	3001      	adds	r0, #1
 8006150:	e7f7      	b.n	8006142 <strchr+0x2>
 8006152:	424b      	negs	r3, r1
 8006154:	4159      	adcs	r1, r3
 8006156:	4249      	negs	r1, r1
 8006158:	4008      	ands	r0, r1
 800615a:	e7f7      	b.n	800614c <strchr+0xc>

0800615c <strncmp>:
 800615c:	b530      	push	{r4, r5, lr}
 800615e:	0005      	movs	r5, r0
 8006160:	1e10      	subs	r0, r2, #0
 8006162:	d00b      	beq.n	800617c <strncmp+0x20>
 8006164:	2400      	movs	r4, #0
 8006166:	3a01      	subs	r2, #1
 8006168:	5d2b      	ldrb	r3, [r5, r4]
 800616a:	5d08      	ldrb	r0, [r1, r4]
 800616c:	4283      	cmp	r3, r0
 800616e:	d104      	bne.n	800617a <strncmp+0x1e>
 8006170:	4294      	cmp	r4, r2
 8006172:	d002      	beq.n	800617a <strncmp+0x1e>
 8006174:	3401      	adds	r4, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f6      	bne.n	8006168 <strncmp+0xc>
 800617a:	1a18      	subs	r0, r3, r0
 800617c:	bd30      	pop	{r4, r5, pc}

0800617e <strncpy>:
 800617e:	0003      	movs	r3, r0
 8006180:	b530      	push	{r4, r5, lr}
 8006182:	001d      	movs	r5, r3
 8006184:	2a00      	cmp	r2, #0
 8006186:	d006      	beq.n	8006196 <strncpy+0x18>
 8006188:	780c      	ldrb	r4, [r1, #0]
 800618a:	3a01      	subs	r2, #1
 800618c:	3301      	adds	r3, #1
 800618e:	702c      	strb	r4, [r5, #0]
 8006190:	3101      	adds	r1, #1
 8006192:	2c00      	cmp	r4, #0
 8006194:	d1f5      	bne.n	8006182 <strncpy+0x4>
 8006196:	2100      	movs	r1, #0
 8006198:	189a      	adds	r2, r3, r2
 800619a:	4293      	cmp	r3, r2
 800619c:	d100      	bne.n	80061a0 <strncpy+0x22>
 800619e:	bd30      	pop	{r4, r5, pc}
 80061a0:	7019      	strb	r1, [r3, #0]
 80061a2:	3301      	adds	r3, #1
 80061a4:	e7f9      	b.n	800619a <strncpy+0x1c>
	...

080061a8 <__errno>:
 80061a8:	4b01      	ldr	r3, [pc, #4]	@ (80061b0 <__errno+0x8>)
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	4770      	bx	lr
 80061ae:	46c0      	nop			@ (mov r8, r8)
 80061b0:	20000010 	.word	0x20000010

080061b4 <__libc_init_array>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	2600      	movs	r6, #0
 80061b8:	4c0c      	ldr	r4, [pc, #48]	@ (80061ec <__libc_init_array+0x38>)
 80061ba:	4d0d      	ldr	r5, [pc, #52]	@ (80061f0 <__libc_init_array+0x3c>)
 80061bc:	1b64      	subs	r4, r4, r5
 80061be:	10a4      	asrs	r4, r4, #2
 80061c0:	42a6      	cmp	r6, r4
 80061c2:	d109      	bne.n	80061d8 <__libc_init_array+0x24>
 80061c4:	2600      	movs	r6, #0
 80061c6:	f000 fc61 	bl	8006a8c <_init>
 80061ca:	4c0a      	ldr	r4, [pc, #40]	@ (80061f4 <__libc_init_array+0x40>)
 80061cc:	4d0a      	ldr	r5, [pc, #40]	@ (80061f8 <__libc_init_array+0x44>)
 80061ce:	1b64      	subs	r4, r4, r5
 80061d0:	10a4      	asrs	r4, r4, #2
 80061d2:	42a6      	cmp	r6, r4
 80061d4:	d105      	bne.n	80061e2 <__libc_init_array+0x2e>
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	00b3      	lsls	r3, r6, #2
 80061da:	58eb      	ldr	r3, [r5, r3]
 80061dc:	4798      	blx	r3
 80061de:	3601      	adds	r6, #1
 80061e0:	e7ee      	b.n	80061c0 <__libc_init_array+0xc>
 80061e2:	00b3      	lsls	r3, r6, #2
 80061e4:	58eb      	ldr	r3, [r5, r3]
 80061e6:	4798      	blx	r3
 80061e8:	3601      	adds	r6, #1
 80061ea:	e7f2      	b.n	80061d2 <__libc_init_array+0x1e>
 80061ec:	08006dc8 	.word	0x08006dc8
 80061f0:	08006dc8 	.word	0x08006dc8
 80061f4:	08006dcc 	.word	0x08006dcc
 80061f8:	08006dc8 	.word	0x08006dc8

080061fc <__retarget_lock_acquire_recursive>:
 80061fc:	4770      	bx	lr

080061fe <__retarget_lock_release_recursive>:
 80061fe:	4770      	bx	lr

08006200 <_free_r>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	0005      	movs	r5, r0
 8006204:	1e0c      	subs	r4, r1, #0
 8006206:	d010      	beq.n	800622a <_free_r+0x2a>
 8006208:	3c04      	subs	r4, #4
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	da00      	bge.n	8006212 <_free_r+0x12>
 8006210:	18e4      	adds	r4, r4, r3
 8006212:	0028      	movs	r0, r5
 8006214:	f000 f8e0 	bl	80063d8 <__malloc_lock>
 8006218:	4a1d      	ldr	r2, [pc, #116]	@ (8006290 <_free_r+0x90>)
 800621a:	6813      	ldr	r3, [r2, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d105      	bne.n	800622c <_free_r+0x2c>
 8006220:	6063      	str	r3, [r4, #4]
 8006222:	6014      	str	r4, [r2, #0]
 8006224:	0028      	movs	r0, r5
 8006226:	f000 f8df 	bl	80063e8 <__malloc_unlock>
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	42a3      	cmp	r3, r4
 800622e:	d908      	bls.n	8006242 <_free_r+0x42>
 8006230:	6820      	ldr	r0, [r4, #0]
 8006232:	1821      	adds	r1, r4, r0
 8006234:	428b      	cmp	r3, r1
 8006236:	d1f3      	bne.n	8006220 <_free_r+0x20>
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	1809      	adds	r1, r1, r0
 800623e:	6021      	str	r1, [r4, #0]
 8006240:	e7ee      	b.n	8006220 <_free_r+0x20>
 8006242:	001a      	movs	r2, r3
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <_free_r+0x4e>
 800624a:	42a3      	cmp	r3, r4
 800624c:	d9f9      	bls.n	8006242 <_free_r+0x42>
 800624e:	6811      	ldr	r1, [r2, #0]
 8006250:	1850      	adds	r0, r2, r1
 8006252:	42a0      	cmp	r0, r4
 8006254:	d10b      	bne.n	800626e <_free_r+0x6e>
 8006256:	6820      	ldr	r0, [r4, #0]
 8006258:	1809      	adds	r1, r1, r0
 800625a:	1850      	adds	r0, r2, r1
 800625c:	6011      	str	r1, [r2, #0]
 800625e:	4283      	cmp	r3, r0
 8006260:	d1e0      	bne.n	8006224 <_free_r+0x24>
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	1841      	adds	r1, r0, r1
 8006268:	6011      	str	r1, [r2, #0]
 800626a:	6053      	str	r3, [r2, #4]
 800626c:	e7da      	b.n	8006224 <_free_r+0x24>
 800626e:	42a0      	cmp	r0, r4
 8006270:	d902      	bls.n	8006278 <_free_r+0x78>
 8006272:	230c      	movs	r3, #12
 8006274:	602b      	str	r3, [r5, #0]
 8006276:	e7d5      	b.n	8006224 <_free_r+0x24>
 8006278:	6820      	ldr	r0, [r4, #0]
 800627a:	1821      	adds	r1, r4, r0
 800627c:	428b      	cmp	r3, r1
 800627e:	d103      	bne.n	8006288 <_free_r+0x88>
 8006280:	6819      	ldr	r1, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	1809      	adds	r1, r1, r0
 8006286:	6021      	str	r1, [r4, #0]
 8006288:	6063      	str	r3, [r4, #4]
 800628a:	6054      	str	r4, [r2, #4]
 800628c:	e7ca      	b.n	8006224 <_free_r+0x24>
 800628e:	46c0      	nop			@ (mov r8, r8)
 8006290:	200004c4 	.word	0x200004c4

08006294 <sbrk_aligned>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	4e0f      	ldr	r6, [pc, #60]	@ (80062d4 <sbrk_aligned+0x40>)
 8006298:	000d      	movs	r5, r1
 800629a:	6831      	ldr	r1, [r6, #0]
 800629c:	0004      	movs	r4, r0
 800629e:	2900      	cmp	r1, #0
 80062a0:	d102      	bne.n	80062a8 <sbrk_aligned+0x14>
 80062a2:	f000 fb95 	bl	80069d0 <_sbrk_r>
 80062a6:	6030      	str	r0, [r6, #0]
 80062a8:	0029      	movs	r1, r5
 80062aa:	0020      	movs	r0, r4
 80062ac:	f000 fb90 	bl	80069d0 <_sbrk_r>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d103      	bne.n	80062bc <sbrk_aligned+0x28>
 80062b4:	2501      	movs	r5, #1
 80062b6:	426d      	negs	r5, r5
 80062b8:	0028      	movs	r0, r5
 80062ba:	bd70      	pop	{r4, r5, r6, pc}
 80062bc:	2303      	movs	r3, #3
 80062be:	1cc5      	adds	r5, r0, #3
 80062c0:	439d      	bics	r5, r3
 80062c2:	42a8      	cmp	r0, r5
 80062c4:	d0f8      	beq.n	80062b8 <sbrk_aligned+0x24>
 80062c6:	1a29      	subs	r1, r5, r0
 80062c8:	0020      	movs	r0, r4
 80062ca:	f000 fb81 	bl	80069d0 <_sbrk_r>
 80062ce:	3001      	adds	r0, #1
 80062d0:	d1f2      	bne.n	80062b8 <sbrk_aligned+0x24>
 80062d2:	e7ef      	b.n	80062b4 <sbrk_aligned+0x20>
 80062d4:	200004c0 	.word	0x200004c0

080062d8 <_malloc_r>:
 80062d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062da:	2203      	movs	r2, #3
 80062dc:	1ccb      	adds	r3, r1, #3
 80062de:	4393      	bics	r3, r2
 80062e0:	3308      	adds	r3, #8
 80062e2:	0005      	movs	r5, r0
 80062e4:	001f      	movs	r7, r3
 80062e6:	2b0c      	cmp	r3, #12
 80062e8:	d234      	bcs.n	8006354 <_malloc_r+0x7c>
 80062ea:	270c      	movs	r7, #12
 80062ec:	42b9      	cmp	r1, r7
 80062ee:	d833      	bhi.n	8006358 <_malloc_r+0x80>
 80062f0:	0028      	movs	r0, r5
 80062f2:	f000 f871 	bl	80063d8 <__malloc_lock>
 80062f6:	4e37      	ldr	r6, [pc, #220]	@ (80063d4 <_malloc_r+0xfc>)
 80062f8:	6833      	ldr	r3, [r6, #0]
 80062fa:	001c      	movs	r4, r3
 80062fc:	2c00      	cmp	r4, #0
 80062fe:	d12f      	bne.n	8006360 <_malloc_r+0x88>
 8006300:	0039      	movs	r1, r7
 8006302:	0028      	movs	r0, r5
 8006304:	f7ff ffc6 	bl	8006294 <sbrk_aligned>
 8006308:	0004      	movs	r4, r0
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	d15f      	bne.n	80063ce <_malloc_r+0xf6>
 800630e:	6834      	ldr	r4, [r6, #0]
 8006310:	9400      	str	r4, [sp, #0]
 8006312:	9b00      	ldr	r3, [sp, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d14a      	bne.n	80063ae <_malloc_r+0xd6>
 8006318:	2c00      	cmp	r4, #0
 800631a:	d052      	beq.n	80063c2 <_malloc_r+0xea>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	0028      	movs	r0, r5
 8006320:	18e3      	adds	r3, r4, r3
 8006322:	9900      	ldr	r1, [sp, #0]
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	f000 fb53 	bl	80069d0 <_sbrk_r>
 800632a:	9b01      	ldr	r3, [sp, #4]
 800632c:	4283      	cmp	r3, r0
 800632e:	d148      	bne.n	80063c2 <_malloc_r+0xea>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	0028      	movs	r0, r5
 8006334:	1aff      	subs	r7, r7, r3
 8006336:	0039      	movs	r1, r7
 8006338:	f7ff ffac 	bl	8006294 <sbrk_aligned>
 800633c:	3001      	adds	r0, #1
 800633e:	d040      	beq.n	80063c2 <_malloc_r+0xea>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	19db      	adds	r3, r3, r7
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	6833      	ldr	r3, [r6, #0]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	2a00      	cmp	r2, #0
 800634c:	d133      	bne.n	80063b6 <_malloc_r+0xde>
 800634e:	9b00      	ldr	r3, [sp, #0]
 8006350:	6033      	str	r3, [r6, #0]
 8006352:	e019      	b.n	8006388 <_malloc_r+0xb0>
 8006354:	2b00      	cmp	r3, #0
 8006356:	dac9      	bge.n	80062ec <_malloc_r+0x14>
 8006358:	230c      	movs	r3, #12
 800635a:	602b      	str	r3, [r5, #0]
 800635c:	2000      	movs	r0, #0
 800635e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006360:	6821      	ldr	r1, [r4, #0]
 8006362:	1bc9      	subs	r1, r1, r7
 8006364:	d420      	bmi.n	80063a8 <_malloc_r+0xd0>
 8006366:	290b      	cmp	r1, #11
 8006368:	d90a      	bls.n	8006380 <_malloc_r+0xa8>
 800636a:	19e2      	adds	r2, r4, r7
 800636c:	6027      	str	r7, [r4, #0]
 800636e:	42a3      	cmp	r3, r4
 8006370:	d104      	bne.n	800637c <_malloc_r+0xa4>
 8006372:	6032      	str	r2, [r6, #0]
 8006374:	6863      	ldr	r3, [r4, #4]
 8006376:	6011      	str	r1, [r2, #0]
 8006378:	6053      	str	r3, [r2, #4]
 800637a:	e005      	b.n	8006388 <_malloc_r+0xb0>
 800637c:	605a      	str	r2, [r3, #4]
 800637e:	e7f9      	b.n	8006374 <_malloc_r+0x9c>
 8006380:	6862      	ldr	r2, [r4, #4]
 8006382:	42a3      	cmp	r3, r4
 8006384:	d10e      	bne.n	80063a4 <_malloc_r+0xcc>
 8006386:	6032      	str	r2, [r6, #0]
 8006388:	0028      	movs	r0, r5
 800638a:	f000 f82d 	bl	80063e8 <__malloc_unlock>
 800638e:	0020      	movs	r0, r4
 8006390:	2207      	movs	r2, #7
 8006392:	300b      	adds	r0, #11
 8006394:	1d23      	adds	r3, r4, #4
 8006396:	4390      	bics	r0, r2
 8006398:	1ac2      	subs	r2, r0, r3
 800639a:	4298      	cmp	r0, r3
 800639c:	d0df      	beq.n	800635e <_malloc_r+0x86>
 800639e:	1a1b      	subs	r3, r3, r0
 80063a0:	50a3      	str	r3, [r4, r2]
 80063a2:	e7dc      	b.n	800635e <_malloc_r+0x86>
 80063a4:	605a      	str	r2, [r3, #4]
 80063a6:	e7ef      	b.n	8006388 <_malloc_r+0xb0>
 80063a8:	0023      	movs	r3, r4
 80063aa:	6864      	ldr	r4, [r4, #4]
 80063ac:	e7a6      	b.n	80062fc <_malloc_r+0x24>
 80063ae:	9c00      	ldr	r4, [sp, #0]
 80063b0:	6863      	ldr	r3, [r4, #4]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	e7ad      	b.n	8006312 <_malloc_r+0x3a>
 80063b6:	001a      	movs	r2, r3
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	42a3      	cmp	r3, r4
 80063bc:	d1fb      	bne.n	80063b6 <_malloc_r+0xde>
 80063be:	2300      	movs	r3, #0
 80063c0:	e7da      	b.n	8006378 <_malloc_r+0xa0>
 80063c2:	230c      	movs	r3, #12
 80063c4:	0028      	movs	r0, r5
 80063c6:	602b      	str	r3, [r5, #0]
 80063c8:	f000 f80e 	bl	80063e8 <__malloc_unlock>
 80063cc:	e7c6      	b.n	800635c <_malloc_r+0x84>
 80063ce:	6007      	str	r7, [r0, #0]
 80063d0:	e7da      	b.n	8006388 <_malloc_r+0xb0>
 80063d2:	46c0      	nop			@ (mov r8, r8)
 80063d4:	200004c4 	.word	0x200004c4

080063d8 <__malloc_lock>:
 80063d8:	b510      	push	{r4, lr}
 80063da:	4802      	ldr	r0, [pc, #8]	@ (80063e4 <__malloc_lock+0xc>)
 80063dc:	f7ff ff0e 	bl	80061fc <__retarget_lock_acquire_recursive>
 80063e0:	bd10      	pop	{r4, pc}
 80063e2:	46c0      	nop			@ (mov r8, r8)
 80063e4:	200004bc 	.word	0x200004bc

080063e8 <__malloc_unlock>:
 80063e8:	b510      	push	{r4, lr}
 80063ea:	4802      	ldr	r0, [pc, #8]	@ (80063f4 <__malloc_unlock+0xc>)
 80063ec:	f7ff ff07 	bl	80061fe <__retarget_lock_release_recursive>
 80063f0:	bd10      	pop	{r4, pc}
 80063f2:	46c0      	nop			@ (mov r8, r8)
 80063f4:	200004bc 	.word	0x200004bc

080063f8 <__ssputs_r>:
 80063f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063fa:	688e      	ldr	r6, [r1, #8]
 80063fc:	b085      	sub	sp, #20
 80063fe:	001f      	movs	r7, r3
 8006400:	000c      	movs	r4, r1
 8006402:	680b      	ldr	r3, [r1, #0]
 8006404:	9002      	str	r0, [sp, #8]
 8006406:	9203      	str	r2, [sp, #12]
 8006408:	42be      	cmp	r6, r7
 800640a:	d830      	bhi.n	800646e <__ssputs_r+0x76>
 800640c:	210c      	movs	r1, #12
 800640e:	5e62      	ldrsh	r2, [r4, r1]
 8006410:	2190      	movs	r1, #144	@ 0x90
 8006412:	00c9      	lsls	r1, r1, #3
 8006414:	420a      	tst	r2, r1
 8006416:	d028      	beq.n	800646a <__ssputs_r+0x72>
 8006418:	2003      	movs	r0, #3
 800641a:	6921      	ldr	r1, [r4, #16]
 800641c:	1a5b      	subs	r3, r3, r1
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	6963      	ldr	r3, [r4, #20]
 8006422:	4343      	muls	r3, r0
 8006424:	9801      	ldr	r0, [sp, #4]
 8006426:	0fdd      	lsrs	r5, r3, #31
 8006428:	18ed      	adds	r5, r5, r3
 800642a:	1c7b      	adds	r3, r7, #1
 800642c:	181b      	adds	r3, r3, r0
 800642e:	106d      	asrs	r5, r5, #1
 8006430:	42ab      	cmp	r3, r5
 8006432:	d900      	bls.n	8006436 <__ssputs_r+0x3e>
 8006434:	001d      	movs	r5, r3
 8006436:	0552      	lsls	r2, r2, #21
 8006438:	d528      	bpl.n	800648c <__ssputs_r+0x94>
 800643a:	0029      	movs	r1, r5
 800643c:	9802      	ldr	r0, [sp, #8]
 800643e:	f7ff ff4b 	bl	80062d8 <_malloc_r>
 8006442:	1e06      	subs	r6, r0, #0
 8006444:	d02c      	beq.n	80064a0 <__ssputs_r+0xa8>
 8006446:	9a01      	ldr	r2, [sp, #4]
 8006448:	6921      	ldr	r1, [r4, #16]
 800644a:	f000 fade 	bl	8006a0a <memcpy>
 800644e:	89a2      	ldrh	r2, [r4, #12]
 8006450:	4b18      	ldr	r3, [pc, #96]	@ (80064b4 <__ssputs_r+0xbc>)
 8006452:	401a      	ands	r2, r3
 8006454:	2380      	movs	r3, #128	@ 0x80
 8006456:	4313      	orrs	r3, r2
 8006458:	81a3      	strh	r3, [r4, #12]
 800645a:	9b01      	ldr	r3, [sp, #4]
 800645c:	6126      	str	r6, [r4, #16]
 800645e:	18f6      	adds	r6, r6, r3
 8006460:	6026      	str	r6, [r4, #0]
 8006462:	003e      	movs	r6, r7
 8006464:	6165      	str	r5, [r4, #20]
 8006466:	1aed      	subs	r5, r5, r3
 8006468:	60a5      	str	r5, [r4, #8]
 800646a:	42be      	cmp	r6, r7
 800646c:	d900      	bls.n	8006470 <__ssputs_r+0x78>
 800646e:	003e      	movs	r6, r7
 8006470:	0032      	movs	r2, r6
 8006472:	9903      	ldr	r1, [sp, #12]
 8006474:	6820      	ldr	r0, [r4, #0]
 8006476:	f000 fa99 	bl	80069ac <memmove>
 800647a:	2000      	movs	r0, #0
 800647c:	68a3      	ldr	r3, [r4, #8]
 800647e:	1b9b      	subs	r3, r3, r6
 8006480:	60a3      	str	r3, [r4, #8]
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	199b      	adds	r3, r3, r6
 8006486:	6023      	str	r3, [r4, #0]
 8006488:	b005      	add	sp, #20
 800648a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648c:	002a      	movs	r2, r5
 800648e:	9802      	ldr	r0, [sp, #8]
 8006490:	f000 fac4 	bl	8006a1c <_realloc_r>
 8006494:	1e06      	subs	r6, r0, #0
 8006496:	d1e0      	bne.n	800645a <__ssputs_r+0x62>
 8006498:	6921      	ldr	r1, [r4, #16]
 800649a:	9802      	ldr	r0, [sp, #8]
 800649c:	f7ff feb0 	bl	8006200 <_free_r>
 80064a0:	230c      	movs	r3, #12
 80064a2:	2001      	movs	r0, #1
 80064a4:	9a02      	ldr	r2, [sp, #8]
 80064a6:	4240      	negs	r0, r0
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	89a2      	ldrh	r2, [r4, #12]
 80064ac:	3334      	adds	r3, #52	@ 0x34
 80064ae:	4313      	orrs	r3, r2
 80064b0:	81a3      	strh	r3, [r4, #12]
 80064b2:	e7e9      	b.n	8006488 <__ssputs_r+0x90>
 80064b4:	fffffb7f 	.word	0xfffffb7f

080064b8 <_svfiprintf_r>:
 80064b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ba:	b0a1      	sub	sp, #132	@ 0x84
 80064bc:	9003      	str	r0, [sp, #12]
 80064be:	001d      	movs	r5, r3
 80064c0:	898b      	ldrh	r3, [r1, #12]
 80064c2:	000f      	movs	r7, r1
 80064c4:	0016      	movs	r6, r2
 80064c6:	061b      	lsls	r3, r3, #24
 80064c8:	d511      	bpl.n	80064ee <_svfiprintf_r+0x36>
 80064ca:	690b      	ldr	r3, [r1, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10e      	bne.n	80064ee <_svfiprintf_r+0x36>
 80064d0:	2140      	movs	r1, #64	@ 0x40
 80064d2:	f7ff ff01 	bl	80062d8 <_malloc_r>
 80064d6:	6038      	str	r0, [r7, #0]
 80064d8:	6138      	str	r0, [r7, #16]
 80064da:	2800      	cmp	r0, #0
 80064dc:	d105      	bne.n	80064ea <_svfiprintf_r+0x32>
 80064de:	230c      	movs	r3, #12
 80064e0:	9a03      	ldr	r2, [sp, #12]
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	2001      	movs	r0, #1
 80064e6:	4240      	negs	r0, r0
 80064e8:	e0cf      	b.n	800668a <_svfiprintf_r+0x1d2>
 80064ea:	2340      	movs	r3, #64	@ 0x40
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	2300      	movs	r3, #0
 80064f0:	ac08      	add	r4, sp, #32
 80064f2:	6163      	str	r3, [r4, #20]
 80064f4:	3320      	adds	r3, #32
 80064f6:	7663      	strb	r3, [r4, #25]
 80064f8:	3310      	adds	r3, #16
 80064fa:	76a3      	strb	r3, [r4, #26]
 80064fc:	9507      	str	r5, [sp, #28]
 80064fe:	0035      	movs	r5, r6
 8006500:	782b      	ldrb	r3, [r5, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <_svfiprintf_r+0x52>
 8006506:	2b25      	cmp	r3, #37	@ 0x25
 8006508:	d148      	bne.n	800659c <_svfiprintf_r+0xe4>
 800650a:	1bab      	subs	r3, r5, r6
 800650c:	9305      	str	r3, [sp, #20]
 800650e:	42b5      	cmp	r5, r6
 8006510:	d00b      	beq.n	800652a <_svfiprintf_r+0x72>
 8006512:	0032      	movs	r2, r6
 8006514:	0039      	movs	r1, r7
 8006516:	9803      	ldr	r0, [sp, #12]
 8006518:	f7ff ff6e 	bl	80063f8 <__ssputs_r>
 800651c:	3001      	adds	r0, #1
 800651e:	d100      	bne.n	8006522 <_svfiprintf_r+0x6a>
 8006520:	e0ae      	b.n	8006680 <_svfiprintf_r+0x1c8>
 8006522:	6963      	ldr	r3, [r4, #20]
 8006524:	9a05      	ldr	r2, [sp, #20]
 8006526:	189b      	adds	r3, r3, r2
 8006528:	6163      	str	r3, [r4, #20]
 800652a:	782b      	ldrb	r3, [r5, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d100      	bne.n	8006532 <_svfiprintf_r+0x7a>
 8006530:	e0a6      	b.n	8006680 <_svfiprintf_r+0x1c8>
 8006532:	2201      	movs	r2, #1
 8006534:	2300      	movs	r3, #0
 8006536:	4252      	negs	r2, r2
 8006538:	6062      	str	r2, [r4, #4]
 800653a:	a904      	add	r1, sp, #16
 800653c:	3254      	adds	r2, #84	@ 0x54
 800653e:	1852      	adds	r2, r2, r1
 8006540:	1c6e      	adds	r6, r5, #1
 8006542:	6023      	str	r3, [r4, #0]
 8006544:	60e3      	str	r3, [r4, #12]
 8006546:	60a3      	str	r3, [r4, #8]
 8006548:	7013      	strb	r3, [r2, #0]
 800654a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800654c:	4b54      	ldr	r3, [pc, #336]	@ (80066a0 <_svfiprintf_r+0x1e8>)
 800654e:	2205      	movs	r2, #5
 8006550:	0018      	movs	r0, r3
 8006552:	7831      	ldrb	r1, [r6, #0]
 8006554:	9305      	str	r3, [sp, #20]
 8006556:	f000 fa4d 	bl	80069f4 <memchr>
 800655a:	1c75      	adds	r5, r6, #1
 800655c:	2800      	cmp	r0, #0
 800655e:	d11f      	bne.n	80065a0 <_svfiprintf_r+0xe8>
 8006560:	6822      	ldr	r2, [r4, #0]
 8006562:	06d3      	lsls	r3, r2, #27
 8006564:	d504      	bpl.n	8006570 <_svfiprintf_r+0xb8>
 8006566:	2353      	movs	r3, #83	@ 0x53
 8006568:	a904      	add	r1, sp, #16
 800656a:	185b      	adds	r3, r3, r1
 800656c:	2120      	movs	r1, #32
 800656e:	7019      	strb	r1, [r3, #0]
 8006570:	0713      	lsls	r3, r2, #28
 8006572:	d504      	bpl.n	800657e <_svfiprintf_r+0xc6>
 8006574:	2353      	movs	r3, #83	@ 0x53
 8006576:	a904      	add	r1, sp, #16
 8006578:	185b      	adds	r3, r3, r1
 800657a:	212b      	movs	r1, #43	@ 0x2b
 800657c:	7019      	strb	r1, [r3, #0]
 800657e:	7833      	ldrb	r3, [r6, #0]
 8006580:	2b2a      	cmp	r3, #42	@ 0x2a
 8006582:	d016      	beq.n	80065b2 <_svfiprintf_r+0xfa>
 8006584:	0035      	movs	r5, r6
 8006586:	2100      	movs	r1, #0
 8006588:	200a      	movs	r0, #10
 800658a:	68e3      	ldr	r3, [r4, #12]
 800658c:	782a      	ldrb	r2, [r5, #0]
 800658e:	1c6e      	adds	r6, r5, #1
 8006590:	3a30      	subs	r2, #48	@ 0x30
 8006592:	2a09      	cmp	r2, #9
 8006594:	d950      	bls.n	8006638 <_svfiprintf_r+0x180>
 8006596:	2900      	cmp	r1, #0
 8006598:	d111      	bne.n	80065be <_svfiprintf_r+0x106>
 800659a:	e017      	b.n	80065cc <_svfiprintf_r+0x114>
 800659c:	3501      	adds	r5, #1
 800659e:	e7af      	b.n	8006500 <_svfiprintf_r+0x48>
 80065a0:	9b05      	ldr	r3, [sp, #20]
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	1ac0      	subs	r0, r0, r3
 80065a6:	2301      	movs	r3, #1
 80065a8:	4083      	lsls	r3, r0
 80065aa:	4313      	orrs	r3, r2
 80065ac:	002e      	movs	r6, r5
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	e7cc      	b.n	800654c <_svfiprintf_r+0x94>
 80065b2:	9b07      	ldr	r3, [sp, #28]
 80065b4:	1d19      	adds	r1, r3, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	9107      	str	r1, [sp, #28]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	db01      	blt.n	80065c2 <_svfiprintf_r+0x10a>
 80065be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065c0:	e004      	b.n	80065cc <_svfiprintf_r+0x114>
 80065c2:	425b      	negs	r3, r3
 80065c4:	60e3      	str	r3, [r4, #12]
 80065c6:	2302      	movs	r3, #2
 80065c8:	4313      	orrs	r3, r2
 80065ca:	6023      	str	r3, [r4, #0]
 80065cc:	782b      	ldrb	r3, [r5, #0]
 80065ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80065d0:	d10c      	bne.n	80065ec <_svfiprintf_r+0x134>
 80065d2:	786b      	ldrb	r3, [r5, #1]
 80065d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80065d6:	d134      	bne.n	8006642 <_svfiprintf_r+0x18a>
 80065d8:	9b07      	ldr	r3, [sp, #28]
 80065da:	3502      	adds	r5, #2
 80065dc:	1d1a      	adds	r2, r3, #4
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	9207      	str	r2, [sp, #28]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	da01      	bge.n	80065ea <_svfiprintf_r+0x132>
 80065e6:	2301      	movs	r3, #1
 80065e8:	425b      	negs	r3, r3
 80065ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80065ec:	4e2d      	ldr	r6, [pc, #180]	@ (80066a4 <_svfiprintf_r+0x1ec>)
 80065ee:	2203      	movs	r2, #3
 80065f0:	0030      	movs	r0, r6
 80065f2:	7829      	ldrb	r1, [r5, #0]
 80065f4:	f000 f9fe 	bl	80069f4 <memchr>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d006      	beq.n	800660a <_svfiprintf_r+0x152>
 80065fc:	2340      	movs	r3, #64	@ 0x40
 80065fe:	1b80      	subs	r0, r0, r6
 8006600:	4083      	lsls	r3, r0
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	3501      	adds	r5, #1
 8006606:	4313      	orrs	r3, r2
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	7829      	ldrb	r1, [r5, #0]
 800660c:	2206      	movs	r2, #6
 800660e:	4826      	ldr	r0, [pc, #152]	@ (80066a8 <_svfiprintf_r+0x1f0>)
 8006610:	1c6e      	adds	r6, r5, #1
 8006612:	7621      	strb	r1, [r4, #24]
 8006614:	f000 f9ee 	bl	80069f4 <memchr>
 8006618:	2800      	cmp	r0, #0
 800661a:	d038      	beq.n	800668e <_svfiprintf_r+0x1d6>
 800661c:	4b23      	ldr	r3, [pc, #140]	@ (80066ac <_svfiprintf_r+0x1f4>)
 800661e:	2b00      	cmp	r3, #0
 8006620:	d122      	bne.n	8006668 <_svfiprintf_r+0x1b0>
 8006622:	2207      	movs	r2, #7
 8006624:	9b07      	ldr	r3, [sp, #28]
 8006626:	3307      	adds	r3, #7
 8006628:	4393      	bics	r3, r2
 800662a:	3308      	adds	r3, #8
 800662c:	9307      	str	r3, [sp, #28]
 800662e:	6963      	ldr	r3, [r4, #20]
 8006630:	9a04      	ldr	r2, [sp, #16]
 8006632:	189b      	adds	r3, r3, r2
 8006634:	6163      	str	r3, [r4, #20]
 8006636:	e762      	b.n	80064fe <_svfiprintf_r+0x46>
 8006638:	4343      	muls	r3, r0
 800663a:	0035      	movs	r5, r6
 800663c:	2101      	movs	r1, #1
 800663e:	189b      	adds	r3, r3, r2
 8006640:	e7a4      	b.n	800658c <_svfiprintf_r+0xd4>
 8006642:	2300      	movs	r3, #0
 8006644:	200a      	movs	r0, #10
 8006646:	0019      	movs	r1, r3
 8006648:	3501      	adds	r5, #1
 800664a:	6063      	str	r3, [r4, #4]
 800664c:	782a      	ldrb	r2, [r5, #0]
 800664e:	1c6e      	adds	r6, r5, #1
 8006650:	3a30      	subs	r2, #48	@ 0x30
 8006652:	2a09      	cmp	r2, #9
 8006654:	d903      	bls.n	800665e <_svfiprintf_r+0x1a6>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0c8      	beq.n	80065ec <_svfiprintf_r+0x134>
 800665a:	9109      	str	r1, [sp, #36]	@ 0x24
 800665c:	e7c6      	b.n	80065ec <_svfiprintf_r+0x134>
 800665e:	4341      	muls	r1, r0
 8006660:	0035      	movs	r5, r6
 8006662:	2301      	movs	r3, #1
 8006664:	1889      	adds	r1, r1, r2
 8006666:	e7f1      	b.n	800664c <_svfiprintf_r+0x194>
 8006668:	aa07      	add	r2, sp, #28
 800666a:	9200      	str	r2, [sp, #0]
 800666c:	0021      	movs	r1, r4
 800666e:	003a      	movs	r2, r7
 8006670:	4b0f      	ldr	r3, [pc, #60]	@ (80066b0 <_svfiprintf_r+0x1f8>)
 8006672:	9803      	ldr	r0, [sp, #12]
 8006674:	e000      	b.n	8006678 <_svfiprintf_r+0x1c0>
 8006676:	bf00      	nop
 8006678:	9004      	str	r0, [sp, #16]
 800667a:	9b04      	ldr	r3, [sp, #16]
 800667c:	3301      	adds	r3, #1
 800667e:	d1d6      	bne.n	800662e <_svfiprintf_r+0x176>
 8006680:	89bb      	ldrh	r3, [r7, #12]
 8006682:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006684:	065b      	lsls	r3, r3, #25
 8006686:	d500      	bpl.n	800668a <_svfiprintf_r+0x1d2>
 8006688:	e72c      	b.n	80064e4 <_svfiprintf_r+0x2c>
 800668a:	b021      	add	sp, #132	@ 0x84
 800668c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800668e:	aa07      	add	r2, sp, #28
 8006690:	9200      	str	r2, [sp, #0]
 8006692:	0021      	movs	r1, r4
 8006694:	003a      	movs	r2, r7
 8006696:	4b06      	ldr	r3, [pc, #24]	@ (80066b0 <_svfiprintf_r+0x1f8>)
 8006698:	9803      	ldr	r0, [sp, #12]
 800669a:	f000 f87b 	bl	8006794 <_printf_i>
 800669e:	e7eb      	b.n	8006678 <_svfiprintf_r+0x1c0>
 80066a0:	08006d95 	.word	0x08006d95
 80066a4:	08006d9b 	.word	0x08006d9b
 80066a8:	08006d9f 	.word	0x08006d9f
 80066ac:	00000000 	.word	0x00000000
 80066b0:	080063f9 	.word	0x080063f9

080066b4 <_printf_common>:
 80066b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066b6:	0016      	movs	r6, r2
 80066b8:	9301      	str	r3, [sp, #4]
 80066ba:	688a      	ldr	r2, [r1, #8]
 80066bc:	690b      	ldr	r3, [r1, #16]
 80066be:	000c      	movs	r4, r1
 80066c0:	9000      	str	r0, [sp, #0]
 80066c2:	4293      	cmp	r3, r2
 80066c4:	da00      	bge.n	80066c8 <_printf_common+0x14>
 80066c6:	0013      	movs	r3, r2
 80066c8:	0022      	movs	r2, r4
 80066ca:	6033      	str	r3, [r6, #0]
 80066cc:	3243      	adds	r2, #67	@ 0x43
 80066ce:	7812      	ldrb	r2, [r2, #0]
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	d001      	beq.n	80066d8 <_printf_common+0x24>
 80066d4:	3301      	adds	r3, #1
 80066d6:	6033      	str	r3, [r6, #0]
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	069b      	lsls	r3, r3, #26
 80066dc:	d502      	bpl.n	80066e4 <_printf_common+0x30>
 80066de:	6833      	ldr	r3, [r6, #0]
 80066e0:	3302      	adds	r3, #2
 80066e2:	6033      	str	r3, [r6, #0]
 80066e4:	6822      	ldr	r2, [r4, #0]
 80066e6:	2306      	movs	r3, #6
 80066e8:	0015      	movs	r5, r2
 80066ea:	401d      	ands	r5, r3
 80066ec:	421a      	tst	r2, r3
 80066ee:	d027      	beq.n	8006740 <_printf_common+0x8c>
 80066f0:	0023      	movs	r3, r4
 80066f2:	3343      	adds	r3, #67	@ 0x43
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	1e5a      	subs	r2, r3, #1
 80066f8:	4193      	sbcs	r3, r2
 80066fa:	6822      	ldr	r2, [r4, #0]
 80066fc:	0692      	lsls	r2, r2, #26
 80066fe:	d430      	bmi.n	8006762 <_printf_common+0xae>
 8006700:	0022      	movs	r2, r4
 8006702:	9901      	ldr	r1, [sp, #4]
 8006704:	9800      	ldr	r0, [sp, #0]
 8006706:	9d08      	ldr	r5, [sp, #32]
 8006708:	3243      	adds	r2, #67	@ 0x43
 800670a:	47a8      	blx	r5
 800670c:	3001      	adds	r0, #1
 800670e:	d025      	beq.n	800675c <_printf_common+0xa8>
 8006710:	2206      	movs	r2, #6
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	2500      	movs	r5, #0
 8006716:	4013      	ands	r3, r2
 8006718:	2b04      	cmp	r3, #4
 800671a:	d105      	bne.n	8006728 <_printf_common+0x74>
 800671c:	6833      	ldr	r3, [r6, #0]
 800671e:	68e5      	ldr	r5, [r4, #12]
 8006720:	1aed      	subs	r5, r5, r3
 8006722:	43eb      	mvns	r3, r5
 8006724:	17db      	asrs	r3, r3, #31
 8006726:	401d      	ands	r5, r3
 8006728:	68a3      	ldr	r3, [r4, #8]
 800672a:	6922      	ldr	r2, [r4, #16]
 800672c:	4293      	cmp	r3, r2
 800672e:	dd01      	ble.n	8006734 <_printf_common+0x80>
 8006730:	1a9b      	subs	r3, r3, r2
 8006732:	18ed      	adds	r5, r5, r3
 8006734:	2600      	movs	r6, #0
 8006736:	42b5      	cmp	r5, r6
 8006738:	d120      	bne.n	800677c <_printf_common+0xc8>
 800673a:	2000      	movs	r0, #0
 800673c:	e010      	b.n	8006760 <_printf_common+0xac>
 800673e:	3501      	adds	r5, #1
 8006740:	68e3      	ldr	r3, [r4, #12]
 8006742:	6832      	ldr	r2, [r6, #0]
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	42ab      	cmp	r3, r5
 8006748:	ddd2      	ble.n	80066f0 <_printf_common+0x3c>
 800674a:	0022      	movs	r2, r4
 800674c:	2301      	movs	r3, #1
 800674e:	9901      	ldr	r1, [sp, #4]
 8006750:	9800      	ldr	r0, [sp, #0]
 8006752:	9f08      	ldr	r7, [sp, #32]
 8006754:	3219      	adds	r2, #25
 8006756:	47b8      	blx	r7
 8006758:	3001      	adds	r0, #1
 800675a:	d1f0      	bne.n	800673e <_printf_common+0x8a>
 800675c:	2001      	movs	r0, #1
 800675e:	4240      	negs	r0, r0
 8006760:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006762:	2030      	movs	r0, #48	@ 0x30
 8006764:	18e1      	adds	r1, r4, r3
 8006766:	3143      	adds	r1, #67	@ 0x43
 8006768:	7008      	strb	r0, [r1, #0]
 800676a:	0021      	movs	r1, r4
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	3145      	adds	r1, #69	@ 0x45
 8006770:	7809      	ldrb	r1, [r1, #0]
 8006772:	18a2      	adds	r2, r4, r2
 8006774:	3243      	adds	r2, #67	@ 0x43
 8006776:	3302      	adds	r3, #2
 8006778:	7011      	strb	r1, [r2, #0]
 800677a:	e7c1      	b.n	8006700 <_printf_common+0x4c>
 800677c:	0022      	movs	r2, r4
 800677e:	2301      	movs	r3, #1
 8006780:	9901      	ldr	r1, [sp, #4]
 8006782:	9800      	ldr	r0, [sp, #0]
 8006784:	9f08      	ldr	r7, [sp, #32]
 8006786:	321a      	adds	r2, #26
 8006788:	47b8      	blx	r7
 800678a:	3001      	adds	r0, #1
 800678c:	d0e6      	beq.n	800675c <_printf_common+0xa8>
 800678e:	3601      	adds	r6, #1
 8006790:	e7d1      	b.n	8006736 <_printf_common+0x82>
	...

08006794 <_printf_i>:
 8006794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006796:	b08b      	sub	sp, #44	@ 0x2c
 8006798:	9206      	str	r2, [sp, #24]
 800679a:	000a      	movs	r2, r1
 800679c:	3243      	adds	r2, #67	@ 0x43
 800679e:	9307      	str	r3, [sp, #28]
 80067a0:	9005      	str	r0, [sp, #20]
 80067a2:	9203      	str	r2, [sp, #12]
 80067a4:	7e0a      	ldrb	r2, [r1, #24]
 80067a6:	000c      	movs	r4, r1
 80067a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80067aa:	2a78      	cmp	r2, #120	@ 0x78
 80067ac:	d809      	bhi.n	80067c2 <_printf_i+0x2e>
 80067ae:	2a62      	cmp	r2, #98	@ 0x62
 80067b0:	d80b      	bhi.n	80067ca <_printf_i+0x36>
 80067b2:	2a00      	cmp	r2, #0
 80067b4:	d100      	bne.n	80067b8 <_printf_i+0x24>
 80067b6:	e0ba      	b.n	800692e <_printf_i+0x19a>
 80067b8:	497a      	ldr	r1, [pc, #488]	@ (80069a4 <_printf_i+0x210>)
 80067ba:	9104      	str	r1, [sp, #16]
 80067bc:	2a58      	cmp	r2, #88	@ 0x58
 80067be:	d100      	bne.n	80067c2 <_printf_i+0x2e>
 80067c0:	e08e      	b.n	80068e0 <_printf_i+0x14c>
 80067c2:	0025      	movs	r5, r4
 80067c4:	3542      	adds	r5, #66	@ 0x42
 80067c6:	702a      	strb	r2, [r5, #0]
 80067c8:	e022      	b.n	8006810 <_printf_i+0x7c>
 80067ca:	0010      	movs	r0, r2
 80067cc:	3863      	subs	r0, #99	@ 0x63
 80067ce:	2815      	cmp	r0, #21
 80067d0:	d8f7      	bhi.n	80067c2 <_printf_i+0x2e>
 80067d2:	f7f9 fcab 	bl	800012c <__gnu_thumb1_case_shi>
 80067d6:	0016      	.short	0x0016
 80067d8:	fff6001f 	.word	0xfff6001f
 80067dc:	fff6fff6 	.word	0xfff6fff6
 80067e0:	001ffff6 	.word	0x001ffff6
 80067e4:	fff6fff6 	.word	0xfff6fff6
 80067e8:	fff6fff6 	.word	0xfff6fff6
 80067ec:	0036009f 	.word	0x0036009f
 80067f0:	fff6007e 	.word	0xfff6007e
 80067f4:	00b0fff6 	.word	0x00b0fff6
 80067f8:	0036fff6 	.word	0x0036fff6
 80067fc:	fff6fff6 	.word	0xfff6fff6
 8006800:	0082      	.short	0x0082
 8006802:	0025      	movs	r5, r4
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	3542      	adds	r5, #66	@ 0x42
 8006808:	1d11      	adds	r1, r2, #4
 800680a:	6019      	str	r1, [r3, #0]
 800680c:	6813      	ldr	r3, [r2, #0]
 800680e:	702b      	strb	r3, [r5, #0]
 8006810:	2301      	movs	r3, #1
 8006812:	e09e      	b.n	8006952 <_printf_i+0x1be>
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	6809      	ldr	r1, [r1, #0]
 8006818:	1d02      	adds	r2, r0, #4
 800681a:	060d      	lsls	r5, r1, #24
 800681c:	d50b      	bpl.n	8006836 <_printf_i+0xa2>
 800681e:	6806      	ldr	r6, [r0, #0]
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	2e00      	cmp	r6, #0
 8006824:	da03      	bge.n	800682e <_printf_i+0x9a>
 8006826:	232d      	movs	r3, #45	@ 0x2d
 8006828:	9a03      	ldr	r2, [sp, #12]
 800682a:	4276      	negs	r6, r6
 800682c:	7013      	strb	r3, [r2, #0]
 800682e:	4b5d      	ldr	r3, [pc, #372]	@ (80069a4 <_printf_i+0x210>)
 8006830:	270a      	movs	r7, #10
 8006832:	9304      	str	r3, [sp, #16]
 8006834:	e018      	b.n	8006868 <_printf_i+0xd4>
 8006836:	6806      	ldr	r6, [r0, #0]
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	0649      	lsls	r1, r1, #25
 800683c:	d5f1      	bpl.n	8006822 <_printf_i+0x8e>
 800683e:	b236      	sxth	r6, r6
 8006840:	e7ef      	b.n	8006822 <_printf_i+0x8e>
 8006842:	6808      	ldr	r0, [r1, #0]
 8006844:	6819      	ldr	r1, [r3, #0]
 8006846:	c940      	ldmia	r1!, {r6}
 8006848:	0605      	lsls	r5, r0, #24
 800684a:	d402      	bmi.n	8006852 <_printf_i+0xbe>
 800684c:	0640      	lsls	r0, r0, #25
 800684e:	d500      	bpl.n	8006852 <_printf_i+0xbe>
 8006850:	b2b6      	uxth	r6, r6
 8006852:	6019      	str	r1, [r3, #0]
 8006854:	4b53      	ldr	r3, [pc, #332]	@ (80069a4 <_printf_i+0x210>)
 8006856:	270a      	movs	r7, #10
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	2a6f      	cmp	r2, #111	@ 0x6f
 800685c:	d100      	bne.n	8006860 <_printf_i+0xcc>
 800685e:	3f02      	subs	r7, #2
 8006860:	0023      	movs	r3, r4
 8006862:	2200      	movs	r2, #0
 8006864:	3343      	adds	r3, #67	@ 0x43
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	6863      	ldr	r3, [r4, #4]
 800686a:	60a3      	str	r3, [r4, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	db06      	blt.n	800687e <_printf_i+0xea>
 8006870:	2104      	movs	r1, #4
 8006872:	6822      	ldr	r2, [r4, #0]
 8006874:	9d03      	ldr	r5, [sp, #12]
 8006876:	438a      	bics	r2, r1
 8006878:	6022      	str	r2, [r4, #0]
 800687a:	4333      	orrs	r3, r6
 800687c:	d00c      	beq.n	8006898 <_printf_i+0x104>
 800687e:	9d03      	ldr	r5, [sp, #12]
 8006880:	0030      	movs	r0, r6
 8006882:	0039      	movs	r1, r7
 8006884:	f7f9 fce2 	bl	800024c <__aeabi_uidivmod>
 8006888:	9b04      	ldr	r3, [sp, #16]
 800688a:	3d01      	subs	r5, #1
 800688c:	5c5b      	ldrb	r3, [r3, r1]
 800688e:	702b      	strb	r3, [r5, #0]
 8006890:	0033      	movs	r3, r6
 8006892:	0006      	movs	r6, r0
 8006894:	429f      	cmp	r7, r3
 8006896:	d9f3      	bls.n	8006880 <_printf_i+0xec>
 8006898:	2f08      	cmp	r7, #8
 800689a:	d109      	bne.n	80068b0 <_printf_i+0x11c>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	07db      	lsls	r3, r3, #31
 80068a0:	d506      	bpl.n	80068b0 <_printf_i+0x11c>
 80068a2:	6862      	ldr	r2, [r4, #4]
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	dc02      	bgt.n	80068b0 <_printf_i+0x11c>
 80068aa:	2330      	movs	r3, #48	@ 0x30
 80068ac:	3d01      	subs	r5, #1
 80068ae:	702b      	strb	r3, [r5, #0]
 80068b0:	9b03      	ldr	r3, [sp, #12]
 80068b2:	1b5b      	subs	r3, r3, r5
 80068b4:	6123      	str	r3, [r4, #16]
 80068b6:	9b07      	ldr	r3, [sp, #28]
 80068b8:	0021      	movs	r1, r4
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	9805      	ldr	r0, [sp, #20]
 80068be:	9b06      	ldr	r3, [sp, #24]
 80068c0:	aa09      	add	r2, sp, #36	@ 0x24
 80068c2:	f7ff fef7 	bl	80066b4 <_printf_common>
 80068c6:	3001      	adds	r0, #1
 80068c8:	d148      	bne.n	800695c <_printf_i+0x1c8>
 80068ca:	2001      	movs	r0, #1
 80068cc:	4240      	negs	r0, r0
 80068ce:	b00b      	add	sp, #44	@ 0x2c
 80068d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068d2:	2220      	movs	r2, #32
 80068d4:	6809      	ldr	r1, [r1, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	6022      	str	r2, [r4, #0]
 80068da:	2278      	movs	r2, #120	@ 0x78
 80068dc:	4932      	ldr	r1, [pc, #200]	@ (80069a8 <_printf_i+0x214>)
 80068de:	9104      	str	r1, [sp, #16]
 80068e0:	0021      	movs	r1, r4
 80068e2:	3145      	adds	r1, #69	@ 0x45
 80068e4:	700a      	strb	r2, [r1, #0]
 80068e6:	6819      	ldr	r1, [r3, #0]
 80068e8:	6822      	ldr	r2, [r4, #0]
 80068ea:	c940      	ldmia	r1!, {r6}
 80068ec:	0610      	lsls	r0, r2, #24
 80068ee:	d402      	bmi.n	80068f6 <_printf_i+0x162>
 80068f0:	0650      	lsls	r0, r2, #25
 80068f2:	d500      	bpl.n	80068f6 <_printf_i+0x162>
 80068f4:	b2b6      	uxth	r6, r6
 80068f6:	6019      	str	r1, [r3, #0]
 80068f8:	07d3      	lsls	r3, r2, #31
 80068fa:	d502      	bpl.n	8006902 <_printf_i+0x16e>
 80068fc:	2320      	movs	r3, #32
 80068fe:	4313      	orrs	r3, r2
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	2e00      	cmp	r6, #0
 8006904:	d001      	beq.n	800690a <_printf_i+0x176>
 8006906:	2710      	movs	r7, #16
 8006908:	e7aa      	b.n	8006860 <_printf_i+0xcc>
 800690a:	2220      	movs	r2, #32
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	4393      	bics	r3, r2
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	e7f8      	b.n	8006906 <_printf_i+0x172>
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	680d      	ldr	r5, [r1, #0]
 8006918:	1d10      	adds	r0, r2, #4
 800691a:	6949      	ldr	r1, [r1, #20]
 800691c:	6018      	str	r0, [r3, #0]
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	062e      	lsls	r6, r5, #24
 8006922:	d501      	bpl.n	8006928 <_printf_i+0x194>
 8006924:	6019      	str	r1, [r3, #0]
 8006926:	e002      	b.n	800692e <_printf_i+0x19a>
 8006928:	066d      	lsls	r5, r5, #25
 800692a:	d5fb      	bpl.n	8006924 <_printf_i+0x190>
 800692c:	8019      	strh	r1, [r3, #0]
 800692e:	2300      	movs	r3, #0
 8006930:	9d03      	ldr	r5, [sp, #12]
 8006932:	6123      	str	r3, [r4, #16]
 8006934:	e7bf      	b.n	80068b6 <_printf_i+0x122>
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	1d11      	adds	r1, r2, #4
 800693a:	6019      	str	r1, [r3, #0]
 800693c:	6815      	ldr	r5, [r2, #0]
 800693e:	2100      	movs	r1, #0
 8006940:	0028      	movs	r0, r5
 8006942:	6862      	ldr	r2, [r4, #4]
 8006944:	f000 f856 	bl	80069f4 <memchr>
 8006948:	2800      	cmp	r0, #0
 800694a:	d001      	beq.n	8006950 <_printf_i+0x1bc>
 800694c:	1b40      	subs	r0, r0, r5
 800694e:	6060      	str	r0, [r4, #4]
 8006950:	6863      	ldr	r3, [r4, #4]
 8006952:	6123      	str	r3, [r4, #16]
 8006954:	2300      	movs	r3, #0
 8006956:	9a03      	ldr	r2, [sp, #12]
 8006958:	7013      	strb	r3, [r2, #0]
 800695a:	e7ac      	b.n	80068b6 <_printf_i+0x122>
 800695c:	002a      	movs	r2, r5
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	9906      	ldr	r1, [sp, #24]
 8006962:	9805      	ldr	r0, [sp, #20]
 8006964:	9d07      	ldr	r5, [sp, #28]
 8006966:	47a8      	blx	r5
 8006968:	3001      	adds	r0, #1
 800696a:	d0ae      	beq.n	80068ca <_printf_i+0x136>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	079b      	lsls	r3, r3, #30
 8006970:	d415      	bmi.n	800699e <_printf_i+0x20a>
 8006972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006974:	68e0      	ldr	r0, [r4, #12]
 8006976:	4298      	cmp	r0, r3
 8006978:	daa9      	bge.n	80068ce <_printf_i+0x13a>
 800697a:	0018      	movs	r0, r3
 800697c:	e7a7      	b.n	80068ce <_printf_i+0x13a>
 800697e:	0022      	movs	r2, r4
 8006980:	2301      	movs	r3, #1
 8006982:	9906      	ldr	r1, [sp, #24]
 8006984:	9805      	ldr	r0, [sp, #20]
 8006986:	9e07      	ldr	r6, [sp, #28]
 8006988:	3219      	adds	r2, #25
 800698a:	47b0      	blx	r6
 800698c:	3001      	adds	r0, #1
 800698e:	d09c      	beq.n	80068ca <_printf_i+0x136>
 8006990:	3501      	adds	r5, #1
 8006992:	68e3      	ldr	r3, [r4, #12]
 8006994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006996:	1a9b      	subs	r3, r3, r2
 8006998:	42ab      	cmp	r3, r5
 800699a:	dcf0      	bgt.n	800697e <_printf_i+0x1ea>
 800699c:	e7e9      	b.n	8006972 <_printf_i+0x1de>
 800699e:	2500      	movs	r5, #0
 80069a0:	e7f7      	b.n	8006992 <_printf_i+0x1fe>
 80069a2:	46c0      	nop			@ (mov r8, r8)
 80069a4:	08006da6 	.word	0x08006da6
 80069a8:	08006db7 	.word	0x08006db7

080069ac <memmove>:
 80069ac:	b510      	push	{r4, lr}
 80069ae:	4288      	cmp	r0, r1
 80069b0:	d902      	bls.n	80069b8 <memmove+0xc>
 80069b2:	188b      	adds	r3, r1, r2
 80069b4:	4298      	cmp	r0, r3
 80069b6:	d308      	bcc.n	80069ca <memmove+0x1e>
 80069b8:	2300      	movs	r3, #0
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d007      	beq.n	80069ce <memmove+0x22>
 80069be:	5ccc      	ldrb	r4, [r1, r3]
 80069c0:	54c4      	strb	r4, [r0, r3]
 80069c2:	3301      	adds	r3, #1
 80069c4:	e7f9      	b.n	80069ba <memmove+0xe>
 80069c6:	5c8b      	ldrb	r3, [r1, r2]
 80069c8:	5483      	strb	r3, [r0, r2]
 80069ca:	3a01      	subs	r2, #1
 80069cc:	d2fb      	bcs.n	80069c6 <memmove+0x1a>
 80069ce:	bd10      	pop	{r4, pc}

080069d0 <_sbrk_r>:
 80069d0:	2300      	movs	r3, #0
 80069d2:	b570      	push	{r4, r5, r6, lr}
 80069d4:	4d06      	ldr	r5, [pc, #24]	@ (80069f0 <_sbrk_r+0x20>)
 80069d6:	0004      	movs	r4, r0
 80069d8:	0008      	movs	r0, r1
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	f7fb f896 	bl	8001b0c <_sbrk>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d103      	bne.n	80069ec <_sbrk_r+0x1c>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d000      	beq.n	80069ec <_sbrk_r+0x1c>
 80069ea:	6023      	str	r3, [r4, #0]
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
 80069ee:	46c0      	nop			@ (mov r8, r8)
 80069f0:	200004b8 	.word	0x200004b8

080069f4 <memchr>:
 80069f4:	b2c9      	uxtb	r1, r1
 80069f6:	1882      	adds	r2, r0, r2
 80069f8:	4290      	cmp	r0, r2
 80069fa:	d101      	bne.n	8006a00 <memchr+0xc>
 80069fc:	2000      	movs	r0, #0
 80069fe:	4770      	bx	lr
 8006a00:	7803      	ldrb	r3, [r0, #0]
 8006a02:	428b      	cmp	r3, r1
 8006a04:	d0fb      	beq.n	80069fe <memchr+0xa>
 8006a06:	3001      	adds	r0, #1
 8006a08:	e7f6      	b.n	80069f8 <memchr+0x4>

08006a0a <memcpy>:
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d100      	bne.n	8006a14 <memcpy+0xa>
 8006a12:	bd10      	pop	{r4, pc}
 8006a14:	5ccc      	ldrb	r4, [r1, r3]
 8006a16:	54c4      	strb	r4, [r0, r3]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	e7f8      	b.n	8006a0e <memcpy+0x4>

08006a1c <_realloc_r>:
 8006a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a1e:	0006      	movs	r6, r0
 8006a20:	000c      	movs	r4, r1
 8006a22:	0015      	movs	r5, r2
 8006a24:	2900      	cmp	r1, #0
 8006a26:	d105      	bne.n	8006a34 <_realloc_r+0x18>
 8006a28:	0011      	movs	r1, r2
 8006a2a:	f7ff fc55 	bl	80062d8 <_malloc_r>
 8006a2e:	0004      	movs	r4, r0
 8006a30:	0020      	movs	r0, r4
 8006a32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a34:	2a00      	cmp	r2, #0
 8006a36:	d103      	bne.n	8006a40 <_realloc_r+0x24>
 8006a38:	f7ff fbe2 	bl	8006200 <_free_r>
 8006a3c:	002c      	movs	r4, r5
 8006a3e:	e7f7      	b.n	8006a30 <_realloc_r+0x14>
 8006a40:	f000 f81c 	bl	8006a7c <_malloc_usable_size_r>
 8006a44:	0007      	movs	r7, r0
 8006a46:	4285      	cmp	r5, r0
 8006a48:	d802      	bhi.n	8006a50 <_realloc_r+0x34>
 8006a4a:	0843      	lsrs	r3, r0, #1
 8006a4c:	42ab      	cmp	r3, r5
 8006a4e:	d3ef      	bcc.n	8006a30 <_realloc_r+0x14>
 8006a50:	0029      	movs	r1, r5
 8006a52:	0030      	movs	r0, r6
 8006a54:	f7ff fc40 	bl	80062d8 <_malloc_r>
 8006a58:	9001      	str	r0, [sp, #4]
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d101      	bne.n	8006a62 <_realloc_r+0x46>
 8006a5e:	9c01      	ldr	r4, [sp, #4]
 8006a60:	e7e6      	b.n	8006a30 <_realloc_r+0x14>
 8006a62:	002a      	movs	r2, r5
 8006a64:	42bd      	cmp	r5, r7
 8006a66:	d900      	bls.n	8006a6a <_realloc_r+0x4e>
 8006a68:	003a      	movs	r2, r7
 8006a6a:	0021      	movs	r1, r4
 8006a6c:	9801      	ldr	r0, [sp, #4]
 8006a6e:	f7ff ffcc 	bl	8006a0a <memcpy>
 8006a72:	0021      	movs	r1, r4
 8006a74:	0030      	movs	r0, r6
 8006a76:	f7ff fbc3 	bl	8006200 <_free_r>
 8006a7a:	e7f0      	b.n	8006a5e <_realloc_r+0x42>

08006a7c <_malloc_usable_size_r>:
 8006a7c:	1f0b      	subs	r3, r1, #4
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	1f18      	subs	r0, r3, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	da01      	bge.n	8006a8a <_malloc_usable_size_r+0xe>
 8006a86:	580b      	ldr	r3, [r1, r0]
 8006a88:	18c0      	adds	r0, r0, r3
 8006a8a:	4770      	bx	lr

08006a8c <_init>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	46c0      	nop			@ (mov r8, r8)
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr

08006a98 <_fini>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	46c0      	nop			@ (mov r8, r8)
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr
