
DIsc_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d38  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009ec0  08009ec0  0000aec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009edc  08009edc  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009edc  08009edc  0000aedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ee4  08009ee4  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ee4  08009ee4  0000aee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ee8  08009ee8  0000aee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009eec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000af8  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b74  20000b74  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c8d7  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004105  00000000  00000000  00027983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018d0  00000000  00000000  0002ba88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001358  00000000  00000000  0002d358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002497b  00000000  00000000  0002e6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000202b0  00000000  00000000  0005302b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6790  00000000  00000000  000732db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149a6b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d6c  00000000  00000000  00149ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0015081c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009ea8 	.word	0x08009ea8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009ea8 	.word	0x08009ea8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fde6 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f834 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9e0 	bl	80008c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f89c 	bl	8000640 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8c8 	bl	800069c <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8f6 	bl	80006fc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f009 f874 	bl	80095fc <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f982 	bl	800081c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000518:	f000 f9aa 	bl	8000870 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 800051c:	f000 f924 	bl	8000768 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000520:	210c      	movs	r1, #12
 8000522:	480e      	ldr	r0, [pc, #56]	@ (800055c <main+0x68>)
 8000524:	f004 ff2a 	bl	800537c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (1==flag){
 8000528:	4b0d      	ldr	r3, [pc, #52]	@ (8000560 <main+0x6c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d111      	bne.n	8000554 <main+0x60>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000530:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000534:	480b      	ldr	r0, [pc, #44]	@ (8000564 <main+0x70>)
 8000536:	f001 f924 	bl	8001782 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800053a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800053e:	4809      	ldr	r0, [pc, #36]	@ (8000564 <main+0x70>)
 8000540:	f001 f91f 	bl	8001782 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000544:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000548:	4806      	ldr	r0, [pc, #24]	@ (8000564 <main+0x70>)
 800054a:	f001 f91a 	bl	8001782 <HAL_GPIO_TogglePin>
		flag=0;
 800054e:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <main+0x6c>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
	}


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000554:	f009 f878 	bl	8009648 <MX_USB_HOST_Process>
	if (1==flag){
 8000558:	e7e6      	b.n	8000528 <main+0x34>
 800055a:	bf00      	nop
 800055c:	2000018c 	.word	0x2000018c
 8000560:	20000264 	.word	0x20000264
 8000564:	40020c00 	.word	0x40020c00

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	@ 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f009 fc08 	bl	8009d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b29      	ldr	r3, [pc, #164]	@ (8000638 <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	4a28      	ldr	r2, [pc, #160]	@ (8000638 <SystemClock_Config+0xd0>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	@ 0x40
 800059c:	4b26      	ldr	r3, [pc, #152]	@ (8000638 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b23      	ldr	r3, [pc, #140]	@ (800063c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a22      	ldr	r2, [pc, #136]	@ (800063c <SystemClock_Config+0xd4>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b20      	ldr	r3, [pc, #128]	@ (800063c <SystemClock_Config+0xd4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005c4:	2303      	movs	r3, #3
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ce:	2301      	movs	r3, #1
 80005d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d2:	2310      	movs	r3, #16
 80005d4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ee:	2307      	movs	r3, #7
 80005f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 f80e 	bl	8004618 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000602:	f000 fa75 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fa71 	bl	8004b08 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800062c:	f000 fa60 	bl	8000af0 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	@ 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	@ (8000694 <MX_I2C1_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_I2C1_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <MX_I2C1_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_I2C1_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <MX_I2C1_Init+0x50>)
 800067e:	f003 f9e7 	bl	8003a50 <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 fa32 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000098 	.word	0x20000098
 8000694:	40005400 	.word	0x40005400
 8000698:	000186a0 	.word	0x000186a0

0800069c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006a0:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006a2:	4a14      	ldr	r2, [pc, #80]	@ (80006f4 <MX_I2S3_Init+0x58>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006a6:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006c4:	4a0c      	ldr	r2, [pc, #48]	@ (80006f8 <MX_I2S3_Init+0x5c>)
 80006c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006c8:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006dc:	f003 fafc 	bl	8003cd8 <HAL_I2S_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006e6:	f000 fa03 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000ec 	.word	0x200000ec
 80006f4:	40003c00 	.word	0x40003c00
 80006f8:	00017700 	.word	0x00017700

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	@ (8000764 <MX_SPI1_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	@ (8000760 <MX_SPI1_Init+0x64>)
 800074e:	f004 fd3d 	bl	80051cc <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f9ca 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000134 	.word	0x20000134
 8000764:	40013000 	.word	0x40013000

08000768 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
 8000786:	615a      	str	r2, [r3, #20]
 8000788:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800078a:	4b22      	ldr	r3, [pc, #136]	@ (8000814 <MX_TIM4_Init+0xac>)
 800078c:	4a22      	ldr	r2, [pc, #136]	@ (8000818 <MX_TIM4_Init+0xb0>)
 800078e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 255;
 8000790:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <MX_TIM4_Init+0xac>)
 8000792:	22ff      	movs	r2, #255	@ 0xff
 8000794:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000796:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <MX_TIM4_Init+0xac>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 62499;
 800079c:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <MX_TIM4_Init+0xac>)
 800079e:	f24f 4223 	movw	r2, #62499	@ 0xf423
 80007a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <MX_TIM4_Init+0xac>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <MX_TIM4_Init+0xac>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007b0:	4818      	ldr	r0, [pc, #96]	@ (8000814 <MX_TIM4_Init+0xac>)
 80007b2:	f004 fd94 	bl	80052de <HAL_TIM_PWM_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80007bc:	f000 f998 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4619      	mov	r1, r3
 80007ce:	4811      	ldr	r0, [pc, #68]	@ (8000814 <MX_TIM4_Init+0xac>)
 80007d0:	f005 f9da 	bl	8005b88 <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80007da:	f000 f989 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007de:	2360      	movs	r3, #96	@ 0x60
 80007e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 80007e2:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80007e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	220c      	movs	r2, #12
 80007f4:	4619      	mov	r1, r3
 80007f6:	4807      	ldr	r0, [pc, #28]	@ (8000814 <MX_TIM4_Init+0xac>)
 80007f8:	f004 fe88 	bl	800550c <HAL_TIM_PWM_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000802:	f000 f975 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000806:	4803      	ldr	r0, [pc, #12]	@ (8000814 <MX_TIM4_Init+0xac>)
 8000808:	f000 fad2 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000018c 	.word	0x2000018c
 8000818:	40000800 	.word	0x40000800

0800081c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_USART2_UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	@ (800086c <MX_USART2_UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <MX_USART2_UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_USART2_UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_USART2_UART_Init+0x4c>)
 8000854:	f005 fa14 	bl	8005c80 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800085e:	f000 f947 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200001d4 	.word	0x200001d4
 800086c:	40004400 	.word	0x40004400

08000870 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_USART3_UART_Init+0x4c>)
 8000876:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <MX_USART3_UART_Init+0x50>)
 8000878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_USART3_UART_Init+0x4c>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_USART3_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_USART3_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_USART3_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_USART3_UART_Init+0x4c>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <MX_USART3_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_USART3_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_USART3_UART_Init+0x4c>)
 80008a8:	f005 f9ea 	bl	8005c80 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008b2:	f000 f91d 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000021c 	.word	0x2000021c
 80008c0:	40004800 	.word	0x40004800

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	@ 0x30
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	4b76      	ldr	r3, [pc, #472]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a75      	ldr	r2, [pc, #468]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 80008e4:	f043 0310 	orr.w	r3, r3, #16
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b73      	ldr	r3, [pc, #460]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	4b6f      	ldr	r3, [pc, #444]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a6e      	ldr	r2, [pc, #440]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b6c      	ldr	r3, [pc, #432]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b68      	ldr	r3, [pc, #416]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a67      	ldr	r2, [pc, #412]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b65      	ldr	r3, [pc, #404]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b61      	ldr	r3, [pc, #388]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a60      	ldr	r2, [pc, #384]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a59      	ldr	r2, [pc, #356]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b57      	ldr	r3, [pc, #348]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b53      	ldr	r3, [pc, #332]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a52      	ldr	r2, [pc, #328]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b50      	ldr	r3, [pc, #320]	@ (8000ab8 <MX_GPIO_Init+0x1f4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2108      	movs	r1, #8
 8000986:	484d      	ldr	r0, [pc, #308]	@ (8000abc <MX_GPIO_Init+0x1f8>)
 8000988:	f000 fee2 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2101      	movs	r1, #1
 8000990:	484b      	ldr	r0, [pc, #300]	@ (8000ac0 <MX_GPIO_Init+0x1fc>)
 8000992:	f000 fedd 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f247 0110 	movw	r1, #28688	@ 0x7010
 800099c:	4849      	ldr	r0, [pc, #292]	@ (8000ac4 <MX_GPIO_Init+0x200>)
 800099e:	f000 fed7 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009a2:	2308      	movs	r3, #8
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4840      	ldr	r0, [pc, #256]	@ (8000abc <MX_GPIO_Init+0x1f8>)
 80009ba:	f000 fd2d 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009be:	2301      	movs	r3, #1
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	483a      	ldr	r0, [pc, #232]	@ (8000ac0 <MX_GPIO_Init+0x1fc>)
 80009d6:	f000 fd1f 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009da:	2308      	movs	r3, #8
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ea:	2305      	movs	r3, #5
 80009ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4832      	ldr	r0, [pc, #200]	@ (8000ac0 <MX_GPIO_Init+0x1fc>)
 80009f6:	f000 fd0f 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80009fa:	2301      	movs	r3, #1
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	482e      	ldr	r0, [pc, #184]	@ (8000ac8 <MX_GPIO_Init+0x204>)
 8000a10:	f000 fd02 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a14:	2304      	movs	r3, #4
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4829      	ldr	r0, [pc, #164]	@ (8000acc <MX_GPIO_Init+0x208>)
 8000a28:	f000 fcf6 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4820      	ldr	r0, [pc, #128]	@ (8000acc <MX_GPIO_Init+0x208>)
 8000a4a:	f000 fce5 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin;
 8000a4e:	f247 0310 	movw	r3, #28688	@ 0x7010
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4817      	ldr	r0, [pc, #92]	@ (8000ac4 <MX_GPIO_Init+0x200>)
 8000a68:	f000 fcd6 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4811      	ldr	r0, [pc, #68]	@ (8000ac4 <MX_GPIO_Init+0x200>)
 8000a80:	f000 fcca 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a88:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4808      	ldr	r0, [pc, #32]	@ (8000abc <MX_GPIO_Init+0x1f8>)
 8000a9a:	f000 fcbd 	bl	8001418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2006      	movs	r0, #6
 8000aa4:	f000 fc81 	bl	80013aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000aa8:	2006      	movs	r0, #6
 8000aaa:	f000 fc9a 	bl	80013e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	@ 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020400 	.word	0x40020400

08000ad0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
	flag=1;
 8000ada:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <HAL_GPIO_EXTI_Callback+0x1c>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	701a      	strb	r2, [r3, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	20000264 	.word	0x20000264

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <Error_Handler+0x8>

08000afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b3a:	2007      	movs	r0, #7
 8000b3c:	f000 fc2a 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	@ (8000bd0 <HAL_I2C_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12c      	bne.n	8000bc8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b8a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b90:	2312      	movs	r3, #18
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <HAL_I2C_MspInit+0x8c>)
 8000ba8:	f000 fc36 	bl	8001418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	4a07      	ldr	r2, [pc, #28]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	@ 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	@ 0x38
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a31      	ldr	r2, [pc, #196]	@ (8000ccc <HAL_I2S_MspInit+0xf0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d15a      	bne.n	8000cc2 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c10:	23c0      	movs	r3, #192	@ 0xc0
 8000c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 f993 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c28:	f7ff ff62 	bl	8000af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	4b27      	ldr	r3, [pc, #156]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	4a26      	ldr	r2, [pc, #152]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3c:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6c:	4a18      	ldr	r2, [pc, #96]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c80:	2310      	movs	r3, #16
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c90:	2306      	movs	r3, #6
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480e      	ldr	r0, [pc, #56]	@ (8000cd4 <HAL_I2S_MspInit+0xf8>)
 8000c9c:	f000 fbbc 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ca0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4806      	ldr	r0, [pc, #24]	@ (8000cd8 <HAL_I2S_MspInit+0xfc>)
 8000cbe:	f000 fbab 	bl	8001418 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3738      	adds	r7, #56	@ 0x38
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40003c00 	.word	0x40003c00
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020800 	.word	0x40020800

08000cdc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	@ (8000d60 <HAL_SPI_MspInit+0x84>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12b      	bne.n	8000d56 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a17      	ldr	r2, [pc, #92]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a10      	ldr	r2, [pc, #64]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d36:	23e0      	movs	r3, #224	@ 0xe0
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d46:	2305      	movs	r3, #5
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <HAL_SPI_MspInit+0x8c>)
 8000d52:	f000 fb61 	bl	8001418 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	@ 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40013000 	.word	0x40013000
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0b      	ldr	r2, [pc, #44]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10d      	bne.n	8000d9a <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <HAL_TIM_PWM_MspInit+0x40>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	4a09      	ldr	r2, [pc, #36]	@ (8000dac <HAL_TIM_PWM_MspInit+0x40>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <HAL_TIM_PWM_MspInit+0x40>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40000800 	.word	0x40000800
 8000dac:	40023800 	.word	0x40023800

08000db0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <HAL_TIM_MspPostInit+0x68>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d11e      	bne.n	8000e10 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <HAL_TIM_MspPostInit+0x6c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a10      	ldr	r2, [pc, #64]	@ (8000e1c <HAL_TIM_MspPostInit+0x6c>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <HAL_TIM_MspPostInit+0x6c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000df2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <HAL_TIM_MspPostInit+0x70>)
 8000e0c:	f000 fb04 	bl	8001418 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e10:	bf00      	nop
 8000e12:	3720      	adds	r7, #32
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40000800 	.word	0x40000800
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020c00 	.word	0x40020c00

08000e24 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	@ 0x30
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a42      	ldr	r2, [pc, #264]	@ (8000f4c <HAL_UART_MspInit+0x128>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d12c      	bne.n	8000ea0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	4b41      	ldr	r3, [pc, #260]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	4a40      	ldr	r2, [pc, #256]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e56:	4b3e      	ldr	r3, [pc, #248]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	4b3a      	ldr	r3, [pc, #232]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a39      	ldr	r2, [pc, #228]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b37      	ldr	r3, [pc, #220]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e7e:	230c      	movs	r3, #12
 8000e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8e:	2307      	movs	r3, #7
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	482e      	ldr	r0, [pc, #184]	@ (8000f54 <HAL_UART_MspInit+0x130>)
 8000e9a:	f000 fabd 	bl	8001418 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e9e:	e050      	b.n	8000f42 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8000f58 <HAL_UART_MspInit+0x134>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d14b      	bne.n	8000f42 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b28      	ldr	r3, [pc, #160]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	4a27      	ldr	r2, [pc, #156]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eba:	4b25      	ldr	r3, [pc, #148]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a20      	ldr	r2, [pc, #128]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a19      	ldr	r2, [pc, #100]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b17      	ldr	r3, [pc, #92]	@ (8000f50 <HAL_UART_MspInit+0x12c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000efe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f10:	2307      	movs	r3, #7
 8000f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4810      	ldr	r0, [pc, #64]	@ (8000f5c <HAL_UART_MspInit+0x138>)
 8000f1c:	f000 fa7c 	bl	8001418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f32:	2307      	movs	r3, #7
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4808      	ldr	r0, [pc, #32]	@ (8000f60 <HAL_UART_MspInit+0x13c>)
 8000f3e:	f000 fa6b 	bl	8001418 <HAL_GPIO_Init>
}
 8000f42:	bf00      	nop
 8000f44:	3730      	adds	r7, #48	@ 0x30
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40004400 	.word	0x40004400
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40004800 	.word	0x40004800
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	40020c00 	.word	0x40020c00

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 f8d7 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f000 fbf6 	bl	80017b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <OTG_FS_IRQHandler+0x10>)
 8000fd6:	f000 fee7 	bl	8001da8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000064c 	.word	0x2000064c

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f008 fed2 	bl	8009dbc <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20020000 	.word	0x20020000
 8001044:	00000400 	.word	0x00000400
 8001048:	20000268 	.word	0x20000268
 800104c:	20000b78 	.word	0x20000b78

08001050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <SystemInit+0x20>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105a:	4a05      	ldr	r2, [pc, #20]	@ (8001070 <SystemInit+0x20>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001078:	f7ff ffea 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800107c:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107e:	490d      	ldr	r1, [pc, #52]	@ (80010b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001080:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001094:	4c0a      	ldr	r4, [pc, #40]	@ (80010c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f008 fe91 	bl	8009dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a6:	f7ff fa25 	bl	80004f4 <main>
  bx  lr    
 80010aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010b8:	08009eec 	.word	0x08009eec
  ldr r2, =_sbss
 80010bc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80010c0:	20000b74 	.word	0x20000b74

080010c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <HAL_Init+0x40>)
 80010d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <HAL_Init+0x40>)
 80010de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <HAL_Init+0x40>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f94f 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fcfe 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f967 	bl	80013fe <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f92f 	bl	80013aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	@ (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	2000026c 	.word	0x2000026c

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	2000026c 	.word	0x2000026c

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <HAL_Delay+0x44>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f003 021f 	and.w	r2, r3, #31
 8001270:	4907      	ldr	r1, [pc, #28]	@ (8001290 <__NVIC_EnableIRQ+0x38>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	095b      	lsrs	r3, r3, #5
 8001278:	2001      	movs	r0, #1
 800127a:	fa00 f202 	lsl.w	r2, r0, r2
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	@ (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	@ (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	@ 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f7ff ff8e 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff29 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff3e 	bl	800123c <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff8e 	bl	80012e8 <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5d 	bl	8001294 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff31 	bl	8001258 <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffa2 	bl	8001350 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	@ 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e16b      	b.n	800170c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 815a 	bne.w	8001706 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001466:	2b02      	cmp	r3, #2
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80b4 	beq.w	8001706 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b60      	ldr	r3, [pc, #384]	@ (8001724 <HAL_GPIO_Init+0x30c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001724 <HAL_GPIO_Init+0x30c>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001724 <HAL_GPIO_Init+0x30c>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001728 <HAL_GPIO_Init+0x310>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a52      	ldr	r2, [pc, #328]	@ (800172c <HAL_GPIO_Init+0x314>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d02b      	beq.n	800163e <HAL_GPIO_Init+0x226>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a51      	ldr	r2, [pc, #324]	@ (8001730 <HAL_GPIO_Init+0x318>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d025      	beq.n	800163a <HAL_GPIO_Init+0x222>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a50      	ldr	r2, [pc, #320]	@ (8001734 <HAL_GPIO_Init+0x31c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01f      	beq.n	8001636 <HAL_GPIO_Init+0x21e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001738 <HAL_GPIO_Init+0x320>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d019      	beq.n	8001632 <HAL_GPIO_Init+0x21a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4e      	ldr	r2, [pc, #312]	@ (800173c <HAL_GPIO_Init+0x324>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d013      	beq.n	800162e <HAL_GPIO_Init+0x216>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4d      	ldr	r2, [pc, #308]	@ (8001740 <HAL_GPIO_Init+0x328>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00d      	beq.n	800162a <HAL_GPIO_Init+0x212>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4c      	ldr	r2, [pc, #304]	@ (8001744 <HAL_GPIO_Init+0x32c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d007      	beq.n	8001626 <HAL_GPIO_Init+0x20e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4b      	ldr	r2, [pc, #300]	@ (8001748 <HAL_GPIO_Init+0x330>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_GPIO_Init+0x20a>
 800161e:	2307      	movs	r3, #7
 8001620:	e00e      	b.n	8001640 <HAL_GPIO_Init+0x228>
 8001622:	2308      	movs	r3, #8
 8001624:	e00c      	b.n	8001640 <HAL_GPIO_Init+0x228>
 8001626:	2306      	movs	r3, #6
 8001628:	e00a      	b.n	8001640 <HAL_GPIO_Init+0x228>
 800162a:	2305      	movs	r3, #5
 800162c:	e008      	b.n	8001640 <HAL_GPIO_Init+0x228>
 800162e:	2304      	movs	r3, #4
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x228>
 8001632:	2303      	movs	r3, #3
 8001634:	e004      	b.n	8001640 <HAL_GPIO_Init+0x228>
 8001636:	2302      	movs	r3, #2
 8001638:	e002      	b.n	8001640 <HAL_GPIO_Init+0x228>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_GPIO_Init+0x228>
 800163e:	2300      	movs	r3, #0
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	f002 0203 	and.w	r2, r2, #3
 8001646:	0092      	lsls	r2, r2, #2
 8001648:	4093      	lsls	r3, r2
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001650:	4935      	ldr	r1, [pc, #212]	@ (8001728 <HAL_GPIO_Init+0x310>)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800165e:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <HAL_GPIO_Init+0x334>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001682:	4a32      	ldr	r2, [pc, #200]	@ (800174c <HAL_GPIO_Init+0x334>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001688:	4b30      	ldr	r3, [pc, #192]	@ (800174c <HAL_GPIO_Init+0x334>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016ac:	4a27      	ldr	r2, [pc, #156]	@ (800174c <HAL_GPIO_Init+0x334>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016b2:	4b26      	ldr	r3, [pc, #152]	@ (800174c <HAL_GPIO_Init+0x334>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016d6:	4a1d      	ldr	r2, [pc, #116]	@ (800174c <HAL_GPIO_Init+0x334>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <HAL_GPIO_Init+0x334>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001700:	4a12      	ldr	r2, [pc, #72]	@ (800174c <HAL_GPIO_Init+0x334>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3301      	adds	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	2b0f      	cmp	r3, #15
 8001710:	f67f ae90 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3724      	adds	r7, #36	@ 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40013800 	.word	0x40013800
 800172c:	40020000 	.word	0x40020000
 8001730:	40020400 	.word	0x40020400
 8001734:	40020800 	.word	0x40020800
 8001738:	40020c00 	.word	0x40020c00
 800173c:	40021000 	.word	0x40021000
 8001740:	40021400 	.word	0x40021400
 8001744:	40021800 	.word	0x40021800
 8001748:	40021c00 	.word	0x40021c00
 800174c:	40013c00 	.word	0x40013c00

08001750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
 800175c:	4613      	mov	r3, r2
 800175e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001760:	787b      	ldrb	r3, [r7, #1]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800176c:	e003      	b.n	8001776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	041a      	lsls	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4013      	ands	r3, r2
 800179a:	041a      	lsls	r2, r3, #16
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	43d9      	mvns	r1, r3
 80017a0:	887b      	ldrh	r3, [r7, #2]
 80017a2:	400b      	ands	r3, r1
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	619a      	str	r2, [r3, #24]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017c2:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f97a 	bl	8000ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40013c00 	.word	0x40013c00

080017e8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e059      	b.n	80018ae <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d106      	bne.n	800181a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f007 ff4f 	bl	80096b8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2203      	movs	r2, #3
 800181e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001828:	d102      	bne.n	8001830 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f004 fd5c 	bl	80062f2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7c1a      	ldrb	r2, [r3, #16]
 8001842:	f88d 2000 	strb.w	r2, [sp]
 8001846:	3304      	adds	r3, #4
 8001848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184a:	f004 fcdd 	bl	8006208 <USB_CoreInit>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e026      	b.n	80018ae <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	4618      	mov	r0, r3
 8001868:	f004 fd54 	bl	8006314 <USB_SetCurrentMode>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2202      	movs	r2, #2
 8001876:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e017      	b.n	80018ae <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7c1a      	ldrb	r2, [r3, #16]
 8001886:	f88d 2000 	strb.w	r2, [sp]
 800188a:	3304      	adds	r3, #4
 800188c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800188e:	f004 fefd 	bl	800668c <USB_HostInit>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e004      	b.n	80018ae <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80018b6:	b590      	push	{r4, r7, lr}
 80018b8:	b08b      	sub	sp, #44	@ 0x2c
 80018ba:	af04      	add	r7, sp, #16
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	4608      	mov	r0, r1
 80018c0:	4611      	mov	r1, r2
 80018c2:	461a      	mov	r2, r3
 80018c4:	4603      	mov	r3, r0
 80018c6:	70fb      	strb	r3, [r7, #3]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70bb      	strb	r3, [r7, #2]
 80018cc:	4613      	mov	r3, r2
 80018ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80018d0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80018d2:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_HCD_HC_Init+0x2c>
 80018de:	2302      	movs	r3, #2
 80018e0:	e09d      	b.n	8001a1e <HAL_HCD_HC_Init+0x168>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3319      	adds	r3, #25
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	3314      	adds	r3, #20
 800190e:	787a      	ldrb	r2, [r7, #1]
 8001910:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	3315      	adds	r3, #21
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001926:	78fa      	ldrb	r2, [r7, #3]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	3326      	adds	r3, #38	@ 0x26
 8001936:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800193a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	78bb      	ldrb	r3, [r7, #2]
 8001940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	3316      	adds	r3, #22
 8001954:	4602      	mov	r2, r0
 8001956:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fbc7 	bl	80020f0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001962:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001966:	2b00      	cmp	r3, #0
 8001968:	da0a      	bge.n	8001980 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	3317      	adds	r3, #23
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	e009      	b.n	8001994 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	3317      	adds	r3, #23
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f004 ffdb 	bl	8006954 <USB_GetHostSpeed>
 800199e:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80019a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d10b      	bne.n	80019c0 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80019a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d107      	bne.n	80019c0 <HAL_HCD_HC_Init+0x10a>
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d104      	bne.n	80019c0 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2bbc      	cmp	r3, #188	@ 0xbc
 80019ba:	d901      	bls.n	80019c0 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80019bc:	23bc      	movs	r3, #188	@ 0xbc
 80019be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	3318      	adds	r3, #24
 80019d0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80019d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	b298      	uxth	r0, r3
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	3328      	adds	r3, #40	@ 0x28
 80019ea:	4602      	mov	r2, r0
 80019ec:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	787c      	ldrb	r4, [r7, #1]
 80019f8:	78ba      	ldrb	r2, [r7, #2]
 80019fa:	78f9      	ldrb	r1, [r7, #3]
 80019fc:	9302      	str	r3, [sp, #8]
 80019fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	4623      	mov	r3, r4
 8001a0c:	f004 ffca 	bl	80069a4 <USB_HC_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd90      	pop	{r4, r7, pc}

08001a26 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_HCD_HC_Halt+0x1e>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e00f      	b.n	8001a64 <HAL_HCD_HC_Halt+0x3e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f005 fb5c 	bl	8007112 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	4608      	mov	r0, r1
 8001a76:	4611      	mov	r1, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	70fb      	strb	r3, [r7, #3]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	70bb      	strb	r3, [r7, #2]
 8001a82:	4613      	mov	r3, r2
 8001a84:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a86:	78fa      	ldrb	r2, [r7, #3]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	3317      	adds	r3, #23
 8001a96:	78ba      	ldrb	r2, [r7, #2]
 8001a98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3326      	adds	r3, #38	@ 0x26
 8001aaa:	787a      	ldrb	r2, [r7, #1]
 8001aac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001aae:	7c3b      	ldrb	r3, [r7, #16]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d114      	bne.n	8001ade <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	332a      	adds	r3, #42	@ 0x2a
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3319      	adds	r3, #25
 8001ad8:	7f3a      	ldrb	r2, [r7, #28]
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	e009      	b.n	8001af2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	1a9b      	subs	r3, r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	332a      	adds	r3, #42	@ 0x2a
 8001aee:	2202      	movs	r2, #2
 8001af0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001af2:	787b      	ldrb	r3, [r7, #1]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	f200 8102 	bhi.w	8001cfe <HAL_HCD_HC_SubmitRequest+0x292>
 8001afa:	a201      	add	r2, pc, #4	@ (adr r2, 8001b00 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b00:	08001b11 	.word	0x08001b11
 8001b04:	08001ce9 	.word	0x08001ce9
 8001b08:	08001bd5 	.word	0x08001bd5
 8001b0c:	08001c5f 	.word	0x08001c5f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001b10:	7c3b      	ldrb	r3, [r7, #16]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	f040 80f5 	bne.w	8001d02 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001b18:	78bb      	ldrb	r3, [r7, #2]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d12d      	bne.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001b1e:	8b3b      	ldrh	r3, [r7, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001b24:	78fa      	ldrb	r2, [r7, #3]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	333d      	adds	r3, #61	@ 0x3d
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	333d      	adds	r3, #61	@ 0x3d
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10a      	bne.n	8001b64 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	332a      	adds	r3, #42	@ 0x2a
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001b62:	e0ce      	b.n	8001d02 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	332a      	adds	r3, #42	@ 0x2a
 8001b74:	2202      	movs	r2, #2
 8001b76:	701a      	strb	r2, [r3, #0]
      break;
 8001b78:	e0c3      	b.n	8001d02 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001b7a:	78fa      	ldrb	r2, [r7, #3]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	331a      	adds	r3, #26
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	f040 80b8 	bne.w	8001d02 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b92:	78fa      	ldrb	r2, [r7, #3]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	333c      	adds	r3, #60	@ 0x3c
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10a      	bne.n	8001bbe <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	332a      	adds	r3, #42	@ 0x2a
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
      break;
 8001bbc:	e0a1      	b.n	8001d02 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	1a9b      	subs	r3, r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	332a      	adds	r3, #42	@ 0x2a
 8001bce:	2202      	movs	r2, #2
 8001bd0:	701a      	strb	r2, [r3, #0]
      break;
 8001bd2:	e096      	b.n	8001d02 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bd4:	78bb      	ldrb	r3, [r7, #2]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d120      	bne.n	8001c1c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bda:	78fa      	ldrb	r2, [r7, #3]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	333d      	adds	r3, #61	@ 0x3d
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10a      	bne.n	8001c06 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	332a      	adds	r3, #42	@ 0x2a
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c04:	e07e      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	332a      	adds	r3, #42	@ 0x2a
 8001c16:	2202      	movs	r2, #2
 8001c18:	701a      	strb	r2, [r3, #0]
      break;
 8001c1a:	e073      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c1c:	78fa      	ldrb	r2, [r7, #3]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	333c      	adds	r3, #60	@ 0x3c
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10a      	bne.n	8001c48 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	332a      	adds	r3, #42	@ 0x2a
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
      break;
 8001c46:	e05d      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	332a      	adds	r3, #42	@ 0x2a
 8001c58:	2202      	movs	r2, #2
 8001c5a:	701a      	strb	r2, [r3, #0]
      break;
 8001c5c:	e052      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c5e:	78bb      	ldrb	r3, [r7, #2]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d120      	bne.n	8001ca6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	333d      	adds	r3, #61	@ 0x3d
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10a      	bne.n	8001c90 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c7a:	78fa      	ldrb	r2, [r7, #3]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	332a      	adds	r3, #42	@ 0x2a
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c8e:	e039      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	332a      	adds	r3, #42	@ 0x2a
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	701a      	strb	r2, [r3, #0]
      break;
 8001ca4:	e02e      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	333c      	adds	r3, #60	@ 0x3c
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10a      	bne.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cbc:	78fa      	ldrb	r2, [r7, #3]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	332a      	adds	r3, #42	@ 0x2a
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
      break;
 8001cd0:	e018      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	332a      	adds	r3, #42	@ 0x2a
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	701a      	strb	r2, [r3, #0]
      break;
 8001ce6:	e00d      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	332a      	adds	r3, #42	@ 0x2a
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
      break;
 8001cfc:	e002      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001cfe:	bf00      	nop
 8001d00:	e000      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001d02:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	332c      	adds	r3, #44	@ 0x2c
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	8b39      	ldrh	r1, [r7, #24]
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4403      	add	r3, r0
 8001d28:	3334      	adds	r3, #52	@ 0x34
 8001d2a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d2c:	78fa      	ldrb	r2, [r7, #3]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	334c      	adds	r3, #76	@ 0x4c
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3338      	adds	r3, #56	@ 0x38
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d54:	78fa      	ldrb	r2, [r7, #3]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	3315      	adds	r3, #21
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	334d      	adds	r3, #77	@ 0x4d
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	4613      	mov	r3, r2
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	1a9b      	subs	r3, r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	3310      	adds	r3, #16
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	4413      	add	r3, r2
 8001d90:	1d19      	adds	r1, r3, #4
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	799b      	ldrb	r3, [r3, #6]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f004 ff30 	bl	8006bfc <USB_HC_StartXfer>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop

08001da8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f004 fc1e 	bl	8006600 <USB_GetMode>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	f040 80fb 	bne.w	8001fc2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f004 fbe1 	bl	8006598 <USB_ReadInterrupts>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 80f1 	beq.w	8001fc0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f004 fbd8 	bl	8006598 <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001df2:	d104      	bne.n	8001dfe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001dfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 fbc8 	bl	8006598 <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e12:	d104      	bne.n	8001e1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 fbb8 	bl	8006598 <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001e32:	d104      	bne.n	8001e3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 fba8 	bl	8006598 <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d103      	bne.n	8001e5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2202      	movs	r2, #2
 8001e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 fb9a 	bl	8006598 <USB_ReadInterrupts>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e6e:	d120      	bne.n	8001eb2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001e78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d113      	bne.n	8001eb2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	6938      	ldr	r0, [r7, #16]
 8001e8e:	f004 fa8d 	bl	80063ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e92:	6938      	ldr	r0, [r7, #16]
 8001e94:	f004 fabc 	bl	8006410 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7a5b      	ldrb	r3, [r3, #9]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d105      	bne.n	8001eac <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f004 fcb4 	bl	8006814 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f007 fc81 	bl	80097b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 fb6e 	bl	8006598 <USB_ReadInterrupts>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ec2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec6:	d102      	bne.n	8001ece <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f001 fd4d 	bl	8003968 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f004 fb60 	bl	8006598 <USB_ReadInterrupts>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d106      	bne.n	8001ef0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f007 fc4a 	bl	800977c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2208      	movs	r2, #8
 8001eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f004 fb4f 	bl	8006598 <USB_ReadInterrupts>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f04:	d139      	bne.n	8001f7a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f005 f8f0 	bl	80070f0 <USB_HC_ReadInterrupt>
 8001f10:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e025      	b.n	8001f64 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d018      	beq.n	8001f5e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f42:	d106      	bne.n	8001f52 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	4619      	mov	r1, r3
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f905 	bl	800215a <HCD_HC_IN_IRQHandler>
 8001f50:	e005      	b.n	8001f5e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	4619      	mov	r1, r3
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 ff67 	bl	8002e2c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	795b      	ldrb	r3, [r3, #5]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d3d3      	bcc.n	8001f18 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 fb0a 	bl	8006598 <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d101      	bne.n	8001f92 <HAL_HCD_IRQHandler+0x1ea>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_HCD_IRQHandler+0x1ec>
 8001f92:	2300      	movs	r3, #0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d014      	beq.n	8001fc2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0210 	bic.w	r2, r2, #16
 8001fa6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f001 fbfe 	bl	80037aa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699a      	ldr	r2, [r3, #24]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0210 	orr.w	r2, r2, #16
 8001fbc:	619a      	str	r2, [r3, #24]
 8001fbe:	e000      	b.n	8001fc2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001fc0:	bf00      	nop
    }
  }
}
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_HCD_Start+0x16>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e013      	b.n	8002006 <HAL_HCD_Start+0x3e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2101      	movs	r1, #1
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 fc78 	bl	80068e2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 f96a 	bl	80062d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_HCD_Stop+0x16>
 8002020:	2302      	movs	r3, #2
 8002022:	e00d      	b.n	8002040 <HAL_HCD_Stop+0x32>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f005 f9cb 	bl	80073cc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f004 fc1a 	bl	800688e <USB_ResetPort>
 800205a:	4603      	mov	r3, r0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	334c      	adds	r3, #76	@ 0x4c
 8002080:	781b      	ldrb	r3, [r3, #0]
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	3338      	adds	r3, #56	@ 0x38
 80020aa:	681b      	ldr	r3, [r3, #0]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f004 fc5c 	bl	8006982 <USB_GetCurrentFrame>
 80020ca:	4603      	mov	r3, r0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 fc37 	bl	8006954 <USB_GetHostSpeed>
 80020e6:	4603      	mov	r3, r0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	331a      	adds	r3, #26
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	331b      	adds	r3, #27
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	3325      	adds	r3, #37	@ 0x25
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	3324      	adds	r3, #36	@ 0x24
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	460b      	mov	r3, r1
 8002164:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f004 fa20 	bl	80065be <USB_ReadChInterrupts>
 800217e:	4603      	mov	r3, r0
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b04      	cmp	r3, #4
 8002186:	d11a      	bne.n	80021be <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002194:	461a      	mov	r2, r3
 8002196:	2304      	movs	r3, #4
 8002198:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	334d      	adds	r3, #77	@ 0x4d
 80021aa:	2207      	movs	r2, #7
 80021ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 ffab 	bl	8007112 <USB_HC_Halt>
 80021bc:	e09e      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f004 f9f9 	bl	80065be <USB_ReadChInterrupts>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021d6:	d11b      	bne.n	8002210 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021e4:	461a      	mov	r2, r3
 80021e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	334d      	adds	r3, #77	@ 0x4d
 80021fc:	2208      	movs	r2, #8
 80021fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f004 ff82 	bl	8007112 <USB_HC_Halt>
 800220e:	e075      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f004 f9d0 	bl	80065be <USB_ReadChInterrupts>
 800221e:	4603      	mov	r3, r0
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b08      	cmp	r3, #8
 8002226:	d11a      	bne.n	800225e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4413      	add	r3, r2
 8002230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002234:	461a      	mov	r2, r3
 8002236:	2308      	movs	r3, #8
 8002238:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	334d      	adds	r3, #77	@ 0x4d
 800224a:	2206      	movs	r2, #6
 800224c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f004 ff5b 	bl	8007112 <USB_HC_Halt>
 800225c:	e04e      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f004 f9a9 	bl	80065be <USB_ReadChInterrupts>
 800226c:	4603      	mov	r3, r0
 800226e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002276:	d11b      	bne.n	80022b0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002284:	461a      	mov	r2, r3
 8002286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800228a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	334d      	adds	r3, #77	@ 0x4d
 800229c:	2209      	movs	r2, #9
 800229e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f004 ff32 	bl	8007112 <USB_HC_Halt>
 80022ae:	e025      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f004 f980 	bl	80065be <USB_ReadChInterrupts>
 80022be:	4603      	mov	r3, r0
 80022c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c4:	2b80      	cmp	r3, #128	@ 0x80
 80022c6:	d119      	bne.n	80022fc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022d4:	461a      	mov	r2, r3
 80022d6:	2380      	movs	r3, #128	@ 0x80
 80022d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	334d      	adds	r3, #77	@ 0x4d
 80022ea:	2207      	movs	r2, #7
 80022ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f004 ff0b 	bl	8007112 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f004 f95a 	bl	80065be <USB_ReadChInterrupts>
 800230a:	4603      	mov	r3, r0
 800230c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002314:	d112      	bne.n	800233c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f004 fef7 	bl	8007112 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4413      	add	r3, r2
 800232c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002330:	461a      	mov	r2, r3
 8002332:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002336:	6093      	str	r3, [r2, #8]
 8002338:	f000 bd75 	b.w	8002e26 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f004 f93a 	bl	80065be <USB_ReadChInterrupts>
 800234a:	4603      	mov	r3, r0
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	f040 8128 	bne.w	80025a6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002362:	461a      	mov	r2, r3
 8002364:	2320      	movs	r3, #32
 8002366:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	331b      	adds	r3, #27
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d119      	bne.n	80023b2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	331b      	adds	r3, #27
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	0151      	lsls	r1, r2, #5
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	440a      	add	r2, r1
 80023a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	799b      	ldrb	r3, [r3, #6]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01b      	beq.n	80023f2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	3330      	adds	r3, #48	@ 0x30
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	1ac9      	subs	r1, r1, r3
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4403      	add	r3, r0
 80023ee:	3338      	adds	r3, #56	@ 0x38
 80023f0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	334d      	adds	r3, #77	@ 0x4d
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	3344      	adds	r3, #68	@ 0x44
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002426:	461a      	mov	r2, r3
 8002428:	2301      	movs	r3, #1
 800242a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	3326      	adds	r3, #38	@ 0x26
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	3326      	adds	r3, #38	@ 0x26
 8002452:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002454:	2b02      	cmp	r3, #2
 8002456:	d110      	bne.n	800247a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f004 fe56 	bl	8007112 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002472:	461a      	mov	r2, r3
 8002474:	2310      	movs	r3, #16
 8002476:	6093      	str	r3, [r2, #8]
 8002478:	e03d      	b.n	80024f6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	3326      	adds	r3, #38	@ 0x26
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d00a      	beq.n	80024a6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	3326      	adds	r3, #38	@ 0x26
 80024a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d127      	bne.n	80024f6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	0151      	lsls	r1, r2, #5
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	440a      	add	r2, r1
 80024bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80024c4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	334c      	adds	r3, #76	@ 0x4c
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	334c      	adds	r3, #76	@ 0x4c
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	4619      	mov	r1, r3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f007 f96d 	bl	80097d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	799b      	ldrb	r3, [r3, #6]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d13b      	bne.n	8002576 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3338      	adds	r3, #56	@ 0x38
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4403      	add	r3, r0
 800251e:	3328      	adds	r3, #40	@ 0x28
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	440b      	add	r3, r1
 8002524:	1e59      	subs	r1, r3, #1
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4403      	add	r3, r0
 8002534:	3328      	adds	r3, #40	@ 0x28
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	fbb1 f3f3 	udiv	r3, r1, r3
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8470 	beq.w	8002e26 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	333c      	adds	r3, #60	@ 0x3c
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	f083 0301 	eor.w	r3, r3, #1
 800255e:	b2d8      	uxtb	r0, r3
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	333c      	adds	r3, #60	@ 0x3c
 800256e:	4602      	mov	r2, r0
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	f000 bc58 	b.w	8002e26 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	333c      	adds	r3, #60	@ 0x3c
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	f083 0301 	eor.w	r3, r3, #1
 800258e:	b2d8      	uxtb	r0, r3
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	333c      	adds	r3, #60	@ 0x3c
 800259e:	4602      	mov	r2, r0
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	f000 bc40 	b.w	8002e26 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f004 f805 	bl	80065be <USB_ReadChInterrupts>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	d131      	bne.n	8002622 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ca:	461a      	mov	r2, r3
 80025cc:	2320      	movs	r3, #32
 80025ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	331a      	adds	r3, #26
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	f040 841f 	bne.w	8002e26 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	331b      	adds	r3, #27
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	334d      	adds	r3, #77	@ 0x4d
 800260c:	2203      	movs	r2, #3
 800260e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f004 fd7a 	bl	8007112 <USB_HC_Halt>
 800261e:	f000 bc02 	b.w	8002e26 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f003 ffc7 	bl	80065be <USB_ReadChInterrupts>
 8002630:	4603      	mov	r3, r0
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b02      	cmp	r3, #2
 8002638:	f040 8305 	bne.w	8002c46 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002648:	461a      	mov	r2, r3
 800264a:	2302      	movs	r3, #2
 800264c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800264e:	78fa      	ldrb	r2, [r7, #3]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	334d      	adds	r3, #77	@ 0x4d
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d114      	bne.n	800268e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	334d      	adds	r3, #77	@ 0x4d
 8002674:	2202      	movs	r2, #2
 8002676:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	334c      	adds	r3, #76	@ 0x4c
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	e2cc      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	334d      	adds	r3, #77	@ 0x4d
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b06      	cmp	r3, #6
 80026a2:	d114      	bne.n	80026ce <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	334d      	adds	r3, #77	@ 0x4d
 80026b4:	2202      	movs	r2, #2
 80026b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	334c      	adds	r3, #76	@ 0x4c
 80026c8:	2205      	movs	r2, #5
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	e2ac      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	334d      	adds	r3, #77	@ 0x4d
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b07      	cmp	r3, #7
 80026e2:	d00b      	beq.n	80026fc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	334d      	adds	r3, #77	@ 0x4d
 80026f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80026f6:	2b09      	cmp	r3, #9
 80026f8:	f040 80a6 	bne.w	8002848 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	334d      	adds	r3, #77	@ 0x4d
 800270c:	2202      	movs	r2, #2
 800270e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	3344      	adds	r3, #68	@ 0x44
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	1c59      	adds	r1, r3, #1
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4403      	add	r3, r0
 8002730:	3344      	adds	r3, #68	@ 0x44
 8002732:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	3344      	adds	r3, #68	@ 0x44
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d943      	bls.n	80027d2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	3344      	adds	r3, #68	@ 0x44
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	331a      	adds	r3, #26
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d123      	bne.n	80027bc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	331b      	adds	r3, #27
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	331c      	adds	r3, #28
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	0151      	lsls	r1, r2, #5
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	440a      	add	r2, r1
 80027b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ba:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	334c      	adds	r3, #76	@ 0x4c
 80027cc:	2204      	movs	r2, #4
 80027ce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027d0:	e229      	b.n	8002c26 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	334c      	adds	r3, #76	@ 0x4c
 80027e2:	2202      	movs	r2, #2
 80027e4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	3326      	adds	r3, #38	@ 0x26
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	3326      	adds	r3, #38	@ 0x26
 800280c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800280e:	2b02      	cmp	r3, #2
 8002810:	f040 8209 	bne.w	8002c26 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800282a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002832:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002840:	461a      	mov	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002846:	e1ee      	b.n	8002c26 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	334d      	adds	r3, #77	@ 0x4d
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b05      	cmp	r3, #5
 800285c:	f040 80c8 	bne.w	80029f0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	334d      	adds	r3, #77	@ 0x4d
 8002870:	2202      	movs	r2, #2
 8002872:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	331b      	adds	r3, #27
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	f040 81ce 	bne.w	8002c28 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	3326      	adds	r3, #38	@ 0x26
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d16b      	bne.n	800297a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	3348      	adds	r3, #72	@ 0x48
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	1c59      	adds	r1, r3, #1
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4403      	add	r3, r0
 80028c2:	3348      	adds	r3, #72	@ 0x48
 80028c4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3348      	adds	r3, #72	@ 0x48
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d943      	bls.n	8002964 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	3348      	adds	r3, #72	@ 0x48
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	331b      	adds	r3, #27
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	3344      	adds	r3, #68	@ 0x44
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d809      	bhi.n	800292e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	331c      	adds	r3, #28
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	0151      	lsls	r1, r2, #5
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	440a      	add	r2, r1
 8002944:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800294c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	334c      	adds	r3, #76	@ 0x4c
 800295e:	2204      	movs	r2, #4
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e014      	b.n	800298e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	334c      	adds	r3, #76	@ 0x4c
 8002974:	2202      	movs	r2, #2
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e009      	b.n	800298e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	334c      	adds	r3, #76	@ 0x4c
 800298a:	2202      	movs	r2, #2
 800298c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	3326      	adds	r3, #38	@ 0x26
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	3326      	adds	r3, #38	@ 0x26
 80029b4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	f040 8136 	bne.w	8002c28 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029d2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029da:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029e8:	461a      	mov	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e11b      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	334d      	adds	r3, #77	@ 0x4d
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	f040 8081 	bne.w	8002b0a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	334d      	adds	r3, #77	@ 0x4d
 8002a18:	2202      	movs	r2, #2
 8002a1a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	331b      	adds	r3, #27
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	f040 80fa 	bne.w	8002c28 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	334c      	adds	r3, #76	@ 0x4c
 8002a44:	2202      	movs	r2, #2
 8002a46:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	0151      	lsls	r1, r2, #5
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	440a      	add	r2, r1
 8002a5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a66:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	0151      	lsls	r1, r2, #5
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	440a      	add	r2, r1
 8002a7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a86:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	0151      	lsls	r1, r2, #5
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	440a      	add	r2, r1
 8002a9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002aa2:	f023 0320 	bic.w	r3, r3, #32
 8002aa6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3326      	adds	r3, #38	@ 0x26
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00b      	beq.n	8002ad6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	3326      	adds	r3, #38	@ 0x26
 8002ace:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	f040 80a9 	bne.w	8002c28 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002aec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002af4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	e08e      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	334d      	adds	r3, #77	@ 0x4d
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d143      	bne.n	8002ba8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	334d      	adds	r3, #77	@ 0x4d
 8002b30:	2202      	movs	r2, #2
 8002b32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	334c      	adds	r3, #76	@ 0x4c
 8002b44:	2202      	movs	r2, #2
 8002b46:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	3326      	adds	r3, #38	@ 0x26
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3326      	adds	r3, #38	@ 0x26
 8002b6e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d159      	bne.n	8002c28 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b8a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b92:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e03f      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	334d      	adds	r3, #77	@ 0x4d
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d126      	bne.n	8002c0c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	334d      	adds	r3, #77	@ 0x4d
 8002bce:	2202      	movs	r2, #2
 8002bd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	3344      	adds	r3, #68	@ 0x44
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1c59      	adds	r1, r3, #1
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4403      	add	r3, r0
 8002bf2:	3344      	adds	r3, #68	@ 0x44
 8002bf4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	334c      	adds	r3, #76	@ 0x4c
 8002c06:	2204      	movs	r2, #4
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e00d      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334d      	adds	r3, #77	@ 0x4d
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	f000 8100 	beq.w	8002e24 <HCD_HC_IN_IRQHandler+0xcca>
 8002c24:	e000      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c26:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	334c      	adds	r3, #76	@ 0x4c
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f006 fdc6 	bl	80097d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c44:	e0ef      	b.n	8002e26 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f003 fcb5 	bl	80065be <USB_ReadChInterrupts>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5a:	2b40      	cmp	r3, #64	@ 0x40
 8002c5c:	d12f      	bne.n	8002cbe <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2340      	movs	r3, #64	@ 0x40
 8002c6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	334d      	adds	r3, #77	@ 0x4d
 8002c80:	2205      	movs	r2, #5
 8002c82:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	331a      	adds	r3, #26
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3344      	adds	r3, #68	@ 0x44
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 fa2b 	bl	8007112 <USB_HC_Halt>
 8002cbc:	e0b3      	b.n	8002e26 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f003 fc79 	bl	80065be <USB_ReadChInterrupts>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b10      	cmp	r3, #16
 8002cd4:	f040 80a7 	bne.w	8002e26 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3326      	adds	r3, #38	@ 0x26
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d11b      	bne.n	8002d26 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3344      	adds	r3, #68	@ 0x44
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	334d      	adds	r3, #77	@ 0x4d
 8002d12:	2204      	movs	r2, #4
 8002d14:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 f9f7 	bl	8007112 <USB_HC_Halt>
 8002d24:	e03f      	b.n	8002da6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	3326      	adds	r3, #38	@ 0x26
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3326      	adds	r3, #38	@ 0x26
 8002d4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d129      	bne.n	8002da6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	3344      	adds	r3, #68	@ 0x44
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	799b      	ldrb	r3, [r3, #6]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HCD_HC_IN_IRQHandler+0xc2a>
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	331b      	adds	r3, #27
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d110      	bne.n	8002da6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	334d      	adds	r3, #77	@ 0x4d
 8002d94:	2204      	movs	r2, #4
 8002d96:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f004 f9b6 	bl	8007112 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	331b      	adds	r3, #27
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d129      	bne.n	8002e10 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	331b      	adds	r3, #27
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	0151      	lsls	r1, r2, #5
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	440a      	add	r2, r1
 8002de6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dee:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	0151      	lsls	r1, r2, #5
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	440a      	add	r2, r1
 8002e06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e0a:	f043 0320 	orr.w	r3, r3, #32
 8002e0e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2310      	movs	r3, #16
 8002e20:	6093      	str	r3, [r2, #8]
 8002e22:	e000      	b.n	8002e26 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002e24:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 fbb7 	bl	80065be <USB_ReadChInterrupts>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d11b      	bne.n	8002e92 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e66:	461a      	mov	r2, r3
 8002e68:	2304      	movs	r3, #4
 8002e6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	334d      	adds	r3, #77	@ 0x4d
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f004 f942 	bl	8007112 <USB_HC_Halt>
 8002e8e:	f000 bc89 	b.w	80037a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 fb8f 	bl	80065be <USB_ReadChInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	f040 8082 	bne.w	8002fb0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2320      	movs	r3, #32
 8002ebc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	3319      	adds	r3, #25
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d124      	bne.n	8002f1e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3319      	adds	r3, #25
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	334c      	adds	r3, #76	@ 0x4c
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	334d      	adds	r3, #77	@ 0x4d
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f004 f8fa 	bl	8007112 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	331a      	adds	r3, #26
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	f040 8437 	bne.w	80037a4 <HCD_HC_OUT_IRQHandler+0x978>
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	331b      	adds	r3, #27
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f040 842b 	bne.w	80037a4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3326      	adds	r3, #38	@ 0x26
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d009      	beq.n	8002f78 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	331b      	adds	r3, #27
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	334d      	adds	r3, #77	@ 0x4d
 8002f88:	2203      	movs	r2, #3
 8002f8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f004 f8bc 	bl	8007112 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3344      	adds	r3, #68	@ 0x44
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e3f9      	b.n	80037a4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 fb00 	bl	80065be <USB_ReadChInterrupts>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc8:	d111      	bne.n	8002fee <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fdc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 f893 	bl	8007112 <USB_HC_Halt>
 8002fec:	e3da      	b.n	80037a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f003 fae1 	bl	80065be <USB_ReadChInterrupts>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b01      	cmp	r3, #1
 8003004:	d168      	bne.n	80030d8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3344      	adds	r3, #68	@ 0x44
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f003 facb 	bl	80065be <USB_ReadChInterrupts>
 8003028:	4603      	mov	r3, r0
 800302a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302e:	2b40      	cmp	r3, #64	@ 0x40
 8003030:	d112      	bne.n	8003058 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3319      	adds	r3, #25
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4413      	add	r3, r2
 800304e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003052:	461a      	mov	r2, r3
 8003054:	2340      	movs	r3, #64	@ 0x40
 8003056:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	331b      	adds	r3, #27
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d019      	beq.n	80030a2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	331b      	adds	r3, #27
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	0151      	lsls	r1, r2, #5
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	440a      	add	r2, r1
 8003098:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800309c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ae:	461a      	mov	r2, r3
 80030b0:	2301      	movs	r3, #1
 80030b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	334d      	adds	r3, #77	@ 0x4d
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f004 f81e 	bl	8007112 <USB_HC_Halt>
 80030d6:	e365      	b.n	80037a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f003 fa6c 	bl	80065be <USB_ReadChInterrupts>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ec:	2b40      	cmp	r3, #64	@ 0x40
 80030ee:	d139      	bne.n	8003164 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	334d      	adds	r3, #77	@ 0x4d
 8003100:	2205      	movs	r2, #5
 8003102:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	331a      	adds	r3, #26
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3319      	adds	r3, #25
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3344      	adds	r3, #68	@ 0x44
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f003 ffe1 	bl	8007112 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800315c:	461a      	mov	r2, r3
 800315e:	2340      	movs	r3, #64	@ 0x40
 8003160:	6093      	str	r3, [r2, #8]
 8003162:	e31f      	b.n	80037a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f003 fa26 	bl	80065be <USB_ReadChInterrupts>
 8003172:	4603      	mov	r3, r0
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b08      	cmp	r3, #8
 800317a:	d11a      	bne.n	80031b2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003188:	461a      	mov	r2, r3
 800318a:	2308      	movs	r3, #8
 800318c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	334d      	adds	r3, #77	@ 0x4d
 800319e:	2206      	movs	r2, #6
 80031a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 ffb1 	bl	8007112 <USB_HC_Halt>
 80031b0:	e2f8      	b.n	80037a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 f9ff 	bl	80065be <USB_ReadChInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b10      	cmp	r3, #16
 80031c8:	d144      	bne.n	8003254 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	3344      	adds	r3, #68	@ 0x44
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	334d      	adds	r3, #77	@ 0x4d
 80031ee:	2204      	movs	r2, #4
 80031f0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3319      	adds	r3, #25
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d114      	bne.n	8003232 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3318      	adds	r3, #24
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3319      	adds	r3, #25
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f003 ff69 	bl	8007112 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800324c:	461a      	mov	r2, r3
 800324e:	2310      	movs	r3, #16
 8003250:	6093      	str	r3, [r2, #8]
 8003252:	e2a7      	b.n	80037a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f003 f9ae 	bl	80065be <USB_ReadChInterrupts>
 8003262:	4603      	mov	r3, r0
 8003264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003268:	2b80      	cmp	r3, #128	@ 0x80
 800326a:	f040 8083 	bne.w	8003374 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	799b      	ldrb	r3, [r3, #6]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d111      	bne.n	800329a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	334d      	adds	r3, #77	@ 0x4d
 8003286:	2207      	movs	r2, #7
 8003288:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f003 ff3d 	bl	8007112 <USB_HC_Halt>
 8003298:	e062      	b.n	8003360 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	3344      	adds	r3, #68	@ 0x44
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	1c59      	adds	r1, r3, #1
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4403      	add	r3, r0
 80032ba:	3344      	adds	r3, #68	@ 0x44
 80032bc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3344      	adds	r3, #68	@ 0x44
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d922      	bls.n	800331a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	3344      	adds	r3, #68	@ 0x44
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	334c      	adds	r3, #76	@ 0x4c
 80032f8:	2204      	movs	r2, #4
 80032fa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334c      	adds	r3, #76	@ 0x4c
 800330c:	781a      	ldrb	r2, [r3, #0]
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	4619      	mov	r1, r3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f006 fa5c 	bl	80097d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003318:	e022      	b.n	8003360 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	334c      	adds	r3, #76	@ 0x4c
 800332a:	2202      	movs	r2, #2
 800332c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003344:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800334c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4413      	add	r3, r2
 8003356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800336c:	461a      	mov	r2, r3
 800336e:	2380      	movs	r3, #128	@ 0x80
 8003370:	6093      	str	r3, [r2, #8]
 8003372:	e217      	b.n	80037a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f003 f91e 	bl	80065be <USB_ReadChInterrupts>
 8003382:	4603      	mov	r3, r0
 8003384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338c:	d11b      	bne.n	80033c6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	334d      	adds	r3, #77	@ 0x4d
 800339e:	2209      	movs	r2, #9
 80033a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 feb1 	bl	8007112 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033bc:	461a      	mov	r2, r3
 80033be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033c2:	6093      	str	r3, [r2, #8]
 80033c4:	e1ee      	b.n	80037a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 f8f5 	bl	80065be <USB_ReadChInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	f040 81df 	bne.w	800379e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ec:	461a      	mov	r2, r3
 80033ee:	2302      	movs	r3, #2
 80033f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	334d      	adds	r3, #77	@ 0x4d
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b01      	cmp	r3, #1
 8003406:	f040 8093 	bne.w	8003530 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	334d      	adds	r3, #77	@ 0x4d
 800341a:	2202      	movs	r2, #2
 800341c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	334c      	adds	r3, #76	@ 0x4c
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	3326      	adds	r3, #38	@ 0x26
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d00b      	beq.n	8003460 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	3326      	adds	r3, #38	@ 0x26
 8003458:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800345a:	2b03      	cmp	r3, #3
 800345c:	f040 8190 	bne.w	8003780 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	799b      	ldrb	r3, [r3, #6]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d115      	bne.n	8003494 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	333d      	adds	r3, #61	@ 0x3d
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	f083 0301 	eor.w	r3, r3, #1
 8003480:	b2d8      	uxtb	r0, r3
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	333d      	adds	r3, #61	@ 0x3d
 8003490:	4602      	mov	r2, r0
 8003492:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	799b      	ldrb	r3, [r3, #6]
 8003498:	2b01      	cmp	r3, #1
 800349a:	f040 8171 	bne.w	8003780 <HCD_HC_OUT_IRQHandler+0x954>
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	3334      	adds	r3, #52	@ 0x34
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 8165 	beq.w	8003780 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	3334      	adds	r3, #52	@ 0x34
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4403      	add	r3, r0
 80034d6:	3328      	adds	r3, #40	@ 0x28
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	440b      	add	r3, r1
 80034dc:	1e59      	subs	r1, r3, #1
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4403      	add	r3, r0
 80034ec:	3328      	adds	r3, #40	@ 0x28
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 813f 	beq.w	8003780 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	333d      	adds	r3, #61	@ 0x3d
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	f083 0301 	eor.w	r3, r3, #1
 800351a:	b2d8      	uxtb	r0, r3
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	333d      	adds	r3, #61	@ 0x3d
 800352a:	4602      	mov	r2, r0
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e127      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	334d      	adds	r3, #77	@ 0x4d
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b03      	cmp	r3, #3
 8003544:	d120      	bne.n	8003588 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	334d      	adds	r3, #77	@ 0x4d
 8003556:	2202      	movs	r2, #2
 8003558:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	331b      	adds	r3, #27
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	f040 8107 	bne.w	8003780 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	334c      	adds	r3, #76	@ 0x4c
 8003582:	2202      	movs	r2, #2
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e0fb      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	334d      	adds	r3, #77	@ 0x4d
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b04      	cmp	r3, #4
 800359c:	d13a      	bne.n	8003614 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	334d      	adds	r3, #77	@ 0x4d
 80035ae:	2202      	movs	r2, #2
 80035b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	334c      	adds	r3, #76	@ 0x4c
 80035c2:	2202      	movs	r2, #2
 80035c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	331b      	adds	r3, #27
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f040 80d1 	bne.w	8003780 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	331b      	adds	r3, #27
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	0151      	lsls	r1, r2, #5
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	440a      	add	r2, r1
 8003608:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800360c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003610:	6053      	str	r3, [r2, #4]
 8003612:	e0b5      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	334d      	adds	r3, #77	@ 0x4d
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b05      	cmp	r3, #5
 8003628:	d114      	bne.n	8003654 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	334d      	adds	r3, #77	@ 0x4d
 800363a:	2202      	movs	r2, #2
 800363c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	334c      	adds	r3, #76	@ 0x4c
 800364e:	2202      	movs	r2, #2
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	e095      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	334d      	adds	r3, #77	@ 0x4d
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b06      	cmp	r3, #6
 8003668:	d114      	bne.n	8003694 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	334d      	adds	r3, #77	@ 0x4d
 800367a:	2202      	movs	r2, #2
 800367c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	334c      	adds	r3, #76	@ 0x4c
 800368e:	2205      	movs	r2, #5
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e075      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	334d      	adds	r3, #77	@ 0x4d
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b07      	cmp	r3, #7
 80036a8:	d00a      	beq.n	80036c0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	334d      	adds	r3, #77	@ 0x4d
 80036ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036bc:	2b09      	cmp	r3, #9
 80036be:	d170      	bne.n	80037a2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	334d      	adds	r3, #77	@ 0x4d
 80036d0:	2202      	movs	r2, #2
 80036d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	3344      	adds	r3, #68	@ 0x44
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	1c59      	adds	r1, r3, #1
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4403      	add	r3, r0
 80036f4:	3344      	adds	r3, #68	@ 0x44
 80036f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036f8:	78fa      	ldrb	r2, [r7, #3]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	3344      	adds	r3, #68	@ 0x44
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d914      	bls.n	8003738 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	3344      	adds	r3, #68	@ 0x44
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	334c      	adds	r3, #76	@ 0x4c
 8003732:	2204      	movs	r2, #4
 8003734:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003736:	e022      	b.n	800377e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	334c      	adds	r3, #76	@ 0x4c
 8003748:	2202      	movs	r2, #2
 800374a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003762:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800376a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003778:	461a      	mov	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800377e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	334c      	adds	r3, #76	@ 0x4c
 8003790:	781a      	ldrb	r2, [r3, #0]
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	4619      	mov	r1, r3
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f006 f81a 	bl	80097d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800379c:	e002      	b.n	80037a4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800379e:	bf00      	nop
 80037a0:	e000      	b.n	80037a4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80037a2:	bf00      	nop
  }
}
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b08a      	sub	sp, #40	@ 0x28
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	0c5b      	lsrs	r3, r3, #17
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037de:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d004      	beq.n	80037f0 <HCD_RXQLVL_IRQHandler+0x46>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b05      	cmp	r3, #5
 80037ea:	f000 80b6 	beq.w	800395a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037ee:	e0b7      	b.n	8003960 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 80b3 	beq.w	800395e <HCD_RXQLVL_IRQHandler+0x1b4>
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	332c      	adds	r3, #44	@ 0x2c
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80a7 	beq.w	800395e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	3338      	adds	r3, #56	@ 0x38
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	18d1      	adds	r1, r2, r3
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4403      	add	r3, r0
 8003834:	3334      	adds	r3, #52	@ 0x34
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4299      	cmp	r1, r3
 800383a:	f200 8083 	bhi.w	8003944 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	332c      	adds	r3, #44	@ 0x2c
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	b292      	uxth	r2, r2
 8003858:	4619      	mov	r1, r3
 800385a:	f002 fe45 	bl	80064e8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	332c      	adds	r3, #44	@ 0x2c
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	18d1      	adds	r1, r2, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4613      	mov	r3, r2
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4403      	add	r3, r0
 8003882:	332c      	adds	r3, #44	@ 0x2c
 8003884:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3338      	adds	r3, #56	@ 0x38
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	18d1      	adds	r1, r2, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4403      	add	r3, r0
 80038aa:	3338      	adds	r3, #56	@ 0x38
 80038ac:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	0cdb      	lsrs	r3, r3, #19
 80038be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3328      	adds	r3, #40	@ 0x28
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4293      	cmp	r3, r2
 80038dc:	d13f      	bne.n	800395e <HCD_RXQLVL_IRQHandler+0x1b4>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d03c      	beq.n	800395e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038fa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003902:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003910:	461a      	mov	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	333c      	adds	r3, #60	@ 0x3c
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	f083 0301 	eor.w	r3, r3, #1
 800392c:	b2d8      	uxtb	r0, r3
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	333c      	adds	r3, #60	@ 0x3c
 800393e:	4602      	mov	r2, r0
 8003940:	701a      	strb	r2, [r3, #0]
      break;
 8003942:	e00c      	b.n	800395e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	334c      	adds	r3, #76	@ 0x4c
 8003954:	2204      	movs	r2, #4
 8003956:	701a      	strb	r2, [r3, #0]
      break;
 8003958:	e001      	b.n	800395e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800395e:	bf00      	nop
  }
}
 8003960:	bf00      	nop
 8003962:	3728      	adds	r7, #40	@ 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003994:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b02      	cmp	r3, #2
 800399e:	d10b      	bne.n	80039b8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d102      	bne.n	80039b0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f005 fef4 	bl	8009798 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f043 0302 	orr.w	r3, r3, #2
 80039b6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d132      	bne.n	8003a28 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f043 0308 	orr.w	r3, r3, #8
 80039c8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d126      	bne.n	8003a22 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7a5b      	ldrb	r3, [r3, #9]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d113      	bne.n	8003a04 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80039e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039e6:	d106      	bne.n	80039f6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2102      	movs	r1, #2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f002 ff10 	bl	8006814 <USB_InitFSLSPClkSel>
 80039f4:	e011      	b.n	8003a1a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2101      	movs	r1, #1
 80039fc:	4618      	mov	r0, r3
 80039fe:	f002 ff09 	bl	8006814 <USB_InitFSLSPClkSel>
 8003a02:	e00a      	b.n	8003a1a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	79db      	ldrb	r3, [r3, #7]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d106      	bne.n	8003a1a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a12:	461a      	mov	r2, r3
 8003a14:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003a18:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f005 fee6 	bl	80097ec <HAL_HCD_PortEnabled_Callback>
 8003a20:	e002      	b.n	8003a28 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f005 fef0 	bl	8009808 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d103      	bne.n	8003a3a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f043 0320 	orr.w	r3, r3, #32
 8003a38:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a40:	461a      	mov	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	6013      	str	r3, [r2, #0]
}
 8003a46:	bf00      	nop
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e12b      	b.n	8003cba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fd f868 	bl	8000b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	@ 0x24
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ab4:	f001 fa20 	bl	8004ef8 <HAL_RCC_GetPCLK1Freq>
 8003ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4a81      	ldr	r2, [pc, #516]	@ (8003cc4 <HAL_I2C_Init+0x274>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d807      	bhi.n	8003ad4 <HAL_I2C_Init+0x84>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a80      	ldr	r2, [pc, #512]	@ (8003cc8 <HAL_I2C_Init+0x278>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bf94      	ite	ls
 8003acc:	2301      	movls	r3, #1
 8003ace:	2300      	movhi	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e006      	b.n	8003ae2 <HAL_I2C_Init+0x92>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4a7d      	ldr	r2, [pc, #500]	@ (8003ccc <HAL_I2C_Init+0x27c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	bf94      	ite	ls
 8003adc:	2301      	movls	r3, #1
 8003ade:	2300      	movhi	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0e7      	b.n	8003cba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4a78      	ldr	r2, [pc, #480]	@ (8003cd0 <HAL_I2C_Init+0x280>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0c9b      	lsrs	r3, r3, #18
 8003af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4a6a      	ldr	r2, [pc, #424]	@ (8003cc4 <HAL_I2C_Init+0x274>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d802      	bhi.n	8003b24 <HAL_I2C_Init+0xd4>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	3301      	adds	r3, #1
 8003b22:	e009      	b.n	8003b38 <HAL_I2C_Init+0xe8>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	4a69      	ldr	r2, [pc, #420]	@ (8003cd4 <HAL_I2C_Init+0x284>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	3301      	adds	r3, #1
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	495c      	ldr	r1, [pc, #368]	@ (8003cc4 <HAL_I2C_Init+0x274>)
 8003b54:	428b      	cmp	r3, r1
 8003b56:	d819      	bhi.n	8003b8c <HAL_I2C_Init+0x13c>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	1e59      	subs	r1, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b66:	1c59      	adds	r1, r3, #1
 8003b68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_I2C_Init+0x138>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1e59      	subs	r1, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b86:	e051      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	e04f      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d111      	bne.n	8003bb8 <HAL_I2C_Init+0x168>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e58      	subs	r0, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	440b      	add	r3, r1
 8003ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e012      	b.n	8003bde <HAL_I2C_Init+0x18e>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1e58      	subs	r0, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	0099      	lsls	r1, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Init+0x196>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e022      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10e      	bne.n	8003c0c <HAL_I2C_Init+0x1bc>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1e58      	subs	r0, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6859      	ldr	r1, [r3, #4]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	440b      	add	r3, r1
 8003bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c00:	3301      	adds	r3, #1
 8003c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c0a:	e00f      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1e58      	subs	r0, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	0099      	lsls	r1, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c22:	3301      	adds	r3, #1
 8003c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	6809      	ldr	r1, [r1, #0]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6911      	ldr	r1, [r2, #16]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68d2      	ldr	r2, [r2, #12]
 8003c66:	4311      	orrs	r1, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	000186a0 	.word	0x000186a0
 8003cc8:	001e847f 	.word	0x001e847f
 8003ccc:	003d08ff 	.word	0x003d08ff
 8003cd0:	431bde83 	.word	0x431bde83
 8003cd4:	10624dd3 	.word	0x10624dd3

08003cd8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e128      	b.n	8003f3c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a90      	ldr	r2, [pc, #576]	@ (8003f44 <HAL_I2S_Init+0x26c>)
 8003d02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7fc ff69 	bl	8000bdc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d20:	f023 030f 	bic.w	r3, r3, #15
 8003d24:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d060      	beq.n	8003df8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d3e:	2310      	movs	r3, #16
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	e001      	b.n	8003d48 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d44:	2320      	movs	r3, #32
 8003d46:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d802      	bhi.n	8003d56 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d56:	2001      	movs	r0, #1
 8003d58:	f001 f9d8 	bl	800510c <HAL_RCCEx_GetPeriphCLKFreq>
 8003d5c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d66:	d125      	bne.n	8003db4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d010      	beq.n	8003d92 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	461a      	mov	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	3305      	adds	r3, #5
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	e01f      	b.n	8003dd2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	461a      	mov	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	3305      	adds	r3, #5
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	e00e      	b.n	8003dd2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dce:	3305      	adds	r3, #5
 8003dd0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4a5c      	ldr	r2, [pc, #368]	@ (8003f48 <HAL_I2S_Init+0x270>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	e003      	b.n	8003e00 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d902      	bls.n	8003e0c <HAL_I2S_Init+0x134>
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	2bff      	cmp	r3, #255	@ 0xff
 8003e0a:	d907      	bls.n	8003e1c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e10:	f043 0210 	orr.w	r2, r3, #16
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e08f      	b.n	8003f3c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	ea42 0103 	orr.w	r1, r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e3a:	f023 030f 	bic.w	r3, r3, #15
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6851      	ldr	r1, [r2, #4]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6892      	ldr	r2, [r2, #8]
 8003e46:	4311      	orrs	r1, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	68d2      	ldr	r2, [r2, #12]
 8003e4c:	4311      	orrs	r1, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6992      	ldr	r2, [r2, #24]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e5e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d161      	bne.n	8003f2c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a38      	ldr	r2, [pc, #224]	@ (8003f4c <HAL_I2S_Init+0x274>)
 8003e6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a37      	ldr	r2, [pc, #220]	@ (8003f50 <HAL_I2S_Init+0x278>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d101      	bne.n	8003e7c <HAL_I2S_Init+0x1a4>
 8003e78:	4b36      	ldr	r3, [pc, #216]	@ (8003f54 <HAL_I2S_Init+0x27c>)
 8003e7a:	e001      	b.n	8003e80 <HAL_I2S_Init+0x1a8>
 8003e7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	4932      	ldr	r1, [pc, #200]	@ (8003f50 <HAL_I2S_Init+0x278>)
 8003e88:	428a      	cmp	r2, r1
 8003e8a:	d101      	bne.n	8003e90 <HAL_I2S_Init+0x1b8>
 8003e8c:	4a31      	ldr	r2, [pc, #196]	@ (8003f54 <HAL_I2S_Init+0x27c>)
 8003e8e:	e001      	b.n	8003e94 <HAL_I2S_Init+0x1bc>
 8003e90:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003e94:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e98:	f023 030f 	bic.w	r3, r3, #15
 8003e9c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8003f50 <HAL_I2S_Init+0x278>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d101      	bne.n	8003eac <HAL_I2S_Init+0x1d4>
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f54 <HAL_I2S_Init+0x27c>)
 8003eaa:	e001      	b.n	8003eb0 <HAL_I2S_Init+0x1d8>
 8003eac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a25      	ldr	r2, [pc, #148]	@ (8003f50 <HAL_I2S_Init+0x278>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <HAL_I2S_Init+0x1ea>
 8003ebe:	4b25      	ldr	r3, [pc, #148]	@ (8003f54 <HAL_I2S_Init+0x27c>)
 8003ec0:	e001      	b.n	8003ec6 <HAL_I2S_Init+0x1ee>
 8003ec2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ed2:	d003      	beq.n	8003edc <HAL_I2S_Init+0x204>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d103      	bne.n	8003ee4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003edc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	e001      	b.n	8003ee8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003efc:	4313      	orrs	r3, r2
 8003efe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f06:	4313      	orrs	r3, r2
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	897b      	ldrh	r3, [r7, #10]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f14:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003f50 <HAL_I2S_Init+0x278>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <HAL_I2S_Init+0x24c>
 8003f20:	4b0c      	ldr	r3, [pc, #48]	@ (8003f54 <HAL_I2S_Init+0x27c>)
 8003f22:	e001      	b.n	8003f28 <HAL_I2S_Init+0x250>
 8003f24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f28:	897a      	ldrh	r2, [r7, #10]
 8003f2a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	0800404f 	.word	0x0800404f
 8003f48:	cccccccd 	.word	0xcccccccd
 8003f4c:	08004165 	.word	0x08004165
 8003f50:	40003800 	.word	0x40003800
 8003f54:	40003400 	.word	0x40003400

08003f58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	881a      	ldrh	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	1c9a      	adds	r2, r3, #2
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10e      	bne.n	8003fe8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fd8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ffb8 	bl	8003f58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	b292      	uxth	r2, r2
 8004004:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	1c9a      	adds	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10e      	bne.n	8004046 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004036:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ff93 	bl	8003f6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b086      	sub	sp, #24
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b04      	cmp	r3, #4
 8004068:	d13a      	bne.n	80040e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	d109      	bne.n	8004088 <I2S_IRQHandler+0x3a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407e:	2b40      	cmp	r3, #64	@ 0x40
 8004080:	d102      	bne.n	8004088 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff ffb4 	bl	8003ff0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408e:	2b40      	cmp	r3, #64	@ 0x40
 8004090:	d126      	bne.n	80040e0 <I2S_IRQHandler+0x92>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b20      	cmp	r3, #32
 800409e:	d11f      	bne.n	80040e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	f043 0202 	orr.w	r2, r3, #2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff ff50 	bl	8003f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d136      	bne.n	800415a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d109      	bne.n	800410a <I2S_IRQHandler+0xbc>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004100:	2b80      	cmp	r3, #128	@ 0x80
 8004102:	d102      	bne.n	800410a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff45 	bl	8003f94 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b08      	cmp	r3, #8
 8004112:	d122      	bne.n	800415a <I2S_IRQHandler+0x10c>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b20      	cmp	r3, #32
 8004120:	d11b      	bne.n	800415a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004130:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414c:	f043 0204 	orr.w	r2, r3, #4
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff ff13 	bl	8003f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800415a:	bf00      	nop
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a92      	ldr	r2, [pc, #584]	@ (80043c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d101      	bne.n	8004182 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800417e:	4b92      	ldr	r3, [pc, #584]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004180:	e001      	b.n	8004186 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004182:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a8b      	ldr	r2, [pc, #556]	@ (80043c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800419c:	4b8a      	ldr	r3, [pc, #552]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800419e:	e001      	b.n	80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b0:	d004      	beq.n	80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f040 8099 	bne.w	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d107      	bne.n	80041d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f925 	bl	8004420 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d107      	bne.n	80041f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f9c8 	bl	8004580 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f6:	2b40      	cmp	r3, #64	@ 0x40
 80041f8:	d13a      	bne.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d035      	beq.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6e      	ldr	r2, [pc, #440]	@ (80043c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d101      	bne.n	8004212 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800420e:	4b6e      	ldr	r3, [pc, #440]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004210:	e001      	b.n	8004216 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004212:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4969      	ldr	r1, [pc, #420]	@ (80043c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800421e:	428b      	cmp	r3, r1
 8004220:	d101      	bne.n	8004226 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004222:	4b69      	ldr	r3, [pc, #420]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004224:	e001      	b.n	800422a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004226:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800422a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800422e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800423e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004262:	f043 0202 	orr.w	r2, r3, #2
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff fe88 	bl	8003f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b08      	cmp	r3, #8
 8004278:	f040 80c3 	bne.w	8004402 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80bd 	beq.w	8004402 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004296:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a49      	ldr	r2, [pc, #292]	@ (80043c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042a2:	4b49      	ldr	r3, [pc, #292]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042a4:	e001      	b.n	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4944      	ldr	r1, [pc, #272]	@ (80043c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042b2:	428b      	cmp	r3, r1
 80042b4:	d101      	bne.n	80042ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042b6:	4b44      	ldr	r3, [pc, #272]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042b8:	e001      	b.n	80042be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042c4:	2300      	movs	r3, #0
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	f043 0204 	orr.w	r2, r3, #4
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fe4a 	bl	8003f80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042ec:	e089      	b.n	8004402 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d107      	bne.n	8004308 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f8be 	bl	8004484 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d107      	bne.n	8004322 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f8fd 	bl	800451c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004328:	2b40      	cmp	r3, #64	@ 0x40
 800432a:	d12f      	bne.n	800438c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d02a      	beq.n	800438c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004344:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1e      	ldr	r2, [pc, #120]	@ (80043c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004350:	4b1d      	ldr	r3, [pc, #116]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004352:	e001      	b.n	8004358 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004354:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4919      	ldr	r1, [pc, #100]	@ (80043c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004360:	428b      	cmp	r3, r1
 8004362:	d101      	bne.n	8004368 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004364:	4b18      	ldr	r3, [pc, #96]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004366:	e001      	b.n	800436c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004368:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800436c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004370:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437e:	f043 0202 	orr.w	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fdfa 	bl	8003f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b08      	cmp	r3, #8
 8004394:	d136      	bne.n	8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d031      	beq.n	8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a07      	ldr	r2, [pc, #28]	@ (80043c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d101      	bne.n	80043ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043aa:	4b07      	ldr	r3, [pc, #28]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043ac:	e001      	b.n	80043b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4902      	ldr	r1, [pc, #8]	@ (80043c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043ba:	428b      	cmp	r3, r1
 80043bc:	d106      	bne.n	80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80043be:	4b02      	ldr	r3, [pc, #8]	@ (80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043c0:	e006      	b.n	80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80043c2:	bf00      	nop
 80043c4:	40003800 	.word	0x40003800
 80043c8:	40003400 	.word	0x40003400
 80043cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043d4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f2:	f043 0204 	orr.w	r2, r3, #4
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff fdc0 	bl	8003f80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004400:	e000      	b.n	8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004402:	bf00      	nop
}
 8004404:	bf00      	nop
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	1c99      	adds	r1, r3, #2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6251      	str	r1, [r2, #36]	@ 0x24
 8004432:	881a      	ldrh	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d113      	bne.n	800447a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004460:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff ffc9 	bl	800440c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	1c99      	adds	r1, r3, #2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6251      	str	r1, [r2, #36]	@ 0x24
 8004496:	8819      	ldrh	r1, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1d      	ldr	r2, [pc, #116]	@ (8004514 <I2SEx_TxISR_I2SExt+0x90>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d101      	bne.n	80044a6 <I2SEx_TxISR_I2SExt+0x22>
 80044a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004518 <I2SEx_TxISR_I2SExt+0x94>)
 80044a4:	e001      	b.n	80044aa <I2SEx_TxISR_I2SExt+0x26>
 80044a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044aa:	460a      	mov	r2, r1
 80044ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d121      	bne.n	800450a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a12      	ldr	r2, [pc, #72]	@ (8004514 <I2SEx_TxISR_I2SExt+0x90>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <I2SEx_TxISR_I2SExt+0x50>
 80044d0:	4b11      	ldr	r3, [pc, #68]	@ (8004518 <I2SEx_TxISR_I2SExt+0x94>)
 80044d2:	e001      	b.n	80044d8 <I2SEx_TxISR_I2SExt+0x54>
 80044d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	490d      	ldr	r1, [pc, #52]	@ (8004514 <I2SEx_TxISR_I2SExt+0x90>)
 80044e0:	428b      	cmp	r3, r1
 80044e2:	d101      	bne.n	80044e8 <I2SEx_TxISR_I2SExt+0x64>
 80044e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004518 <I2SEx_TxISR_I2SExt+0x94>)
 80044e6:	e001      	b.n	80044ec <I2SEx_TxISR_I2SExt+0x68>
 80044e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff ff81 	bl	800440c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40003800 	.word	0x40003800
 8004518:	40003400 	.word	0x40003400

0800451c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68d8      	ldr	r0, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452e:	1c99      	adds	r1, r3, #2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004534:	b282      	uxth	r2, r0
 8004536:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d113      	bne.n	8004578 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800455e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff ff4a 	bl	800440c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a20      	ldr	r2, [pc, #128]	@ (8004610 <I2SEx_RxISR_I2SExt+0x90>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d101      	bne.n	8004596 <I2SEx_RxISR_I2SExt+0x16>
 8004592:	4b20      	ldr	r3, [pc, #128]	@ (8004614 <I2SEx_RxISR_I2SExt+0x94>)
 8004594:	e001      	b.n	800459a <I2SEx_RxISR_I2SExt+0x1a>
 8004596:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800459a:	68d8      	ldr	r0, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	1c99      	adds	r1, r3, #2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80045a6:	b282      	uxth	r2, r0
 80045a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d121      	bne.n	8004606 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a12      	ldr	r2, [pc, #72]	@ (8004610 <I2SEx_RxISR_I2SExt+0x90>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d101      	bne.n	80045d0 <I2SEx_RxISR_I2SExt+0x50>
 80045cc:	4b11      	ldr	r3, [pc, #68]	@ (8004614 <I2SEx_RxISR_I2SExt+0x94>)
 80045ce:	e001      	b.n	80045d4 <I2SEx_RxISR_I2SExt+0x54>
 80045d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	490d      	ldr	r1, [pc, #52]	@ (8004610 <I2SEx_RxISR_I2SExt+0x90>)
 80045dc:	428b      	cmp	r3, r1
 80045de:	d101      	bne.n	80045e4 <I2SEx_RxISR_I2SExt+0x64>
 80045e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004614 <I2SEx_RxISR_I2SExt+0x94>)
 80045e2:	e001      	b.n	80045e8 <I2SEx_RxISR_I2SExt+0x68>
 80045e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff ff03 	bl	800440c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40003800 	.word	0x40003800
 8004614:	40003400 	.word	0x40003400

08004618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e267      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d075      	beq.n	8004722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004636:	4b88      	ldr	r3, [pc, #544]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b04      	cmp	r3, #4
 8004640:	d00c      	beq.n	800465c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004642:	4b85      	ldr	r3, [pc, #532]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800464a:	2b08      	cmp	r3, #8
 800464c:	d112      	bne.n	8004674 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800464e:	4b82      	ldr	r3, [pc, #520]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004656:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800465a:	d10b      	bne.n	8004674 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465c:	4b7e      	ldr	r3, [pc, #504]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d05b      	beq.n	8004720 <HAL_RCC_OscConfig+0x108>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d157      	bne.n	8004720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e242      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800467c:	d106      	bne.n	800468c <HAL_RCC_OscConfig+0x74>
 800467e:	4b76      	ldr	r3, [pc, #472]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a75      	ldr	r2, [pc, #468]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 8004684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	e01d      	b.n	80046c8 <HAL_RCC_OscConfig+0xb0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004694:	d10c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x98>
 8004696:	4b70      	ldr	r3, [pc, #448]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a6f      	ldr	r2, [pc, #444]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 800469c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 80046a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e00b      	b.n	80046c8 <HAL_RCC_OscConfig+0xb0>
 80046b0:	4b69      	ldr	r3, [pc, #420]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a68      	ldr	r2, [pc, #416]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 80046b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	4b66      	ldr	r3, [pc, #408]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a65      	ldr	r2, [pc, #404]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 80046c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d013      	beq.n	80046f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7fc fd60 	bl	8001194 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d8:	f7fc fd5c 	bl	8001194 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	@ 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e207      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0xc0>
 80046f6:	e014      	b.n	8004722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fc fd4c 	bl	8001194 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004700:	f7fc fd48 	bl	8001194 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	@ 0x64
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e1f3      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004712:	4b51      	ldr	r3, [pc, #324]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0xe8>
 800471e:	e000      	b.n	8004722 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d063      	beq.n	80047f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800472e:	4b4a      	ldr	r3, [pc, #296]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800473a:	4b47      	ldr	r3, [pc, #284]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004742:	2b08      	cmp	r3, #8
 8004744:	d11c      	bne.n	8004780 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004746:	4b44      	ldr	r3, [pc, #272]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d116      	bne.n	8004780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004752:	4b41      	ldr	r3, [pc, #260]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <HAL_RCC_OscConfig+0x152>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d001      	beq.n	800476a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e1c7      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476a:	4b3b      	ldr	r3, [pc, #236]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4937      	ldr	r1, [pc, #220]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477e:	e03a      	b.n	80047f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d020      	beq.n	80047ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004788:	4b34      	ldr	r3, [pc, #208]	@ (800485c <HAL_RCC_OscConfig+0x244>)
 800478a:	2201      	movs	r2, #1
 800478c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fc fd01 	bl	8001194 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004796:	f7fc fcfd 	bl	8001194 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e1a8      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b4:	4b28      	ldr	r3, [pc, #160]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	4925      	ldr	r1, [pc, #148]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	600b      	str	r3, [r1, #0]
 80047c8:	e015      	b.n	80047f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ca:	4b24      	ldr	r3, [pc, #144]	@ (800485c <HAL_RCC_OscConfig+0x244>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d0:	f7fc fce0 	bl	8001194 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d8:	f7fc fcdc 	bl	8001194 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e187      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d036      	beq.n	8004870 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d016      	beq.n	8004838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800480a:	4b15      	ldr	r3, [pc, #84]	@ (8004860 <HAL_RCC_OscConfig+0x248>)
 800480c:	2201      	movs	r2, #1
 800480e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004810:	f7fc fcc0 	bl	8001194 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004818:	f7fc fcbc 	bl	8001194 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e167      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482a:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <HAL_RCC_OscConfig+0x240>)
 800482c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0x200>
 8004836:	e01b      	b.n	8004870 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004838:	4b09      	ldr	r3, [pc, #36]	@ (8004860 <HAL_RCC_OscConfig+0x248>)
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483e:	f7fc fca9 	bl	8001194 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004844:	e00e      	b.n	8004864 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004846:	f7fc fca5 	bl	8001194 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d907      	bls.n	8004864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e150      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
 8004858:	40023800 	.word	0x40023800
 800485c:	42470000 	.word	0x42470000
 8004860:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004864:	4b88      	ldr	r3, [pc, #544]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1ea      	bne.n	8004846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8097 	beq.w	80049ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800487e:	2300      	movs	r3, #0
 8004880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004882:	4b81      	ldr	r3, [pc, #516]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10f      	bne.n	80048ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800488e:	2300      	movs	r3, #0
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	4b7d      	ldr	r3, [pc, #500]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	4a7c      	ldr	r2, [pc, #496]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800489c:	6413      	str	r3, [r2, #64]	@ 0x40
 800489e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048aa:	2301      	movs	r3, #1
 80048ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ae:	4b77      	ldr	r3, [pc, #476]	@ (8004a8c <HAL_RCC_OscConfig+0x474>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d118      	bne.n	80048ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ba:	4b74      	ldr	r3, [pc, #464]	@ (8004a8c <HAL_RCC_OscConfig+0x474>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a73      	ldr	r2, [pc, #460]	@ (8004a8c <HAL_RCC_OscConfig+0x474>)
 80048c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c6:	f7fc fc65 	bl	8001194 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ce:	f7fc fc61 	bl	8001194 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e10c      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e0:	4b6a      	ldr	r3, [pc, #424]	@ (8004a8c <HAL_RCC_OscConfig+0x474>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d106      	bne.n	8004902 <HAL_RCC_OscConfig+0x2ea>
 80048f4:	4b64      	ldr	r3, [pc, #400]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f8:	4a63      	ldr	r2, [pc, #396]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004900:	e01c      	b.n	800493c <HAL_RCC_OscConfig+0x324>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2b05      	cmp	r3, #5
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0x30c>
 800490a:	4b5f      	ldr	r3, [pc, #380]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490e:	4a5e      	ldr	r2, [pc, #376]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004910:	f043 0304 	orr.w	r3, r3, #4
 8004914:	6713      	str	r3, [r2, #112]	@ 0x70
 8004916:	4b5c      	ldr	r3, [pc, #368]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491a:	4a5b      	ldr	r2, [pc, #364]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	6713      	str	r3, [r2, #112]	@ 0x70
 8004922:	e00b      	b.n	800493c <HAL_RCC_OscConfig+0x324>
 8004924:	4b58      	ldr	r3, [pc, #352]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004928:	4a57      	ldr	r2, [pc, #348]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 800492a:	f023 0301 	bic.w	r3, r3, #1
 800492e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004930:	4b55      	ldr	r3, [pc, #340]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004934:	4a54      	ldr	r2, [pc, #336]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004936:	f023 0304 	bic.w	r3, r3, #4
 800493a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d015      	beq.n	8004970 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004944:	f7fc fc26 	bl	8001194 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494a:	e00a      	b.n	8004962 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494c:	f7fc fc22 	bl	8001194 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e0cb      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004962:	4b49      	ldr	r3, [pc, #292]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0ee      	beq.n	800494c <HAL_RCC_OscConfig+0x334>
 800496e:	e014      	b.n	800499a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004970:	f7fc fc10 	bl	8001194 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004976:	e00a      	b.n	800498e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004978:	f7fc fc0c 	bl	8001194 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e0b5      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800498e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1ee      	bne.n	8004978 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800499a:	7dfb      	ldrb	r3, [r7, #23]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d105      	bne.n	80049ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a0:	4b39      	ldr	r3, [pc, #228]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 80049a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a4:	4a38      	ldr	r2, [pc, #224]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 80049a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80a1 	beq.w	8004af8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049b6:	4b34      	ldr	r3, [pc, #208]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d05c      	beq.n	8004a7c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d141      	bne.n	8004a4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ca:	4b31      	ldr	r3, [pc, #196]	@ (8004a90 <HAL_RCC_OscConfig+0x478>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fc fbe0 	bl	8001194 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d8:	f7fc fbdc 	bl	8001194 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e087      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ea:	4b27      	ldr	r3, [pc, #156]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69da      	ldr	r2, [r3, #28]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	019b      	lsls	r3, r3, #6
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	041b      	lsls	r3, r3, #16
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	061b      	lsls	r3, r3, #24
 8004a1a:	491b      	ldr	r1, [pc, #108]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a20:	4b1b      	ldr	r3, [pc, #108]	@ (8004a90 <HAL_RCC_OscConfig+0x478>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a26:	f7fc fbb5 	bl	8001194 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a2e:	f7fc fbb1 	bl	8001194 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e05c      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a40:	4b11      	ldr	r3, [pc, #68]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCC_OscConfig+0x416>
 8004a4c:	e054      	b.n	8004af8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4e:	4b10      	ldr	r3, [pc, #64]	@ (8004a90 <HAL_RCC_OscConfig+0x478>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fc fb9e 	bl	8001194 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fc fb9a 	bl	8001194 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e045      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6e:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <HAL_RCC_OscConfig+0x470>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x444>
 8004a7a:	e03d      	b.n	8004af8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d107      	bne.n	8004a94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e038      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	40007000 	.word	0x40007000
 8004a90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a94:	4b1b      	ldr	r3, [pc, #108]	@ (8004b04 <HAL_RCC_OscConfig+0x4ec>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d028      	beq.n	8004af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d121      	bne.n	8004af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d11a      	bne.n	8004af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004aca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d111      	bne.n	8004af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	3b01      	subs	r3, #1
 8004ade:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d107      	bne.n	8004af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800

08004b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0cc      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b1c:	4b68      	ldr	r3, [pc, #416]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d90c      	bls.n	8004b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2a:	4b65      	ldr	r3, [pc, #404]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b32:	4b63      	ldr	r3, [pc, #396]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0b8      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d020      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b5c:	4b59      	ldr	r3, [pc, #356]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4a58      	ldr	r2, [pc, #352]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b74:	4b53      	ldr	r3, [pc, #332]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4a52      	ldr	r2, [pc, #328]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b80:	4b50      	ldr	r3, [pc, #320]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	494d      	ldr	r1, [pc, #308]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d044      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d107      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba6:	4b47      	ldr	r3, [pc, #284]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d119      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e07f      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d003      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d107      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d109      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e06f      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e067      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004be6:	4b37      	ldr	r3, [pc, #220]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f023 0203 	bic.w	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	4934      	ldr	r1, [pc, #208]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf8:	f7fc facc 	bl	8001194 <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c00:	f7fc fac8 	bl	8001194 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e04f      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c16:	4b2b      	ldr	r3, [pc, #172]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 020c 	and.w	r2, r3, #12
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d1eb      	bne.n	8004c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c28:	4b25      	ldr	r3, [pc, #148]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d20c      	bcs.n	8004c50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4b22      	ldr	r3, [pc, #136]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3e:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e032      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c5c:	4b19      	ldr	r3, [pc, #100]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4916      	ldr	r1, [pc, #88]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c7a:	4b12      	ldr	r3, [pc, #72]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	490e      	ldr	r1, [pc, #56]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c8e:	f000 f821 	bl	8004cd4 <HAL_RCC_GetSysClockFreq>
 8004c92:	4602      	mov	r2, r0
 8004c94:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	091b      	lsrs	r3, r3, #4
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	490a      	ldr	r1, [pc, #40]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca0:	5ccb      	ldrb	r3, [r1, r3]
 8004ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca6:	4a09      	ldr	r2, [pc, #36]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c4>)
 8004ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004caa:	4b09      	ldr	r3, [pc, #36]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fc fa2c 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40023c00 	.word	0x40023c00
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	08009ec4 	.word	0x08009ec4
 8004ccc:	20000000 	.word	0x20000000
 8004cd0:	20000004 	.word	0x20000004

08004cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd8:	b094      	sub	sp, #80	@ 0x50
 8004cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cec:	4b79      	ldr	r3, [pc, #484]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 030c 	and.w	r3, r3, #12
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d00d      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0x40>
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	f200 80e1 	bhi.w	8004ec0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_RCC_GetSysClockFreq+0x34>
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d003      	beq.n	8004d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d06:	e0db      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d08:	4b73      	ldr	r3, [pc, #460]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d0c:	e0db      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d0e:	4b73      	ldr	r3, [pc, #460]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x208>)
 8004d10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d12:	e0d8      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d14:	4b6f      	ldr	r3, [pc, #444]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d063      	beq.n	8004df2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	099b      	lsrs	r3, r3, #6
 8004d30:	2200      	movs	r2, #0
 8004d32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d3e:	2300      	movs	r3, #0
 8004d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d46:	4622      	mov	r2, r4
 8004d48:	462b      	mov	r3, r5
 8004d4a:	f04f 0000 	mov.w	r0, #0
 8004d4e:	f04f 0100 	mov.w	r1, #0
 8004d52:	0159      	lsls	r1, r3, #5
 8004d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d58:	0150      	lsls	r0, r2, #5
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4621      	mov	r1, r4
 8004d60:	1a51      	subs	r1, r2, r1
 8004d62:	6139      	str	r1, [r7, #16]
 8004d64:	4629      	mov	r1, r5
 8004d66:	eb63 0301 	sbc.w	r3, r3, r1
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d78:	4659      	mov	r1, fp
 8004d7a:	018b      	lsls	r3, r1, #6
 8004d7c:	4651      	mov	r1, sl
 8004d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d82:	4651      	mov	r1, sl
 8004d84:	018a      	lsls	r2, r1, #6
 8004d86:	4651      	mov	r1, sl
 8004d88:	ebb2 0801 	subs.w	r8, r2, r1
 8004d8c:	4659      	mov	r1, fp
 8004d8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004da2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004da6:	4690      	mov	r8, r2
 8004da8:	4699      	mov	r9, r3
 8004daa:	4623      	mov	r3, r4
 8004dac:	eb18 0303 	adds.w	r3, r8, r3
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	462b      	mov	r3, r5
 8004db4:	eb49 0303 	adc.w	r3, r9, r3
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	024b      	lsls	r3, r1, #9
 8004dca:	4621      	mov	r1, r4
 8004dcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	024a      	lsls	r2, r1, #9
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dda:	2200      	movs	r2, #0
 8004ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004de0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004de4:	f7fb f9f0 	bl	80001c8 <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4613      	mov	r3, r2
 8004dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df0:	e058      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df2:	4b38      	ldr	r3, [pc, #224]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	099b      	lsrs	r3, r3, #6
 8004df8:	2200      	movs	r2, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e02:	623b      	str	r3, [r7, #32]
 8004e04:	2300      	movs	r3, #0
 8004e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	f04f 0000 	mov.w	r0, #0
 8004e14:	f04f 0100 	mov.w	r1, #0
 8004e18:	0159      	lsls	r1, r3, #5
 8004e1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e1e:	0150      	lsls	r0, r2, #5
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4641      	mov	r1, r8
 8004e26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e44:	ebb2 040a 	subs.w	r4, r2, sl
 8004e48:	eb63 050b 	sbc.w	r5, r3, fp
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	00eb      	lsls	r3, r5, #3
 8004e56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e5a:	00e2      	lsls	r2, r4, #3
 8004e5c:	4614      	mov	r4, r2
 8004e5e:	461d      	mov	r5, r3
 8004e60:	4643      	mov	r3, r8
 8004e62:	18e3      	adds	r3, r4, r3
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	464b      	mov	r3, r9
 8004e68:	eb45 0303 	adc.w	r3, r5, r3
 8004e6c:	607b      	str	r3, [r7, #4]
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	028b      	lsls	r3, r1, #10
 8004e7e:	4621      	mov	r1, r4
 8004e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e84:	4621      	mov	r1, r4
 8004e86:	028a      	lsls	r2, r1, #10
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e8e:	2200      	movs	r2, #0
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	61fa      	str	r2, [r7, #28]
 8004e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e98:	f7fb f996 	bl	80001c8 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	0c1b      	lsrs	r3, r3, #16
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	3301      	adds	r3, #1
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004eb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ebe:	e002      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3750      	adds	r7, #80	@ 0x50
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	00f42400 	.word	0x00f42400
 8004edc:	007a1200 	.word	0x007a1200

08004ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee4:	4b03      	ldr	r3, [pc, #12]	@ (8004ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000000 	.word	0x20000000

08004ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004efc:	f7ff fff0 	bl	8004ee0 <HAL_RCC_GetHCLKFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b05      	ldr	r3, [pc, #20]	@ (8004f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	0a9b      	lsrs	r3, r3, #10
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	4903      	ldr	r1, [pc, #12]	@ (8004f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	08009ed4 	.word	0x08009ed4

08004f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f24:	f7ff ffdc 	bl	8004ee0 <HAL_RCC_GetHCLKFreq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b05      	ldr	r3, [pc, #20]	@ (8004f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	0b5b      	lsrs	r3, r3, #13
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	4903      	ldr	r1, [pc, #12]	@ (8004f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f36:	5ccb      	ldrb	r3, [r1, r3]
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40023800 	.word	0x40023800
 8004f44:	08009ed4 	.word	0x08009ed4

08004f48 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d035      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f70:	4b62      	ldr	r3, [pc, #392]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f76:	f7fc f90d 	bl	8001194 <HAL_GetTick>
 8004f7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f7e:	f7fc f909 	bl	8001194 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e0b0      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f90:	4b5b      	ldr	r3, [pc, #364]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f0      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	019a      	lsls	r2, r3, #6
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	071b      	lsls	r3, r3, #28
 8004fa8:	4955      	ldr	r1, [pc, #340]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fb0:	4b52      	ldr	r3, [pc, #328]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb6:	f7fc f8ed 	bl	8001194 <HAL_GetTick>
 8004fba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fbe:	f7fc f8e9 	bl	8001194 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e090      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fd0:	4b4b      	ldr	r3, [pc, #300]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8083 	beq.w	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	4b44      	ldr	r3, [pc, #272]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	4a43      	ldr	r2, [pc, #268]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ffa:	4b41      	ldr	r3, [pc, #260]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005006:	4b3f      	ldr	r3, [pc, #252]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a3e      	ldr	r2, [pc, #248]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800500c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005010:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005012:	f7fc f8bf 	bl	8001194 <HAL_GetTick>
 8005016:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501a:	f7fc f8bb 	bl	8001194 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e062      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800502c:	4b35      	ldr	r3, [pc, #212]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005038:	4b31      	ldr	r3, [pc, #196]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005040:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d02f      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	429a      	cmp	r2, r3
 8005054:	d028      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005056:	4b2a      	ldr	r3, [pc, #168]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800505e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005060:	4b29      	ldr	r3, [pc, #164]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005062:	2201      	movs	r2, #1
 8005064:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005066:	4b28      	ldr	r3, [pc, #160]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800506c:	4a24      	ldr	r2, [pc, #144]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005072:	4b23      	ldr	r3, [pc, #140]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b01      	cmp	r3, #1
 800507c:	d114      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800507e:	f7fc f889 	bl	8001194 <HAL_GetTick>
 8005082:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005084:	e00a      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005086:	f7fc f885 	bl	8001194 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005094:	4293      	cmp	r3, r2
 8005096:	d901      	bls.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e02a      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509c:	4b18      	ldr	r3, [pc, #96]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ee      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050b4:	d10d      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050b6:	4b12      	ldr	r3, [pc, #72]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80050c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ca:	490d      	ldr	r1, [pc, #52]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	608b      	str	r3, [r1, #8]
 80050d0:	e005      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80050dc:	6093      	str	r3, [r2, #8]
 80050de:	4b08      	ldr	r3, [pc, #32]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ea:	4905      	ldr	r1, [pc, #20]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	42470068 	.word	0x42470068
 8005100:	40023800 	.word	0x40023800
 8005104:	40007000 	.word	0x40007000
 8005108:	42470e40 	.word	0x42470e40

0800510c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d13f      	bne.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800512a:	4b24      	ldr	r3, [pc, #144]	@ (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005132:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d006      	beq.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005140:	d12f      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005142:	4b1f      	ldr	r3, [pc, #124]	@ (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005144:	617b      	str	r3, [r7, #20]
          break;
 8005146:	e02f      	b.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005148:	4b1c      	ldr	r3, [pc, #112]	@ (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005150:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005154:	d108      	bne.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005156:	4b19      	ldr	r3, [pc, #100]	@ (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800515e:	4a19      	ldr	r2, [pc, #100]	@ (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	e007      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005168:	4b14      	ldr	r3, [pc, #80]	@ (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005170:	4a15      	ldr	r2, [pc, #84]	@ (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005172:	fbb2 f3f3 	udiv	r3, r2, r3
 8005176:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005178:	4b10      	ldr	r3, [pc, #64]	@ (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800517a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800517e:	099b      	lsrs	r3, r3, #6
 8005180:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	fb02 f303 	mul.w	r3, r2, r3
 800518a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800518c:	4b0b      	ldr	r3, [pc, #44]	@ (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800518e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005192:	0f1b      	lsrs	r3, r3, #28
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	fbb2 f3f3 	udiv	r3, r2, r3
 800519e:	617b      	str	r3, [r7, #20]
          break;
 80051a0:	e002      	b.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
          break;
 80051a6:	bf00      	nop
        }
      }
      break;
 80051a8:	e000      	b.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80051aa:	bf00      	nop
    }
  }
  return frequency;
 80051ac:	697b      	ldr	r3, [r7, #20]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40023800 	.word	0x40023800
 80051c0:	00bb8000 	.word	0x00bb8000
 80051c4:	007a1200 	.word	0x007a1200
 80051c8:	00f42400 	.word	0x00f42400

080051cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e07b      	b.n	80052d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d108      	bne.n	80051f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051ee:	d009      	beq.n	8005204 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	61da      	str	r2, [r3, #28]
 80051f6:	e005      	b.n	8005204 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fb fd5c 	bl	8000cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800523a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005288:	ea42 0103 	orr.w	r1, r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	f003 0104 	and.w	r1, r3, #4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052aa:	f003 0210 	and.w	r2, r3, #16
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e041      	b.n	8005374 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fb fd31 	bl	8000d6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3304      	adds	r3, #4
 800531a:	4619      	mov	r1, r3
 800531c:	4610      	mov	r0, r2
 800531e:	f000 f9b7 	bl	8005690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <HAL_TIM_PWM_Start+0x24>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	e022      	b.n	80053e6 <HAL_TIM_PWM_Start+0x6a>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d109      	bne.n	80053ba <HAL_TIM_PWM_Start+0x3e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	bf14      	ite	ne
 80053b2:	2301      	movne	r3, #1
 80053b4:	2300      	moveq	r3, #0
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	e015      	b.n	80053e6 <HAL_TIM_PWM_Start+0x6a>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d109      	bne.n	80053d4 <HAL_TIM_PWM_Start+0x58>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	bf14      	ite	ne
 80053cc:	2301      	movne	r3, #1
 80053ce:	2300      	moveq	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e008      	b.n	80053e6 <HAL_TIM_PWM_Start+0x6a>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	bf14      	ite	ne
 80053e0:	2301      	movne	r3, #1
 80053e2:	2300      	moveq	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e07c      	b.n	80054e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_PWM_Start+0x82>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053fc:	e013      	b.n	8005426 <HAL_TIM_PWM_Start+0xaa>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b04      	cmp	r3, #4
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Start+0x92>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800540c:	e00b      	b.n	8005426 <HAL_TIM_PWM_Start+0xaa>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b08      	cmp	r3, #8
 8005412:	d104      	bne.n	800541e <HAL_TIM_PWM_Start+0xa2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800541c:	e003      	b.n	8005426 <HAL_TIM_PWM_Start+0xaa>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2201      	movs	r2, #1
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fb84 	bl	8005b3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a2d      	ldr	r2, [pc, #180]	@ (80054f0 <HAL_TIM_PWM_Start+0x174>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_TIM_PWM_Start+0xcc>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a2c      	ldr	r2, [pc, #176]	@ (80054f4 <HAL_TIM_PWM_Start+0x178>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d101      	bne.n	800544c <HAL_TIM_PWM_Start+0xd0>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <HAL_TIM_PWM_Start+0xd2>
 800544c:	2300      	movs	r3, #0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005460:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a22      	ldr	r2, [pc, #136]	@ (80054f0 <HAL_TIM_PWM_Start+0x174>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d022      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005474:	d01d      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1f      	ldr	r2, [pc, #124]	@ (80054f8 <HAL_TIM_PWM_Start+0x17c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d018      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1d      	ldr	r2, [pc, #116]	@ (80054fc <HAL_TIM_PWM_Start+0x180>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1c      	ldr	r2, [pc, #112]	@ (8005500 <HAL_TIM_PWM_Start+0x184>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00e      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a16      	ldr	r2, [pc, #88]	@ (80054f4 <HAL_TIM_PWM_Start+0x178>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d009      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a18      	ldr	r2, [pc, #96]	@ (8005504 <HAL_TIM_PWM_Start+0x188>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x136>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a16      	ldr	r2, [pc, #88]	@ (8005508 <HAL_TIM_PWM_Start+0x18c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d111      	bne.n	80054d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b06      	cmp	r3, #6
 80054c2:	d010      	beq.n	80054e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d4:	e007      	b.n	80054e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40010000 	.word	0x40010000
 80054f4:	40010400 	.word	0x40010400
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40014000 	.word	0x40014000
 8005508:	40001800 	.word	0x40001800

0800550c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005526:	2302      	movs	r3, #2
 8005528:	e0ae      	b.n	8005688 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b0c      	cmp	r3, #12
 8005536:	f200 809f 	bhi.w	8005678 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800553a:	a201      	add	r2, pc, #4	@ (adr r2, 8005540 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	08005575 	.word	0x08005575
 8005544:	08005679 	.word	0x08005679
 8005548:	08005679 	.word	0x08005679
 800554c:	08005679 	.word	0x08005679
 8005550:	080055b5 	.word	0x080055b5
 8005554:	08005679 	.word	0x08005679
 8005558:	08005679 	.word	0x08005679
 800555c:	08005679 	.word	0x08005679
 8005560:	080055f7 	.word	0x080055f7
 8005564:	08005679 	.word	0x08005679
 8005568:	08005679 	.word	0x08005679
 800556c:	08005679 	.word	0x08005679
 8005570:	08005637 	.word	0x08005637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 f92e 	bl	80057dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0208 	orr.w	r2, r2, #8
 800558e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0204 	bic.w	r2, r2, #4
 800559e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6999      	ldr	r1, [r3, #24]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	619a      	str	r2, [r3, #24]
      break;
 80055b2:	e064      	b.n	800567e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 f97e 	bl	80058bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6999      	ldr	r1, [r3, #24]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	021a      	lsls	r2, r3, #8
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	619a      	str	r2, [r3, #24]
      break;
 80055f4:	e043      	b.n	800567e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 f9d3 	bl	80059a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0208 	orr.w	r2, r2, #8
 8005610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0204 	bic.w	r2, r2, #4
 8005620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69d9      	ldr	r1, [r3, #28]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	61da      	str	r2, [r3, #28]
      break;
 8005634:	e023      	b.n	800567e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fa27 	bl	8005a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69d9      	ldr	r1, [r3, #28]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	021a      	lsls	r2, r3, #8
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	61da      	str	r2, [r3, #28]
      break;
 8005676:	e002      	b.n	800567e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	75fb      	strb	r3, [r7, #23]
      break;
 800567c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005686:	7dfb      	ldrb	r3, [r7, #23]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a43      	ldr	r2, [pc, #268]	@ (80057b0 <TIM_Base_SetConfig+0x120>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ae:	d00f      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a40      	ldr	r2, [pc, #256]	@ (80057b4 <TIM_Base_SetConfig+0x124>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3f      	ldr	r2, [pc, #252]	@ (80057b8 <TIM_Base_SetConfig+0x128>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a3e      	ldr	r2, [pc, #248]	@ (80057bc <TIM_Base_SetConfig+0x12c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a3d      	ldr	r2, [pc, #244]	@ (80057c0 <TIM_Base_SetConfig+0x130>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d108      	bne.n	80056e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a32      	ldr	r2, [pc, #200]	@ (80057b0 <TIM_Base_SetConfig+0x120>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d02b      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f0:	d027      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2f      	ldr	r2, [pc, #188]	@ (80057b4 <TIM_Base_SetConfig+0x124>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d023      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2e      	ldr	r2, [pc, #184]	@ (80057b8 <TIM_Base_SetConfig+0x128>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01f      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2d      	ldr	r2, [pc, #180]	@ (80057bc <TIM_Base_SetConfig+0x12c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d01b      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2c      	ldr	r2, [pc, #176]	@ (80057c0 <TIM_Base_SetConfig+0x130>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d017      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2b      	ldr	r2, [pc, #172]	@ (80057c4 <TIM_Base_SetConfig+0x134>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2a      	ldr	r2, [pc, #168]	@ (80057c8 <TIM_Base_SetConfig+0x138>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00f      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a29      	ldr	r2, [pc, #164]	@ (80057cc <TIM_Base_SetConfig+0x13c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00b      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a28      	ldr	r2, [pc, #160]	@ (80057d0 <TIM_Base_SetConfig+0x140>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d007      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a27      	ldr	r2, [pc, #156]	@ (80057d4 <TIM_Base_SetConfig+0x144>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a26      	ldr	r2, [pc, #152]	@ (80057d8 <TIM_Base_SetConfig+0x148>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d108      	bne.n	8005754 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a0e      	ldr	r2, [pc, #56]	@ (80057b0 <TIM_Base_SetConfig+0x120>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <TIM_Base_SetConfig+0xf2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a10      	ldr	r2, [pc, #64]	@ (80057c0 <TIM_Base_SetConfig+0x130>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d103      	bne.n	800578a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f043 0204 	orr.w	r2, r3, #4
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	601a      	str	r2, [r3, #0]
}
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40010000 	.word	0x40010000
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800
 80057bc:	40000c00 	.word	0x40000c00
 80057c0:	40010400 	.word	0x40010400
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40014400 	.word	0x40014400
 80057cc:	40014800 	.word	0x40014800
 80057d0:	40001800 	.word	0x40001800
 80057d4:	40001c00 	.word	0x40001c00
 80057d8:	40002000 	.word	0x40002000

080057dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	f023 0201 	bic.w	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0303 	bic.w	r3, r3, #3
 8005812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f023 0302 	bic.w	r3, r3, #2
 8005824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a20      	ldr	r2, [pc, #128]	@ (80058b4 <TIM_OC1_SetConfig+0xd8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d003      	beq.n	8005840 <TIM_OC1_SetConfig+0x64>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a1f      	ldr	r2, [pc, #124]	@ (80058b8 <TIM_OC1_SetConfig+0xdc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d10c      	bne.n	800585a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 0308 	bic.w	r3, r3, #8
 8005846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f023 0304 	bic.w	r3, r3, #4
 8005858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a15      	ldr	r2, [pc, #84]	@ (80058b4 <TIM_OC1_SetConfig+0xd8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d003      	beq.n	800586a <TIM_OC1_SetConfig+0x8e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a14      	ldr	r2, [pc, #80]	@ (80058b8 <TIM_OC1_SetConfig+0xdc>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d111      	bne.n	800588e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	621a      	str	r2, [r3, #32]
}
 80058a8:	bf00      	nop
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40010400 	.word	0x40010400

080058bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	f023 0210 	bic.w	r2, r3, #16
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	021b      	lsls	r3, r3, #8
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f023 0320 	bic.w	r3, r3, #32
 8005906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a22      	ldr	r2, [pc, #136]	@ (80059a0 <TIM_OC2_SetConfig+0xe4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_OC2_SetConfig+0x68>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a21      	ldr	r2, [pc, #132]	@ (80059a4 <TIM_OC2_SetConfig+0xe8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d10d      	bne.n	8005940 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800592a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800593e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a17      	ldr	r2, [pc, #92]	@ (80059a0 <TIM_OC2_SetConfig+0xe4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_OC2_SetConfig+0x94>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a16      	ldr	r2, [pc, #88]	@ (80059a4 <TIM_OC2_SetConfig+0xe8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d113      	bne.n	8005978 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800595e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40010400 	.word	0x40010400

080059a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0303 	bic.w	r3, r3, #3
 80059de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a21      	ldr	r2, [pc, #132]	@ (8005a88 <TIM_OC3_SetConfig+0xe0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_OC3_SetConfig+0x66>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a20      	ldr	r2, [pc, #128]	@ (8005a8c <TIM_OC3_SetConfig+0xe4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d10d      	bne.n	8005a2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	021b      	lsls	r3, r3, #8
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a16      	ldr	r2, [pc, #88]	@ (8005a88 <TIM_OC3_SetConfig+0xe0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d003      	beq.n	8005a3a <TIM_OC3_SetConfig+0x92>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a15      	ldr	r2, [pc, #84]	@ (8005a8c <TIM_OC3_SetConfig+0xe4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d113      	bne.n	8005a62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	621a      	str	r2, [r3, #32]
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40010400 	.word	0x40010400

08005a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	031b      	lsls	r3, r3, #12
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a12      	ldr	r2, [pc, #72]	@ (8005b34 <TIM_OC4_SetConfig+0xa4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d003      	beq.n	8005af8 <TIM_OC4_SetConfig+0x68>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a11      	ldr	r2, [pc, #68]	@ (8005b38 <TIM_OC4_SetConfig+0xa8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d109      	bne.n	8005b0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005afe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	019b      	lsls	r3, r3, #6
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40010000 	.word	0x40010000
 8005b38:	40010400 	.word	0x40010400

08005b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2201      	movs	r2, #1
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a1a      	ldr	r2, [r3, #32]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	401a      	ands	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a1a      	ldr	r2, [r3, #32]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 031f 	and.w	r3, r3, #31
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	fa01 f303 	lsl.w	r3, r1, r3
 8005b74:	431a      	orrs	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	621a      	str	r2, [r3, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e05a      	b.n	8005c56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a21      	ldr	r2, [pc, #132]	@ (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d022      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bec:	d01d      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d018      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d013      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1a      	ldr	r2, [pc, #104]	@ (8005c70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00e      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a18      	ldr	r2, [pc, #96]	@ (8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d009      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a17      	ldr	r2, [pc, #92]	@ (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d004      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a15      	ldr	r2, [pc, #84]	@ (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d10c      	bne.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40010000 	.word	0x40010000
 8005c68:	40000400 	.word	0x40000400
 8005c6c:	40000800 	.word	0x40000800
 8005c70:	40000c00 	.word	0x40000c00
 8005c74:	40010400 	.word	0x40010400
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40001800 	.word	0x40001800

08005c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e042      	b.n	8005d18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7fb f8bc 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2224      	movs	r2, #36	@ 0x24
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f82b 	bl	8005d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695a      	ldr	r2, [r3, #20]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d24:	b0c0      	sub	sp, #256	@ 0x100
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d3c:	68d9      	ldr	r1, [r3, #12]
 8005d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	ea40 0301 	orr.w	r3, r0, r1
 8005d48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d78:	f021 010c 	bic.w	r1, r1, #12
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d86:	430b      	orrs	r3, r1
 8005d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9a:	6999      	ldr	r1, [r3, #24]
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	ea40 0301 	orr.w	r3, r0, r1
 8005da6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b8f      	ldr	r3, [pc, #572]	@ (8005fec <UART_SetConfig+0x2cc>)
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d005      	beq.n	8005dc0 <UART_SetConfig+0xa0>
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4b8d      	ldr	r3, [pc, #564]	@ (8005ff0 <UART_SetConfig+0x2d0>)
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d104      	bne.n	8005dca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dc0:	f7ff f8ae 	bl	8004f20 <HAL_RCC_GetPCLK2Freq>
 8005dc4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005dc8:	e003      	b.n	8005dd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dca:	f7ff f895 	bl	8004ef8 <HAL_RCC_GetPCLK1Freq>
 8005dce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ddc:	f040 810c 	bne.w	8005ff8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005de4:	2200      	movs	r2, #0
 8005de6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005dee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005df2:	4622      	mov	r2, r4
 8005df4:	462b      	mov	r3, r5
 8005df6:	1891      	adds	r1, r2, r2
 8005df8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005dfa:	415b      	adcs	r3, r3
 8005dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e02:	4621      	mov	r1, r4
 8005e04:	eb12 0801 	adds.w	r8, r2, r1
 8005e08:	4629      	mov	r1, r5
 8005e0a:	eb43 0901 	adc.w	r9, r3, r1
 8005e0e:	f04f 0200 	mov.w	r2, #0
 8005e12:	f04f 0300 	mov.w	r3, #0
 8005e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e22:	4690      	mov	r8, r2
 8005e24:	4699      	mov	r9, r3
 8005e26:	4623      	mov	r3, r4
 8005e28:	eb18 0303 	adds.w	r3, r8, r3
 8005e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e30:	462b      	mov	r3, r5
 8005e32:	eb49 0303 	adc.w	r3, r9, r3
 8005e36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e4e:	460b      	mov	r3, r1
 8005e50:	18db      	adds	r3, r3, r3
 8005e52:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e54:	4613      	mov	r3, r2
 8005e56:	eb42 0303 	adc.w	r3, r2, r3
 8005e5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e64:	f7fa f9b0 	bl	80001c8 <__aeabi_uldivmod>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4b61      	ldr	r3, [pc, #388]	@ (8005ff4 <UART_SetConfig+0x2d4>)
 8005e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	011c      	lsls	r4, r3, #4
 8005e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e88:	4642      	mov	r2, r8
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	1891      	adds	r1, r2, r2
 8005e8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e90:	415b      	adcs	r3, r3
 8005e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e98:	4641      	mov	r1, r8
 8005e9a:	eb12 0a01 	adds.w	sl, r2, r1
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	eb43 0b01 	adc.w	fp, r3, r1
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005eb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eb8:	4692      	mov	sl, r2
 8005eba:	469b      	mov	fp, r3
 8005ebc:	4643      	mov	r3, r8
 8005ebe:	eb1a 0303 	adds.w	r3, sl, r3
 8005ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	eb4b 0303 	adc.w	r3, fp, r3
 8005ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005edc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ee0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	18db      	adds	r3, r3, r3
 8005ee8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005eea:	4613      	mov	r3, r2
 8005eec:	eb42 0303 	adc.w	r3, r2, r3
 8005ef0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ef2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ef6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005efa:	f7fa f965 	bl	80001c8 <__aeabi_uldivmod>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4611      	mov	r1, r2
 8005f04:	4b3b      	ldr	r3, [pc, #236]	@ (8005ff4 <UART_SetConfig+0x2d4>)
 8005f06:	fba3 2301 	umull	r2, r3, r3, r1
 8005f0a:	095b      	lsrs	r3, r3, #5
 8005f0c:	2264      	movs	r2, #100	@ 0x64
 8005f0e:	fb02 f303 	mul.w	r3, r2, r3
 8005f12:	1acb      	subs	r3, r1, r3
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f1a:	4b36      	ldr	r3, [pc, #216]	@ (8005ff4 <UART_SetConfig+0x2d4>)
 8005f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f28:	441c      	add	r4, r3
 8005f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f3c:	4642      	mov	r2, r8
 8005f3e:	464b      	mov	r3, r9
 8005f40:	1891      	adds	r1, r2, r2
 8005f42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f44:	415b      	adcs	r3, r3
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	1851      	adds	r1, r2, r1
 8005f50:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f52:	4649      	mov	r1, r9
 8005f54:	414b      	adcs	r3, r1
 8005f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	f04f 0300 	mov.w	r3, #0
 8005f60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f64:	4659      	mov	r1, fp
 8005f66:	00cb      	lsls	r3, r1, #3
 8005f68:	4651      	mov	r1, sl
 8005f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f6e:	4651      	mov	r1, sl
 8005f70:	00ca      	lsls	r2, r1, #3
 8005f72:	4610      	mov	r0, r2
 8005f74:	4619      	mov	r1, r3
 8005f76:	4603      	mov	r3, r0
 8005f78:	4642      	mov	r2, r8
 8005f7a:	189b      	adds	r3, r3, r2
 8005f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f80:	464b      	mov	r3, r9
 8005f82:	460a      	mov	r2, r1
 8005f84:	eb42 0303 	adc.w	r3, r2, r3
 8005f88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	18db      	adds	r3, r3, r3
 8005fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	eb42 0303 	adc.w	r3, r2, r3
 8005fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fb6:	f7fa f907 	bl	80001c8 <__aeabi_uldivmod>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff4 <UART_SetConfig+0x2d4>)
 8005fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fc4:	095b      	lsrs	r3, r3, #5
 8005fc6:	2164      	movs	r1, #100	@ 0x64
 8005fc8:	fb01 f303 	mul.w	r3, r1, r3
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	3332      	adds	r3, #50	@ 0x32
 8005fd2:	4a08      	ldr	r2, [pc, #32]	@ (8005ff4 <UART_SetConfig+0x2d4>)
 8005fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	f003 0207 	and.w	r2, r3, #7
 8005fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4422      	add	r2, r4
 8005fe6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fe8:	e106      	b.n	80061f8 <UART_SetConfig+0x4d8>
 8005fea:	bf00      	nop
 8005fec:	40011000 	.word	0x40011000
 8005ff0:	40011400 	.word	0x40011400
 8005ff4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006002:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006006:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800600a:	4642      	mov	r2, r8
 800600c:	464b      	mov	r3, r9
 800600e:	1891      	adds	r1, r2, r2
 8006010:	6239      	str	r1, [r7, #32]
 8006012:	415b      	adcs	r3, r3
 8006014:	627b      	str	r3, [r7, #36]	@ 0x24
 8006016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800601a:	4641      	mov	r1, r8
 800601c:	1854      	adds	r4, r2, r1
 800601e:	4649      	mov	r1, r9
 8006020:	eb43 0501 	adc.w	r5, r3, r1
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	00eb      	lsls	r3, r5, #3
 800602e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006032:	00e2      	lsls	r2, r4, #3
 8006034:	4614      	mov	r4, r2
 8006036:	461d      	mov	r5, r3
 8006038:	4643      	mov	r3, r8
 800603a:	18e3      	adds	r3, r4, r3
 800603c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006040:	464b      	mov	r3, r9
 8006042:	eb45 0303 	adc.w	r3, r5, r3
 8006046:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800604a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006056:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006066:	4629      	mov	r1, r5
 8006068:	008b      	lsls	r3, r1, #2
 800606a:	4621      	mov	r1, r4
 800606c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006070:	4621      	mov	r1, r4
 8006072:	008a      	lsls	r2, r1, #2
 8006074:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006078:	f7fa f8a6 	bl	80001c8 <__aeabi_uldivmod>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4b60      	ldr	r3, [pc, #384]	@ (8006204 <UART_SetConfig+0x4e4>)
 8006082:	fba3 2302 	umull	r2, r3, r3, r2
 8006086:	095b      	lsrs	r3, r3, #5
 8006088:	011c      	lsls	r4, r3, #4
 800608a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800608e:	2200      	movs	r2, #0
 8006090:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006094:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006098:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800609c:	4642      	mov	r2, r8
 800609e:	464b      	mov	r3, r9
 80060a0:	1891      	adds	r1, r2, r2
 80060a2:	61b9      	str	r1, [r7, #24]
 80060a4:	415b      	adcs	r3, r3
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ac:	4641      	mov	r1, r8
 80060ae:	1851      	adds	r1, r2, r1
 80060b0:	6139      	str	r1, [r7, #16]
 80060b2:	4649      	mov	r1, r9
 80060b4:	414b      	adcs	r3, r1
 80060b6:	617b      	str	r3, [r7, #20]
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060c4:	4659      	mov	r1, fp
 80060c6:	00cb      	lsls	r3, r1, #3
 80060c8:	4651      	mov	r1, sl
 80060ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ce:	4651      	mov	r1, sl
 80060d0:	00ca      	lsls	r2, r1, #3
 80060d2:	4610      	mov	r0, r2
 80060d4:	4619      	mov	r1, r3
 80060d6:	4603      	mov	r3, r0
 80060d8:	4642      	mov	r2, r8
 80060da:	189b      	adds	r3, r3, r2
 80060dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060e0:	464b      	mov	r3, r9
 80060e2:	460a      	mov	r2, r1
 80060e4:	eb42 0303 	adc.w	r3, r2, r3
 80060e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006104:	4649      	mov	r1, r9
 8006106:	008b      	lsls	r3, r1, #2
 8006108:	4641      	mov	r1, r8
 800610a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800610e:	4641      	mov	r1, r8
 8006110:	008a      	lsls	r2, r1, #2
 8006112:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006116:	f7fa f857 	bl	80001c8 <__aeabi_uldivmod>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4611      	mov	r1, r2
 8006120:	4b38      	ldr	r3, [pc, #224]	@ (8006204 <UART_SetConfig+0x4e4>)
 8006122:	fba3 2301 	umull	r2, r3, r3, r1
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	2264      	movs	r2, #100	@ 0x64
 800612a:	fb02 f303 	mul.w	r3, r2, r3
 800612e:	1acb      	subs	r3, r1, r3
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	3332      	adds	r3, #50	@ 0x32
 8006134:	4a33      	ldr	r2, [pc, #204]	@ (8006204 <UART_SetConfig+0x4e4>)
 8006136:	fba2 2303 	umull	r2, r3, r2, r3
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006140:	441c      	add	r4, r3
 8006142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006146:	2200      	movs	r2, #0
 8006148:	673b      	str	r3, [r7, #112]	@ 0x70
 800614a:	677a      	str	r2, [r7, #116]	@ 0x74
 800614c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006150:	4642      	mov	r2, r8
 8006152:	464b      	mov	r3, r9
 8006154:	1891      	adds	r1, r2, r2
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	415b      	adcs	r3, r3
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006160:	4641      	mov	r1, r8
 8006162:	1851      	adds	r1, r2, r1
 8006164:	6039      	str	r1, [r7, #0]
 8006166:	4649      	mov	r1, r9
 8006168:	414b      	adcs	r3, r1
 800616a:	607b      	str	r3, [r7, #4]
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006178:	4659      	mov	r1, fp
 800617a:	00cb      	lsls	r3, r1, #3
 800617c:	4651      	mov	r1, sl
 800617e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006182:	4651      	mov	r1, sl
 8006184:	00ca      	lsls	r2, r1, #3
 8006186:	4610      	mov	r0, r2
 8006188:	4619      	mov	r1, r3
 800618a:	4603      	mov	r3, r0
 800618c:	4642      	mov	r2, r8
 800618e:	189b      	adds	r3, r3, r2
 8006190:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006192:	464b      	mov	r3, r9
 8006194:	460a      	mov	r2, r1
 8006196:	eb42 0303 	adc.w	r3, r2, r3
 800619a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80061a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061b4:	4649      	mov	r1, r9
 80061b6:	008b      	lsls	r3, r1, #2
 80061b8:	4641      	mov	r1, r8
 80061ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061be:	4641      	mov	r1, r8
 80061c0:	008a      	lsls	r2, r1, #2
 80061c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061c6:	f7f9 ffff 	bl	80001c8 <__aeabi_uldivmod>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006204 <UART_SetConfig+0x4e4>)
 80061d0:	fba3 1302 	umull	r1, r3, r3, r2
 80061d4:	095b      	lsrs	r3, r3, #5
 80061d6:	2164      	movs	r1, #100	@ 0x64
 80061d8:	fb01 f303 	mul.w	r3, r1, r3
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	3332      	adds	r3, #50	@ 0x32
 80061e2:	4a08      	ldr	r2, [pc, #32]	@ (8006204 <UART_SetConfig+0x4e4>)
 80061e4:	fba2 2303 	umull	r2, r3, r2, r3
 80061e8:	095b      	lsrs	r3, r3, #5
 80061ea:	f003 020f 	and.w	r2, r3, #15
 80061ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4422      	add	r2, r4
 80061f6:	609a      	str	r2, [r3, #8]
}
 80061f8:	bf00      	nop
 80061fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80061fe:	46bd      	mov	sp, r7
 8006200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006204:	51eb851f 	.word	0x51eb851f

08006208 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006208:	b084      	sub	sp, #16
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	f107 001c 	add.w	r0, r7, #28
 8006216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800621a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800621e:	2b01      	cmp	r3, #1
 8006220:	d123      	bne.n	800626a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006226:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006236:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800624a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800624e:	2b01      	cmp	r3, #1
 8006250:	d105      	bne.n	800625e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9dc 	bl	800661c <USB_CoreReset>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]
 8006268:	e01b      	b.n	80062a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f9d0 	bl	800661c <USB_CoreReset>
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006280:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	639a      	str	r2, [r3, #56]	@ 0x38
 8006294:	e005      	b.n	80062a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062a2:	7fbb      	ldrb	r3, [r7, #30]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d10b      	bne.n	80062c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f043 0206 	orr.w	r2, r3, #6
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f043 0220 	orr.w	r2, r3, #32
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062cc:	b004      	add	sp, #16
 80062ce:	4770      	bx	lr

080062d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f043 0201 	orr.w	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f023 0201 	bic.w	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d115      	bne.n	8006362 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006342:	200a      	movs	r0, #10
 8006344:	f7fa ff32 	bl	80011ac <HAL_Delay>
      ms += 10U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	330a      	adds	r3, #10
 800634c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f956 	bl	8006600 <USB_GetMode>
 8006354:	4603      	mov	r3, r0
 8006356:	2b01      	cmp	r3, #1
 8006358:	d01e      	beq.n	8006398 <USB_SetCurrentMode+0x84>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2bc7      	cmp	r3, #199	@ 0xc7
 800635e:	d9f0      	bls.n	8006342 <USB_SetCurrentMode+0x2e>
 8006360:	e01a      	b.n	8006398 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006362:	78fb      	ldrb	r3, [r7, #3]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d115      	bne.n	8006394 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006374:	200a      	movs	r0, #10
 8006376:	f7fa ff19 	bl	80011ac <HAL_Delay>
      ms += 10U;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	330a      	adds	r3, #10
 800637e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f93d 	bl	8006600 <USB_GetMode>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <USB_SetCurrentMode+0x84>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006390:	d9f0      	bls.n	8006374 <USB_SetCurrentMode+0x60>
 8006392:	e001      	b.n	8006398 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e005      	b.n	80063a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2bc8      	cmp	r3, #200	@ 0xc8
 800639c:	d101      	bne.n	80063a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3301      	adds	r3, #1
 80063be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063c6:	d901      	bls.n	80063cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e01b      	b.n	8006404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	daf2      	bge.n	80063ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	019b      	lsls	r3, r3, #6
 80063dc:	f043 0220 	orr.w	r2, r3, #32
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3301      	adds	r3, #1
 80063e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063f0:	d901      	bls.n	80063f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e006      	b.n	8006404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b20      	cmp	r3, #32
 8006400:	d0f0      	beq.n	80063e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3301      	adds	r3, #1
 8006420:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006428:	d901      	bls.n	800642e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e018      	b.n	8006460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	daf2      	bge.n	800641c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2210      	movs	r2, #16
 800643e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3301      	adds	r3, #1
 8006444:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800644c:	d901      	bls.n	8006452 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e006      	b.n	8006460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b10      	cmp	r3, #16
 800645c:	d0f0      	beq.n	8006440 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800646c:	b480      	push	{r7}
 800646e:	b089      	sub	sp, #36	@ 0x24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	4611      	mov	r1, r2
 8006478:	461a      	mov	r2, r3
 800647a:	460b      	mov	r3, r1
 800647c:	71fb      	strb	r3, [r7, #7]
 800647e:	4613      	mov	r3, r2
 8006480:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800648a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800648e:	2b00      	cmp	r3, #0
 8006490:	d123      	bne.n	80064da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006492:	88bb      	ldrh	r3, [r7, #4]
 8006494:	3303      	adds	r3, #3
 8006496:	089b      	lsrs	r3, r3, #2
 8006498:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800649a:	2300      	movs	r3, #0
 800649c:	61bb      	str	r3, [r7, #24]
 800649e:	e018      	b.n	80064d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064a0:	79fb      	ldrb	r3, [r7, #7]
 80064a2:	031a      	lsls	r2, r3, #12
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ac:	461a      	mov	r2, r3
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	3301      	adds	r3, #1
 80064b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	3301      	adds	r3, #1
 80064be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	3301      	adds	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	3301      	adds	r3, #1
 80064ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	3301      	adds	r3, #1
 80064d0:	61bb      	str	r3, [r7, #24]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d3e2      	bcc.n	80064a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3724      	adds	r7, #36	@ 0x24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b08b      	sub	sp, #44	@ 0x2c
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	4613      	mov	r3, r2
 80064f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064fe:	88fb      	ldrh	r3, [r7, #6]
 8006500:	089b      	lsrs	r3, r3, #2
 8006502:	b29b      	uxth	r3, r3
 8006504:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006506:	88fb      	ldrh	r3, [r7, #6]
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800650e:	2300      	movs	r3, #0
 8006510:	623b      	str	r3, [r7, #32]
 8006512:	e014      	b.n	800653e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006522:	3301      	adds	r3, #1
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	3301      	adds	r3, #1
 800652a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	3301      	adds	r3, #1
 8006530:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	3301      	adds	r3, #1
 8006536:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	3301      	adds	r3, #1
 800653c:	623b      	str	r3, [r7, #32]
 800653e:	6a3a      	ldr	r2, [r7, #32]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	429a      	cmp	r2, r3
 8006544:	d3e6      	bcc.n	8006514 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006546:	8bfb      	ldrh	r3, [r7, #30]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01e      	beq.n	800658a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006556:	461a      	mov	r2, r3
 8006558:	f107 0310 	add.w	r3, r7, #16
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
 800656c:	b2da      	uxtb	r2, r3
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	701a      	strb	r2, [r3, #0]
      i++;
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	3301      	adds	r3, #1
 8006576:	623b      	str	r3, [r7, #32]
      pDest++;
 8006578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657a:	3301      	adds	r3, #1
 800657c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800657e:	8bfb      	ldrh	r3, [r7, #30]
 8006580:	3b01      	subs	r3, #1
 8006582:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006584:	8bfb      	ldrh	r3, [r7, #30]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1ea      	bne.n	8006560 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800658c:	4618      	mov	r0, r3
 800658e:	372c      	adds	r7, #44	@ 0x2c
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	4013      	ands	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065b0:	68fb      	ldr	r3, [r7, #12]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80065be:	b480      	push	{r7}
 80065c0:	b085      	sub	sp, #20
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	460b      	mov	r3, r1
 80065c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80065de:	78fb      	ldrb	r3, [r7, #3]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	4013      	ands	r3, r2
 80065f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065f2:	68bb      	ldr	r3, [r7, #8]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	f003 0301 	and.w	r3, r3, #1
}
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3301      	adds	r3, #1
 800662c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006634:	d901      	bls.n	800663a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e022      	b.n	8006680 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	daf2      	bge.n	8006628 <USB_CoreReset+0xc>

  count = 10U;
 8006642:	230a      	movs	r3, #10
 8006644:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006646:	e002      	b.n	800664e <USB_CoreReset+0x32>
  {
    count--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3b01      	subs	r3, #1
 800664c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1f9      	bne.n	8006648 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f043 0201 	orr.w	r2, r3, #1
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800666c:	d901      	bls.n	8006672 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e006      	b.n	8006680 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b01      	cmp	r3, #1
 800667c:	d0f0      	beq.n	8006660 <USB_CoreReset+0x44>

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800668c:	b084      	sub	sp, #16
 800668e:	b580      	push	{r7, lr}
 8006690:	b086      	sub	sp, #24
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800669a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066ac:	461a      	mov	r2, r3
 80066ae:	2300      	movs	r3, #0
 80066b0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ce:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d119      	bne.n	8006716 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80066e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d10a      	bne.n	8006700 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80066f8:	f043 0304 	orr.w	r3, r3, #4
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	e014      	b.n	800672a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800670e:	f023 0304 	bic.w	r3, r3, #4
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	e009      	b.n	800672a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006724:	f023 0304 	bic.w	r3, r3, #4
 8006728:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800672a:	2110      	movs	r1, #16
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff fe3d 	bl	80063ac <USB_FlushTxFifo>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff fe67 	bl	8006410 <USB_FlushRxFifo>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800674c:	2300      	movs	r3, #0
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	e015      	b.n	800677e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800675e:	461a      	mov	r2, r3
 8006760:	f04f 33ff 	mov.w	r3, #4294967295
 8006764:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006772:	461a      	mov	r2, r3
 8006774:	2300      	movs	r3, #0
 8006776:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	3301      	adds	r3, #1
 800677c:	613b      	str	r3, [r7, #16]
 800677e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006782:	461a      	mov	r2, r3
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	4293      	cmp	r3, r2
 8006788:	d3e3      	bcc.n	8006752 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f04f 32ff 	mov.w	r2, #4294967295
 8006796:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a18      	ldr	r2, [pc, #96]	@ (80067fc <USB_HostInit+0x170>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10b      	bne.n	80067b8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067a6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a15      	ldr	r2, [pc, #84]	@ (8006800 <USB_HostInit+0x174>)
 80067ac:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a14      	ldr	r2, [pc, #80]	@ (8006804 <USB_HostInit+0x178>)
 80067b2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80067b6:	e009      	b.n	80067cc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2280      	movs	r2, #128	@ 0x80
 80067bc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a11      	ldr	r2, [pc, #68]	@ (8006808 <USB_HostInit+0x17c>)
 80067c2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a11      	ldr	r2, [pc, #68]	@ (800680c <USB_HostInit+0x180>)
 80067c8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d105      	bne.n	80067e0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	f043 0210 	orr.w	r2, r3, #16
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	699a      	ldr	r2, [r3, #24]
 80067e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006810 <USB_HostInit+0x184>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067f8:	b004      	add	sp, #16
 80067fa:	4770      	bx	lr
 80067fc:	40040000 	.word	0x40040000
 8006800:	01000200 	.word	0x01000200
 8006804:	00e00300 	.word	0x00e00300
 8006808:	00600080 	.word	0x00600080
 800680c:	004000e0 	.word	0x004000e0
 8006810:	a3200008 	.word	0xa3200008

08006814 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	68f9      	ldr	r1, [r7, #12]
 8006848:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800684c:	4313      	orrs	r3, r2
 800684e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d107      	bne.n	8006866 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800685c:	461a      	mov	r2, r3
 800685e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006862:	6053      	str	r3, [r2, #4]
 8006864:	e00c      	b.n	8006880 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d107      	bne.n	800687c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006872:	461a      	mov	r2, r3
 8006874:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006878:	6053      	str	r3, [r2, #4]
 800687a:	e001      	b.n	8006880 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b084      	sub	sp, #16
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80068ae:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80068b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068bc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80068be:	2064      	movs	r0, #100	@ 0x64
 80068c0:	f7fa fc74 	bl	80011ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80068cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068d0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80068d2:	200a      	movs	r0, #10
 80068d4:	f7fa fc6a 	bl	80011ac <HAL_Delay>

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006906:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <USB_DriveVbus+0x44>
 8006912:	78fb      	ldrb	r3, [r7, #3]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d106      	bne.n	8006926 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006920:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006924:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800692c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006930:	d109      	bne.n	8006946 <USB_DriveVbus+0x64>
 8006932:	78fb      	ldrb	r3, [r7, #3]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d106      	bne.n	8006946 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006940:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006944:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	0c5b      	lsrs	r3, r3, #17
 8006972:	f003 0303 	and.w	r3, r3, #3
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	b29b      	uxth	r3, r3
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	4608      	mov	r0, r1
 80069ae:	4611      	mov	r1, r2
 80069b0:	461a      	mov	r2, r3
 80069b2:	4603      	mov	r3, r0
 80069b4:	70fb      	strb	r3, [r7, #3]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70bb      	strb	r3, [r7, #2]
 80069ba:	4613      	mov	r3, r2
 80069bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069d2:	461a      	mov	r2, r3
 80069d4:	f04f 33ff 	mov.w	r3, #4294967295
 80069d8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80069da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d87c      	bhi.n	8006adc <USB_HC_Init+0x138>
 80069e2:	a201      	add	r2, pc, #4	@ (adr r2, 80069e8 <USB_HC_Init+0x44>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	080069f9 	.word	0x080069f9
 80069ec:	08006a9f 	.word	0x08006a9f
 80069f0:	080069f9 	.word	0x080069f9
 80069f4:	08006a61 	.word	0x08006a61
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a04:	461a      	mov	r2, r3
 8006a06:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006a0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006a0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	da10      	bge.n	8006a36 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	78fa      	ldrb	r2, [r7, #3]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a32:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006a34:	e055      	b.n	8006ae2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a6f      	ldr	r2, [pc, #444]	@ (8006bf8 <USB_HC_Init+0x254>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d151      	bne.n	8006ae2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	0151      	lsls	r1, r2, #5
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	440a      	add	r2, r1
 8006a54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a58:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006a5c:	60d3      	str	r3, [r2, #12]
      break;
 8006a5e:	e040      	b.n	8006ae2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006a72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	da34      	bge.n	8006ae6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	78fa      	ldrb	r2, [r7, #3]
 8006a8c:	0151      	lsls	r1, r2, #5
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	440a      	add	r2, r1
 8006a92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a9a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006a9c:	e023      	b.n	8006ae6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a9e:	78fb      	ldrb	r3, [r7, #3]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f240 2325 	movw	r3, #549	@ 0x225
 8006ab0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ab2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	da17      	bge.n	8006aea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006aba:	78fb      	ldrb	r3, [r7, #3]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	78fa      	ldrb	r2, [r7, #3]
 8006aca:	0151      	lsls	r1, r2, #5
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	440a      	add	r2, r1
 8006ad0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ad4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006ad8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006ada:	e006      	b.n	8006aea <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	77fb      	strb	r3, [r7, #31]
      break;
 8006ae0:	e004      	b.n	8006aec <USB_HC_Init+0x148>
      break;
 8006ae2:	bf00      	nop
 8006ae4:	e002      	b.n	8006aec <USB_HC_Init+0x148>
      break;
 8006ae6:	bf00      	nop
 8006ae8:	e000      	b.n	8006aec <USB_HC_Init+0x148>
      break;
 8006aea:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006aec:	78fb      	ldrb	r3, [r7, #3]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006af8:	461a      	mov	r2, r3
 8006afa:	2300      	movs	r3, #0
 8006afc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006afe:	78fb      	ldrb	r3, [r7, #3]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	78fa      	ldrb	r2, [r7, #3]
 8006b0e:	0151      	lsls	r1, r2, #5
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	440a      	add	r2, r1
 8006b14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b18:	f043 0302 	orr.w	r3, r3, #2
 8006b1c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b32:	6939      	ldr	r1, [r7, #16]
 8006b34:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006b48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	da03      	bge.n	8006b58 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006b50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	e001      	b.n	8006b5c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7ff fef9 	bl	8006954 <USB_GetHostSpeed>
 8006b62:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006b64:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d106      	bne.n	8006b7a <USB_HC_Init+0x1d6>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d003      	beq.n	8006b7a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006b72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	e001      	b.n	8006b7e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b7e:	787b      	ldrb	r3, [r7, #1]
 8006b80:	059b      	lsls	r3, r3, #22
 8006b82:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b86:	78bb      	ldrb	r3, [r7, #2]
 8006b88:	02db      	lsls	r3, r3, #11
 8006b8a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b8e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b90:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b94:	049b      	lsls	r3, r3, #18
 8006b96:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b9a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006b9c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006ba2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006bac:	78fa      	ldrb	r2, [r7, #3]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006bb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006bbc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006bbe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d003      	beq.n	8006bce <USB_HC_Init+0x22a>
 8006bc6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d10f      	bne.n	8006bee <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	78fa      	ldrb	r2, [r7, #3]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006be8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006bec:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006bee:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3720      	adds	r7, #32
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40040000 	.word	0x40040000

08006bfc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08c      	sub	sp, #48	@ 0x30
 8006c00:	af02      	add	r7, sp, #8
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	4613      	mov	r3, r2
 8006c08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	785b      	ldrb	r3, [r3, #1]
 8006c12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c18:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8006d94 <USB_HC_StartXfer+0x198>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d12f      	bne.n	8006c82 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006c22:	79fb      	ldrb	r3, [r7, #7]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d11c      	bne.n	8006c62 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	7c9b      	ldrb	r3, [r3, #18]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <USB_HC_StartXfer+0x3c>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	7c9b      	ldrb	r3, [r3, #18]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d124      	bne.n	8006c82 <USB_HC_StartXfer+0x86>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	799b      	ldrb	r3, [r3, #6]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d120      	bne.n	8006c82 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	0151      	lsls	r1, r2, #5
 8006c52:	6a3a      	ldr	r2, [r7, #32]
 8006c54:	440a      	add	r2, r1
 8006c56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c5e:	60d3      	str	r3, [r2, #12]
 8006c60:	e00f      	b.n	8006c82 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	791b      	ldrb	r3, [r3, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10b      	bne.n	8006c82 <USB_HC_StartXfer+0x86>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	795b      	ldrb	r3, [r3, #5]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d107      	bne.n	8006c82 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	4619      	mov	r1, r3
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 fb6b 	bl	8007354 <USB_DoPing>
        return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e232      	b.n	80070e8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	799b      	ldrb	r3, [r3, #6]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d158      	bne.n	8006d3c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	78db      	ldrb	r3, [r3, #3]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d007      	beq.n	8006ca6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	8a92      	ldrh	r2, [r2, #20]
 8006c9c:	fb03 f202 	mul.w	r2, r3, r2
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	61da      	str	r2, [r3, #28]
 8006ca4:	e07c      	b.n	8006da0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	7c9b      	ldrb	r3, [r3, #18]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d130      	bne.n	8006d10 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	2bbc      	cmp	r3, #188	@ 0xbc
 8006cb4:	d918      	bls.n	8006ce8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	8a9b      	ldrh	r3, [r3, #20]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d003      	beq.n	8006cd8 <USB_HC_StartXfer+0xdc>
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d103      	bne.n	8006ce0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	60da      	str	r2, [r3, #12]
 8006cde:	e05f      	b.n	8006da0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	60da      	str	r2, [r3, #12]
 8006ce6:	e05b      	b.n	8006da0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	6a1a      	ldr	r2, [r3, #32]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d007      	beq.n	8006d08 <USB_HC_StartXfer+0x10c>
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d003      	beq.n	8006d08 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2204      	movs	r2, #4
 8006d04:	60da      	str	r2, [r3, #12]
 8006d06:	e04b      	b.n	8006da0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2203      	movs	r2, #3
 8006d0c:	60da      	str	r2, [r3, #12]
 8006d0e:	e047      	b.n	8006da0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006d10:	79fb      	ldrb	r3, [r7, #7]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d10d      	bne.n	8006d32 <USB_HC_StartXfer+0x136>
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	8a92      	ldrh	r2, [r2, #20]
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d907      	bls.n	8006d32 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006d22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	8a92      	ldrh	r2, [r2, #20]
 8006d28:	fb03 f202 	mul.w	r2, r3, r2
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	61da      	str	r2, [r3, #28]
 8006d30:	e036      	b.n	8006da0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	6a1a      	ldr	r2, [r3, #32]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	61da      	str	r2, [r3, #28]
 8006d3a:	e031      	b.n	8006da0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d018      	beq.n	8006d76 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	8a92      	ldrh	r2, [r2, #20]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	8a92      	ldrh	r2, [r2, #20]
 8006d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d58:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006d5a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006d5c:	8b7b      	ldrh	r3, [r7, #26]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d90b      	bls.n	8006d7a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006d62:	8b7b      	ldrh	r3, [r7, #26]
 8006d64:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006d66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	8a92      	ldrh	r2, [r2, #20]
 8006d6c:	fb03 f202 	mul.w	r2, r3, r2
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	61da      	str	r2, [r3, #28]
 8006d74:	e001      	b.n	8006d7a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006d76:	2301      	movs	r3, #1
 8006d78:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	78db      	ldrb	r3, [r3, #3]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006d82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	8a92      	ldrh	r2, [r2, #20]
 8006d88:	fb03 f202 	mul.w	r2, r3, r2
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	61da      	str	r2, [r3, #28]
 8006d90:	e006      	b.n	8006da0 <USB_HC_StartXfer+0x1a4>
 8006d92:	bf00      	nop
 8006d94:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	6a1a      	ldr	r2, [r3, #32]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006da8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006daa:	04d9      	lsls	r1, r3, #19
 8006dac:	4ba3      	ldr	r3, [pc, #652]	@ (800703c <USB_HC_StartXfer+0x440>)
 8006dae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006db0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	7d9b      	ldrb	r3, [r3, #22]
 8006db6:	075b      	lsls	r3, r3, #29
 8006db8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006dbc:	69f9      	ldr	r1, [r7, #28]
 8006dbe:	0148      	lsls	r0, r1, #5
 8006dc0:	6a39      	ldr	r1, [r7, #32]
 8006dc2:	4401      	add	r1, r0
 8006dc4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006dc8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006dca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006dcc:	79fb      	ldrb	r3, [r7, #7]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d009      	beq.n	8006de6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6999      	ldr	r1, [r3, #24]
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de2:	460a      	mov	r2, r1
 8006de4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	bf0c      	ite	eq
 8006df6:	2301      	moveq	r3, #1
 8006df8:	2300      	movne	r3, #0
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	0151      	lsls	r1, r2, #5
 8006e10:	6a3a      	ldr	r2, [r7, #32]
 8006e12:	440a      	add	r2, r1
 8006e14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006e1c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	7e7b      	ldrb	r3, [r7, #25]
 8006e2e:	075b      	lsls	r3, r3, #29
 8006e30:	69f9      	ldr	r1, [r7, #28]
 8006e32:	0148      	lsls	r0, r1, #5
 8006e34:	6a39      	ldr	r1, [r7, #32]
 8006e36:	4401      	add	r1, r0
 8006e38:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	799b      	ldrb	r3, [r3, #6]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	f040 80c3 	bne.w	8006fd0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	7c5b      	ldrb	r3, [r3, #17]
 8006e4e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006e54:	4313      	orrs	r3, r2
 8006e56:	69fa      	ldr	r2, [r7, #28]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006e62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006e66:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	6a3a      	ldr	r2, [r7, #32]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e82:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006e86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	79db      	ldrb	r3, [r3, #7]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d123      	bne.n	8006ed8 <USB_HC_StartXfer+0x2dc>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	78db      	ldrb	r3, [r3, #3]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d11f      	bne.n	8006ed8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	69fa      	ldr	r2, [r7, #28]
 8006ea8:	0151      	lsls	r1, r2, #5
 8006eaa:	6a3a      	ldr	r2, [r7, #32]
 8006eac:	440a      	add	r2, r1
 8006eae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eb6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	69fa      	ldr	r2, [r7, #28]
 8006ec8:	0151      	lsls	r1, r2, #5
 8006eca:	6a3a      	ldr	r2, [r7, #32]
 8006ecc:	440a      	add	r2, r1
 8006ece:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ed6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	7c9b      	ldrb	r3, [r3, #18]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d003      	beq.n	8006ee8 <USB_HC_StartXfer+0x2ec>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	7c9b      	ldrb	r3, [r3, #18]
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d117      	bne.n	8006f18 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d113      	bne.n	8006f18 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	78db      	ldrb	r3, [r3, #3]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d10f      	bne.n	8006f18 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	0151      	lsls	r1, r2, #5
 8006f0a:	6a3a      	ldr	r2, [r7, #32]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f16:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	7c9b      	ldrb	r3, [r3, #18]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d162      	bne.n	8006fe6 <USB_HC_StartXfer+0x3ea>
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	78db      	ldrb	r3, [r3, #3]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d15e      	bne.n	8006fe6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d858      	bhi.n	8006fe4 <USB_HC_StartXfer+0x3e8>
 8006f32:	a201      	add	r2, pc, #4	@ (adr r2, 8006f38 <USB_HC_StartXfer+0x33c>)
 8006f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f38:	08006f49 	.word	0x08006f49
 8006f3c:	08006f6b 	.word	0x08006f6b
 8006f40:	08006f8d 	.word	0x08006f8d
 8006f44:	08006faf 	.word	0x08006faf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	0151      	lsls	r1, r2, #5
 8006f5a:	6a3a      	ldr	r2, [r7, #32]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f66:	6053      	str	r3, [r2, #4]
          break;
 8006f68:	e03d      	b.n	8006fe6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	0151      	lsls	r1, r2, #5
 8006f7c:	6a3a      	ldr	r2, [r7, #32]
 8006f7e:	440a      	add	r2, r1
 8006f80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f84:	f043 030e 	orr.w	r3, r3, #14
 8006f88:	6053      	str	r3, [r2, #4]
          break;
 8006f8a:	e02c      	b.n	8006fe6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	6a3a      	ldr	r2, [r7, #32]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006faa:	6053      	str	r3, [r2, #4]
          break;
 8006fac:	e01b      	b.n	8006fe6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	6a3a      	ldr	r2, [r7, #32]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fcc:	6053      	str	r3, [r2, #4]
          break;
 8006fce:	e00a      	b.n	8006fe6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fdc:	461a      	mov	r2, r3
 8006fde:	2300      	movs	r3, #0
 8006fe0:	6053      	str	r3, [r2, #4]
 8006fe2:	e000      	b.n	8006fe6 <USB_HC_StartXfer+0x3ea>
          break;
 8006fe4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ffc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	78db      	ldrb	r3, [r3, #3]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800700c:	613b      	str	r3, [r7, #16]
 800700e:	e003      	b.n	8007018 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007016:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800701e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	4413      	add	r3, r2
 8007028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800702c:	461a      	mov	r2, r3
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	e055      	b.n	80070e8 <USB_HC_StartXfer+0x4ec>
 800703c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	78db      	ldrb	r3, [r3, #3]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d14e      	bne.n	80070e6 <USB_HC_StartXfer+0x4ea>
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d04a      	beq.n	80070e6 <USB_HC_StartXfer+0x4ea>
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	79db      	ldrb	r3, [r3, #7]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d146      	bne.n	80070e6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	7c9b      	ldrb	r3, [r3, #18]
 800705c:	2b03      	cmp	r3, #3
 800705e:	d831      	bhi.n	80070c4 <USB_HC_StartXfer+0x4c8>
 8007060:	a201      	add	r2, pc, #4	@ (adr r2, 8007068 <USB_HC_StartXfer+0x46c>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	08007079 	.word	0x08007079
 800706c:	0800709d 	.word	0x0800709d
 8007070:	08007079 	.word	0x08007079
 8007074:	0800709d 	.word	0x0800709d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	3303      	adds	r3, #3
 800707e:	089b      	lsrs	r3, r3, #2
 8007080:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007082:	8afa      	ldrh	r2, [r7, #22]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007088:	b29b      	uxth	r3, r3
 800708a:	429a      	cmp	r2, r3
 800708c:	d91c      	bls.n	80070c8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	f043 0220 	orr.w	r2, r3, #32
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	619a      	str	r2, [r3, #24]
        }
        break;
 800709a:	e015      	b.n	80070c8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	3303      	adds	r3, #3
 80070a2:	089b      	lsrs	r3, r3, #2
 80070a4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80070a6:	8afa      	ldrh	r2, [r7, #22]
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d90a      	bls.n	80070cc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	619a      	str	r2, [r3, #24]
        }
        break;
 80070c2:	e003      	b.n	80070cc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80070c4:	bf00      	nop
 80070c6:	e002      	b.n	80070ce <USB_HC_StartXfer+0x4d2>
        break;
 80070c8:	bf00      	nop
 80070ca:	e000      	b.n	80070ce <USB_HC_StartXfer+0x4d2>
        break;
 80070cc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	6999      	ldr	r1, [r3, #24]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	785a      	ldrb	r2, [r3, #1]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	2000      	movs	r0, #0
 80070de:	9000      	str	r0, [sp, #0]
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7ff f9c3 	bl	800646c <USB_WritePacket>
  }

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3728      	adds	r7, #40	@ 0x28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	b29b      	uxth	r3, r3
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007112:	b480      	push	{r7}
 8007114:	b089      	sub	sp, #36	@ 0x24
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	460b      	mov	r3, r1
 800711c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	4413      	add	r3, r2
 8007132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	0c9b      	lsrs	r3, r3, #18
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	4413      	add	r3, r2
 8007148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	0fdb      	lsrs	r3, r3, #31
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	4413      	add	r3, r2
 800715e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	0fdb      	lsrs	r3, r3, #31
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b20      	cmp	r3, #32
 8007176:	d10d      	bne.n	8007194 <USB_HC_Halt+0x82>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10a      	bne.n	8007194 <USB_HC_Halt+0x82>
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d002      	beq.n	8007190 <USB_HC_Halt+0x7e>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b03      	cmp	r3, #3
 800718e:	d101      	bne.n	8007194 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	e0d8      	b.n	8007346 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <USB_HC_Halt+0x8e>
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d173      	bne.n	8007288 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071be:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 0320 	and.w	r3, r3, #32
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d14a      	bne.n	8007262 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d133      	bne.n	8007240 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071f6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	440a      	add	r2, r1
 800720e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007212:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007216:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	3301      	adds	r3, #1
 800721c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007224:	d82e      	bhi.n	8007284 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800723c:	d0ec      	beq.n	8007218 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800723e:	e081      	b.n	8007344 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	4413      	add	r3, r2
 8007248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	0151      	lsls	r1, r2, #5
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	440a      	add	r2, r1
 8007256:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800725a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800725e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007260:	e070      	b.n	8007344 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	4413      	add	r3, r2
 800726a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	0151      	lsls	r1, r2, #5
 8007274:	69fa      	ldr	r2, [r7, #28]
 8007276:	440a      	add	r2, r1
 8007278:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800727c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007280:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007282:	e05f      	b.n	8007344 <USB_HC_Halt+0x232>
            break;
 8007284:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007286:	e05d      	b.n	8007344 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	4413      	add	r3, r2
 8007290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	0151      	lsls	r1, r2, #5
 800729a:	69fa      	ldr	r2, [r7, #28]
 800729c:	440a      	add	r2, r1
 800729e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072a6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d133      	bne.n	8007320 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	0151      	lsls	r1, r2, #5
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	440a      	add	r2, r1
 80072ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	0151      	lsls	r1, r2, #5
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	440a      	add	r2, r1
 80072ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072f6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	3301      	adds	r3, #1
 80072fc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007304:	d81d      	bhi.n	8007342 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	4413      	add	r3, r2
 800730e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007318:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800731c:	d0ec      	beq.n	80072f8 <USB_HC_Halt+0x1e6>
 800731e:	e011      	b.n	8007344 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	4413      	add	r3, r2
 8007328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	0151      	lsls	r1, r2, #5
 8007332:	69fa      	ldr	r2, [r7, #28]
 8007334:	440a      	add	r2, r1
 8007336:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800733a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	e000      	b.n	8007344 <USB_HC_Halt+0x232>
          break;
 8007342:	bf00      	nop
    }
  }

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3724      	adds	r7, #36	@ 0x24
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
	...

08007354 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007368:	2301      	movs	r3, #1
 800736a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	04da      	lsls	r2, r3, #19
 8007370:	4b15      	ldr	r3, [pc, #84]	@ (80073c8 <USB_DoPing+0x74>)
 8007372:	4013      	ands	r3, r2
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	440a      	add	r2, r1
 800737c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007380:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007384:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	4413      	add	r3, r2
 800738e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800739c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80073a4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073b2:	461a      	mov	r2, r3
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	1ff80000 	.word	0x1ff80000

080073cc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7fe ff86 	bl	80062f2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073e6:	2110      	movs	r1, #16
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7fe ffdf 	bl	80063ac <USB_FlushTxFifo>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff f809 	bl	8006410 <USB_FlushRxFifo>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007408:	2300      	movs	r3, #0
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	e01f      	b.n	800744e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	4413      	add	r3, r2
 8007416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007424:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800742c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007434:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	4413      	add	r3, r2
 800743e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007442:	461a      	mov	r2, r3
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	3301      	adds	r3, #1
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b0f      	cmp	r3, #15
 8007452:	d9dc      	bls.n	800740e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007454:	2300      	movs	r3, #0
 8007456:	61bb      	str	r3, [r7, #24]
 8007458:	e034      	b.n	80074c4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	4413      	add	r3, r2
 8007462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007470:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007478:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007480:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	4413      	add	r3, r2
 800748a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800748e:	461a      	mov	r2, r3
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3301      	adds	r3, #1
 8007498:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074a0:	d80c      	bhi.n	80074bc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074b8:	d0ec      	beq.n	8007494 <USB_StopHost+0xc8>
 80074ba:	e000      	b.n	80074be <USB_StopHost+0xf2>
        break;
 80074bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	3301      	adds	r3, #1
 80074c2:	61bb      	str	r3, [r7, #24]
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	2b0f      	cmp	r3, #15
 80074c8:	d9c7      	bls.n	800745a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074d0:	461a      	mov	r2, r3
 80074d2:	f04f 33ff 	mov.w	r3, #4294967295
 80074d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f04f 32ff 	mov.w	r2, #4294967295
 80074de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7fe fef5 	bl	80062d0 <USB_EnableGlobalInt>

  return ret;
 80074e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3720      	adds	r7, #32
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80074f0:	b590      	push	{r4, r7, lr}
 80074f2:	b089      	sub	sp, #36	@ 0x24
 80074f4:	af04      	add	r7, sp, #16
 80074f6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80074f8:	2301      	movs	r3, #1
 80074fa:	2202      	movs	r2, #2
 80074fc:	2102      	movs	r1, #2
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fc83 	bl	8007e0a <USBH_FindInterface>
 8007504:	4603      	mov	r3, r0
 8007506:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	2bff      	cmp	r3, #255	@ 0xff
 800750c:	d002      	beq.n	8007514 <USBH_CDC_InterfaceInit+0x24>
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d901      	bls.n	8007518 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007514:	2302      	movs	r3, #2
 8007516:	e13d      	b.n	8007794 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fc58 	bl	8007dd2 <USBH_SelectInterface>
 8007522:	4603      	mov	r3, r0
 8007524:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800752c:	2302      	movs	r3, #2
 800752e:	e131      	b.n	8007794 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007536:	2050      	movs	r0, #80	@ 0x50
 8007538:	f002 fb6a 	bl	8009c10 <malloc>
 800753c:	4603      	mov	r3, r0
 800753e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007550:	2302      	movs	r3, #2
 8007552:	e11f      	b.n	8007794 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007554:	2250      	movs	r2, #80	@ 0x50
 8007556:	2100      	movs	r1, #0
 8007558:	68b8      	ldr	r0, [r7, #8]
 800755a:	f002 fc17 	bl	8009d8c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800755e:	7bfb      	ldrb	r3, [r7, #15]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	211a      	movs	r1, #26
 8007564:	fb01 f303 	mul.w	r3, r1, r3
 8007568:	4413      	add	r3, r2
 800756a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	b25b      	sxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	da15      	bge.n	80075a2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	211a      	movs	r1, #26
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	4413      	add	r3, r2
 8007582:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007586:	781a      	ldrb	r2, [r3, #0]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	211a      	movs	r1, #26
 8007592:	fb01 f303 	mul.w	r3, r1, r3
 8007596:	4413      	add	r3, r2
 8007598:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800759c:	881a      	ldrh	r2, [r3, #0]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	785b      	ldrb	r3, [r3, #1]
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 ffc4 	bl	8009536 <USBH_AllocPipe>
 80075ae:	4603      	mov	r3, r0
 80075b0:	461a      	mov	r2, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	7819      	ldrb	r1, [r3, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	7858      	ldrb	r0, [r3, #1]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	8952      	ldrh	r2, [r2, #10]
 80075ce:	9202      	str	r2, [sp, #8]
 80075d0:	2203      	movs	r2, #3
 80075d2:	9201      	str	r2, [sp, #4]
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	4623      	mov	r3, r4
 80075d8:	4602      	mov	r2, r0
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f001 ff7c 	bl	80094d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2200      	movs	r2, #0
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f002 fa8b 	bl	8009b04 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80075ee:	2300      	movs	r3, #0
 80075f0:	2200      	movs	r2, #0
 80075f2:	210a      	movs	r1, #10
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fc08 	bl	8007e0a <USBH_FindInterface>
 80075fa:	4603      	mov	r3, r0
 80075fc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	2bff      	cmp	r3, #255	@ 0xff
 8007602:	d002      	beq.n	800760a <USBH_CDC_InterfaceInit+0x11a>
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d901      	bls.n	800760e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800760a:	2302      	movs	r3, #2
 800760c:	e0c2      	b.n	8007794 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	211a      	movs	r1, #26
 8007614:	fb01 f303 	mul.w	r3, r1, r3
 8007618:	4413      	add	r3, r2
 800761a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	b25b      	sxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	da16      	bge.n	8007654 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007626:	7bfb      	ldrb	r3, [r7, #15]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	211a      	movs	r1, #26
 800762c:	fb01 f303 	mul.w	r3, r1, r3
 8007630:	4413      	add	r3, r2
 8007632:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007636:	781a      	ldrb	r2, [r3, #0]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	211a      	movs	r1, #26
 8007642:	fb01 f303 	mul.w	r3, r1, r3
 8007646:	4413      	add	r3, r2
 8007648:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800764c:	881a      	ldrh	r2, [r3, #0]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	835a      	strh	r2, [r3, #26]
 8007652:	e015      	b.n	8007680 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	211a      	movs	r1, #26
 800765a:	fb01 f303 	mul.w	r3, r1, r3
 800765e:	4413      	add	r3, r2
 8007660:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007664:	781a      	ldrb	r2, [r3, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	211a      	movs	r1, #26
 8007670:	fb01 f303 	mul.w	r3, r1, r3
 8007674:	4413      	add	r3, r2
 8007676:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800767a:	881a      	ldrh	r2, [r3, #0]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	211a      	movs	r1, #26
 8007686:	fb01 f303 	mul.w	r3, r1, r3
 800768a:	4413      	add	r3, r2
 800768c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	b25b      	sxtb	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	da16      	bge.n	80076c6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	211a      	movs	r1, #26
 800769e:	fb01 f303 	mul.w	r3, r1, r3
 80076a2:	4413      	add	r3, r2
 80076a4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80076a8:	781a      	ldrb	r2, [r3, #0]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	211a      	movs	r1, #26
 80076b4:	fb01 f303 	mul.w	r3, r1, r3
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80076be:	881a      	ldrh	r2, [r3, #0]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	835a      	strh	r2, [r3, #26]
 80076c4:	e015      	b.n	80076f2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	211a      	movs	r1, #26
 80076cc:	fb01 f303 	mul.w	r3, r1, r3
 80076d0:	4413      	add	r3, r2
 80076d2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80076d6:	781a      	ldrb	r2, [r3, #0]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	211a      	movs	r1, #26
 80076e2:	fb01 f303 	mul.w	r3, r1, r3
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80076ec:	881a      	ldrh	r2, [r3, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	7b9b      	ldrb	r3, [r3, #14]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 ff1c 	bl	8009536 <USBH_AllocPipe>
 80076fe:	4603      	mov	r3, r0
 8007700:	461a      	mov	r2, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	7bdb      	ldrb	r3, [r3, #15]
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 ff12 	bl	8009536 <USBH_AllocPipe>
 8007712:	4603      	mov	r3, r0
 8007714:	461a      	mov	r2, r3
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	7b59      	ldrb	r1, [r3, #13]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	7b98      	ldrb	r0, [r3, #14]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	8b12      	ldrh	r2, [r2, #24]
 8007732:	9202      	str	r2, [sp, #8]
 8007734:	2202      	movs	r2, #2
 8007736:	9201      	str	r2, [sp, #4]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	4623      	mov	r3, r4
 800773c:	4602      	mov	r2, r0
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 feca 	bl	80094d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	7b19      	ldrb	r1, [r3, #12]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	7bd8      	ldrb	r0, [r3, #15]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	8b52      	ldrh	r2, [r2, #26]
 800775c:	9202      	str	r2, [sp, #8]
 800775e:	2202      	movs	r2, #2
 8007760:	9201      	str	r2, [sp, #4]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	4623      	mov	r3, r4
 8007766:	4602      	mov	r2, r0
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 feb5 	bl	80094d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	7b5b      	ldrb	r3, [r3, #13]
 800777a:	2200      	movs	r2, #0
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f002 f9c0 	bl	8009b04 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	7b1b      	ldrb	r3, [r3, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f002 f9b9 	bl	8009b04 <USBH_LL_SetToggle>

  return USBH_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	bd90      	pop	{r4, r7, pc}

0800779c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00e      	beq.n	80077d4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 feaa 	bl	8009516 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 fed5 	bl	8009578 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	7b1b      	ldrb	r3, [r3, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00e      	beq.n	80077fa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	7b1b      	ldrb	r3, [r3, #12]
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f001 fe97 	bl	8009516 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	7b1b      	ldrb	r3, [r3, #12]
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f001 fec2 	bl	8009578 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	7b5b      	ldrb	r3, [r3, #13]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00e      	beq.n	8007820 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	7b5b      	ldrb	r3, [r3, #13]
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 fe84 	bl	8009516 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	7b5b      	ldrb	r3, [r3, #13]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 feaf 	bl	8009578 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00b      	beq.n	8007844 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	4618      	mov	r0, r3
 8007836:	f002 f9f3 	bl	8009c20 <free>
    phost->pActiveClass->pData = 0U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007840:	2200      	movs	r2, #0
 8007842:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3340      	adds	r3, #64	@ 0x40
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f8b1 	bl	80079ce <GetLineCoding>
 800786c:	4603      	mov	r3, r0
 800786e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007870:	7afb      	ldrb	r3, [r7, #11]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d105      	bne.n	8007882 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800787c:	2102      	movs	r1, #2
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007882:	7afb      	ldrb	r3, [r7, #11]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007894:	2301      	movs	r3, #1
 8007896:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d877      	bhi.n	80079a0 <USBH_CDC_Process+0x114>
 80078b0:	a201      	add	r2, pc, #4	@ (adr r2, 80078b8 <USBH_CDC_Process+0x2c>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078cd 	.word	0x080078cd
 80078bc:	080078d3 	.word	0x080078d3
 80078c0:	08007903 	.word	0x08007903
 80078c4:	08007977 	.word	0x08007977
 80078c8:	08007985 	.word	0x08007985
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	73fb      	strb	r3, [r7, #15]
      break;
 80078d0:	e06d      	b.n	80079ae <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f897 	bl	8007a0c <SetLineCoding>
 80078de:	4603      	mov	r3, r0
 80078e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d104      	bne.n	80078f2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078f0:	e058      	b.n	80079a4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d055      	beq.n	80079a4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2204      	movs	r2, #4
 80078fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007900:	e050      	b.n	80079a4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	3340      	adds	r3, #64	@ 0x40
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f860 	bl	80079ce <GetLineCoding>
 800790e:	4603      	mov	r3, r0
 8007910:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d126      	bne.n	8007966 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800792a:	791b      	ldrb	r3, [r3, #4]
 800792c:	429a      	cmp	r2, r3
 800792e:	d13b      	bne.n	80079a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800793a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800793c:	429a      	cmp	r2, r3
 800793e:	d133      	bne.n	80079a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800794a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800794c:	429a      	cmp	r2, r3
 800794e:	d12b      	bne.n	80079a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007958:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800795a:	429a      	cmp	r2, r3
 800795c:	d124      	bne.n	80079a8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f958 	bl	8007c14 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007964:	e020      	b.n	80079a8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d01d      	beq.n	80079a8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2204      	movs	r2, #4
 8007970:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007974:	e018      	b.n	80079a8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f867 	bl	8007a4a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f8da 	bl	8007b36 <CDC_ProcessReception>
      break;
 8007982:	e014      	b.n	80079ae <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007984:	2100      	movs	r1, #0
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f001 f81e 	bl	80089c8 <USBH_ClrFeature>
 800798c:	4603      	mov	r3, r0
 800798e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10a      	bne.n	80079ac <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800799e:	e005      	b.n	80079ac <USBH_CDC_Process+0x120>

    default:
      break;
 80079a0:	bf00      	nop
 80079a2:	e004      	b.n	80079ae <USBH_CDC_Process+0x122>
      break;
 80079a4:	bf00      	nop
 80079a6:	e002      	b.n	80079ae <USBH_CDC_Process+0x122>
      break;
 80079a8:	bf00      	nop
 80079aa:	e000      	b.n	80079ae <USBH_CDC_Process+0x122>
      break;
 80079ac:	bf00      	nop

  }

  return status;
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	22a1      	movs	r2, #161	@ 0xa1
 80079dc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2221      	movs	r2, #33	@ 0x21
 80079e2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2207      	movs	r2, #7
 80079f4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2207      	movs	r2, #7
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 fb17 	bl	8009030 <USBH_CtlReq>
 8007a02:	4603      	mov	r3, r0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2221      	movs	r2, #33	@ 0x21
 8007a1a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2207      	movs	r2, #7
 8007a32:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2207      	movs	r2, #7
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f001 faf8 	bl	8009030 <USBH_CtlReq>
 8007a40:	4603      	mov	r3, r0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b086      	sub	sp, #24
 8007a4e:	af02      	add	r7, sp, #8
 8007a50:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d002      	beq.n	8007a70 <CDC_ProcessTransmission+0x26>
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d023      	beq.n	8007ab6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007a6e:	e05e      	b.n	8007b2e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	8b12      	ldrh	r2, [r2, #24]
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d90b      	bls.n	8007a94 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	69d9      	ldr	r1, [r3, #28]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8b1a      	ldrh	r2, [r3, #24]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	7b5b      	ldrb	r3, [r3, #13]
 8007a88:	2001      	movs	r0, #1
 8007a8a:	9000      	str	r0, [sp, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 fce0 	bl	8009452 <USBH_BulkSendData>
 8007a92:	e00b      	b.n	8007aac <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	7b5b      	ldrb	r3, [r3, #13]
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	9000      	str	r0, [sp, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 fcd3 	bl	8009452 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007ab4:	e03b      	b.n	8007b2e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	7b5b      	ldrb	r3, [r3, #13]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 fff7 	bl	8009ab0 <USBH_LL_GetURBState>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007ac6:	7afb      	ldrb	r3, [r7, #11]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d128      	bne.n	8007b1e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	8b12      	ldrh	r2, [r2, #24]
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d90e      	bls.n	8007af6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	8b12      	ldrh	r2, [r2, #24]
 8007ae0:	1a9a      	subs	r2, r3, r2
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	8b12      	ldrh	r2, [r2, #24]
 8007aee:	441a      	add	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	61da      	str	r2, [r3, #28]
 8007af4:	e002      	b.n	8007afc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d004      	beq.n	8007b0e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007b0c:	e00e      	b.n	8007b2c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f868 	bl	8007bec <USBH_CDC_TransmitCallback>
      break;
 8007b1c:	e006      	b.n	8007b2c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007b1e:	7afb      	ldrb	r3, [r7, #11]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d103      	bne.n	8007b2c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007b2c:	bf00      	nop
  }
}
 8007b2e:	bf00      	nop
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b086      	sub	sp, #24
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d002      	beq.n	8007b5c <CDC_ProcessReception+0x26>
 8007b56:	2b04      	cmp	r3, #4
 8007b58:	d00e      	beq.n	8007b78 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8007b5a:	e043      	b.n	8007be4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	6a19      	ldr	r1, [r3, #32]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	8b5a      	ldrh	r2, [r3, #26]
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	7b1b      	ldrb	r3, [r3, #12]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 fc97 	bl	800949c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2204      	movs	r2, #4
 8007b72:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007b76:	e035      	b.n	8007be4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	7b1b      	ldrb	r3, [r3, #12]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 ff96 	bl	8009ab0 <USBH_LL_GetURBState>
 8007b84:	4603      	mov	r3, r0
 8007b86:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007b88:	7cfb      	ldrb	r3, [r7, #19]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d129      	bne.n	8007be2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	7b1b      	ldrb	r3, [r3, #12]
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 fef9 	bl	800998c <USBH_LL_GetLastXferSize>
 8007b9a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d016      	beq.n	8007bd4 <CDC_ProcessReception+0x9e>
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	8b5b      	ldrh	r3, [r3, #26]
 8007baa:	461a      	mov	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d110      	bne.n	8007bd4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	1ad2      	subs	r2, r2, r3
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	6a1a      	ldr	r2, [r3, #32]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	441a      	add	r2, r3
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2203      	movs	r2, #3
 8007bce:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007bd2:	e006      	b.n	8007be2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f80f 	bl	8007c00 <USBH_CDC_ReceiveCallback>
      break;
 8007be2:	bf00      	nop
  }
}
 8007be4:	bf00      	nop
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4613      	mov	r3, r2
 8007c34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d101      	bne.n	8007c40 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	e029      	b.n	8007c94 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	79fa      	ldrb	r2, [r7, #7]
 8007c44:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 f81f 	bl	8007c9c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f001 fdc9 	bl	8009824 <USBH_LL_Init>

  return USBH_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	e009      	b.n	8007cbe <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	33e0      	adds	r3, #224	@ 0xe0
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b0f      	cmp	r3, #15
 8007cc2:	d9f2      	bls.n	8007caa <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	e009      	b.n	8007cde <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ce4:	d3f1      	bcc.n	8007cca <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2240      	movs	r2, #64	@ 0x40
 8007d0a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	331c      	adds	r3, #28
 8007d36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f002 f825 	bl	8009d8c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f002 f81c 	bl	8009d8c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007d5a:	2212      	movs	r2, #18
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f002 f814 	bl	8009d8c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007d6a:	223e      	movs	r2, #62	@ 0x3e
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f002 f80c 	bl	8009d8c <memset>

  return USBH_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b085      	sub	sp, #20
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d016      	beq.n	8007dc0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10e      	bne.n	8007dba <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007da2:	1c59      	adds	r1, r3, #1
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	33de      	adds	r3, #222	@ 0xde
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]
 8007db8:	e004      	b.n	8007dc4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007dba:	2302      	movs	r3, #2
 8007dbc:	73fb      	strb	r3, [r7, #15]
 8007dbe:	e001      	b.n	8007dc4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007de8:	78fa      	ldrb	r2, [r7, #3]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d204      	bcs.n	8007df8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	78fa      	ldrb	r2, [r7, #3]
 8007df2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007df6:	e001      	b.n	8007dfc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007df8:	2302      	movs	r3, #2
 8007dfa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b087      	sub	sp, #28
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	4608      	mov	r0, r1
 8007e14:	4611      	mov	r1, r2
 8007e16:	461a      	mov	r2, r3
 8007e18:	4603      	mov	r3, r0
 8007e1a:	70fb      	strb	r3, [r7, #3]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70bb      	strb	r3, [r7, #2]
 8007e20:	4613      	mov	r3, r2
 8007e22:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007e32:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e34:	e025      	b.n	8007e82 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	221a      	movs	r2, #26
 8007e3a:	fb02 f303 	mul.w	r3, r2, r3
 8007e3e:	3308      	adds	r3, #8
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4413      	add	r3, r2
 8007e44:	3302      	adds	r3, #2
 8007e46:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	795b      	ldrb	r3, [r3, #5]
 8007e4c:	78fa      	ldrb	r2, [r7, #3]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d002      	beq.n	8007e58 <USBH_FindInterface+0x4e>
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	2bff      	cmp	r3, #255	@ 0xff
 8007e56:	d111      	bne.n	8007e7c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e5c:	78ba      	ldrb	r2, [r7, #2]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d002      	beq.n	8007e68 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e62:	78bb      	ldrb	r3, [r7, #2]
 8007e64:	2bff      	cmp	r3, #255	@ 0xff
 8007e66:	d109      	bne.n	8007e7c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e6c:	787a      	ldrb	r2, [r7, #1]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d002      	beq.n	8007e78 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e72:	787b      	ldrb	r3, [r7, #1]
 8007e74:	2bff      	cmp	r3, #255	@ 0xff
 8007e76:	d101      	bne.n	8007e7c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	e006      	b.n	8007e8a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d9d6      	bls.n	8007e36 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007e88:	23ff      	movs	r3, #255	@ 0xff
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b082      	sub	sp, #8
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fcfc 	bl	800989c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 fe15 	bl	8009ad6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
	...

08007eb8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af04      	add	r7, sp, #16
 8007ebe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d102      	bne.n	8007eda <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b0b      	cmp	r3, #11
 8007ee2:	f200 81bc 	bhi.w	800825e <USBH_Process+0x3a6>
 8007ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8007eec <USBH_Process+0x34>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f1d 	.word	0x08007f1d
 8007ef0:	08007f4f 	.word	0x08007f4f
 8007ef4:	08007fb9 	.word	0x08007fb9
 8007ef8:	080081f9 	.word	0x080081f9
 8007efc:	0800825f 	.word	0x0800825f
 8007f00:	08008059 	.word	0x08008059
 8007f04:	0800819f 	.word	0x0800819f
 8007f08:	0800808f 	.word	0x0800808f
 8007f0c:	080080af 	.word	0x080080af
 8007f10:	080080cd 	.word	0x080080cd
 8007f14:	08008111 	.word	0x08008111
 8007f18:	080081e1 	.word	0x080081e1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 819c 	beq.w	8008262 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007f30:	20c8      	movs	r0, #200	@ 0xc8
 8007f32:	f001 fe1a 	bl	8009b6a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 fd0d 	bl	8009956 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007f4c:	e189      	b.n	8008262 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d107      	bne.n	8007f6a <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2202      	movs	r2, #2
 8007f66:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007f68:	e18a      	b.n	8008280 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007f70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f74:	d914      	bls.n	8007fa0 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d903      	bls.n	8007f98 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	220d      	movs	r2, #13
 8007f94:	701a      	strb	r2, [r3, #0]
      break;
 8007f96:	e173      	b.n	8008280 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	701a      	strb	r2, [r3, #0]
      break;
 8007f9e:	e16f      	b.n	8008280 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007fa6:	f103 020a 	add.w	r2, r3, #10
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007fb0:	200a      	movs	r0, #10
 8007fb2:	f001 fdda 	bl	8009b6a <USBH_Delay>
      break;
 8007fb6:	e163      	b.n	8008280 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d005      	beq.n	8007fce <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fc8:	2104      	movs	r1, #4
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007fce:	2064      	movs	r0, #100	@ 0x64
 8007fd0:	f001 fdcb 	bl	8009b6a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 fc97 	bl	8009908 <USBH_LL_GetSpeed>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	461a      	mov	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2205      	movs	r2, #5
 8007fe8:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007fea:	2100      	movs	r1, #0
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 faa2 	bl	8009536 <USBH_AllocPipe>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007ffa:	2180      	movs	r1, #128	@ 0x80
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 fa9a 	bl	8009536 <USBH_AllocPipe>
 8008002:	4603      	mov	r3, r0
 8008004:	461a      	mov	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	7919      	ldrb	r1, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800801e:	9202      	str	r2, [sp, #8]
 8008020:	2200      	movs	r2, #0
 8008022:	9201      	str	r2, [sp, #4]
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	4603      	mov	r3, r0
 8008028:	2280      	movs	r2, #128	@ 0x80
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f001 fa54 	bl	80094d8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	7959      	ldrb	r1, [r3, #5]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008044:	9202      	str	r2, [sp, #8]
 8008046:	2200      	movs	r2, #0
 8008048:	9201      	str	r2, [sp, #4]
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	4603      	mov	r3, r0
 800804e:	2200      	movs	r2, #0
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f001 fa41 	bl	80094d8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008056:	e113      	b.n	8008280 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f917 	bl	800828c <USBH_HandleEnum>
 800805e:	4603      	mov	r3, r0
 8008060:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	f040 80fd 	bne.w	8008266 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800807a:	2b01      	cmp	r3, #1
 800807c:	d103      	bne.n	8008086 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2208      	movs	r2, #8
 8008082:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008084:	e0ef      	b.n	8008266 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2207      	movs	r2, #7
 800808a:	701a      	strb	r2, [r3, #0]
      break;
 800808c:	e0eb      	b.n	8008266 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 80e8 	beq.w	800826a <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80080a0:	2101      	movs	r1, #1
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2208      	movs	r2, #8
 80080aa:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 80080ac:	e0dd      	b.n	800826a <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fc3f 	bl	800893a <USBH_SetCfg>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f040 80d5 	bne.w	800826e <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2209      	movs	r2, #9
 80080c8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80080ca:	e0d0      	b.n	800826e <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80080d2:	f003 0320 	and.w	r3, r3, #32
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d016      	beq.n	8008108 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80080da:	2101      	movs	r1, #1
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fc4f 	bl	8008980 <USBH_SetFeature>
 80080e2:	4603      	mov	r3, r0
 80080e4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d103      	bne.n	80080f6 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	220a      	movs	r2, #10
 80080f2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80080f4:	e0bd      	b.n	8008272 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	f040 80b9 	bne.w	8008272 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	220a      	movs	r2, #10
 8008104:	701a      	strb	r2, [r3, #0]
      break;
 8008106:	e0b4      	b.n	8008272 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	220a      	movs	r2, #10
 800810c:	701a      	strb	r2, [r3, #0]
      break;
 800810e:	e0b0      	b.n	8008272 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 80ad 	beq.w	8008276 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008124:	2300      	movs	r3, #0
 8008126:	73fb      	strb	r3, [r7, #15]
 8008128:	e016      	b.n	8008158 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800812a:	7bfa      	ldrb	r2, [r7, #15]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	32de      	adds	r2, #222	@ 0xde
 8008130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008134:	791a      	ldrb	r2, [r3, #4]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800813c:	429a      	cmp	r2, r3
 800813e:	d108      	bne.n	8008152 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008140:	7bfa      	ldrb	r2, [r7, #15]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	32de      	adds	r2, #222	@ 0xde
 8008146:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008150:	e005      	b.n	800815e <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	3301      	adds	r3, #1
 8008156:	73fb      	strb	r3, [r7, #15]
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0e5      	beq.n	800812a <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d016      	beq.n	8008196 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d109      	bne.n	800818e <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2206      	movs	r2, #6
 800817e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008186:	2103      	movs	r1, #3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800818c:	e073      	b.n	8008276 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	220d      	movs	r2, #13
 8008192:	701a      	strb	r2, [r3, #0]
      break;
 8008194:	e06f      	b.n	8008276 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	220d      	movs	r2, #13
 800819a:	701a      	strb	r2, [r3, #0]
      break;
 800819c:	e06b      	b.n	8008276 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d017      	beq.n	80081d8 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	4798      	blx	r3
 80081b4:	4603      	mov	r3, r0
 80081b6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d103      	bne.n	80081c8 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	220b      	movs	r2, #11
 80081c4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80081c6:	e058      	b.n	800827a <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d154      	bne.n	800827a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	220d      	movs	r2, #13
 80081d4:	701a      	strb	r2, [r3, #0]
      break;
 80081d6:	e050      	b.n	800827a <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	220d      	movs	r2, #13
 80081dc:	701a      	strb	r2, [r3, #0]
      break;
 80081de:	e04c      	b.n	800827a <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d049      	beq.n	800827e <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
      }
      break;
 80081f6:	e042      	b.n	800827e <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff fd4b 	bl	8007c9c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d009      	beq.n	8008224 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800822a:	2b00      	cmp	r3, #0
 800822c:	d005      	beq.n	800823a <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008234:	2105      	movs	r1, #5
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b01      	cmp	r3, #1
 8008244:	d107      	bne.n	8008256 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7ff fe21 	bl	8007e96 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008254:	e014      	b.n	8008280 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 fb20 	bl	800989c <USBH_LL_Start>
      break;
 800825c:	e010      	b.n	8008280 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800825e:	bf00      	nop
 8008260:	e00e      	b.n	8008280 <USBH_Process+0x3c8>
      break;
 8008262:	bf00      	nop
 8008264:	e00c      	b.n	8008280 <USBH_Process+0x3c8>
      break;
 8008266:	bf00      	nop
 8008268:	e00a      	b.n	8008280 <USBH_Process+0x3c8>
    break;
 800826a:	bf00      	nop
 800826c:	e008      	b.n	8008280 <USBH_Process+0x3c8>
      break;
 800826e:	bf00      	nop
 8008270:	e006      	b.n	8008280 <USBH_Process+0x3c8>
      break;
 8008272:	bf00      	nop
 8008274:	e004      	b.n	8008280 <USBH_Process+0x3c8>
      break;
 8008276:	bf00      	nop
 8008278:	e002      	b.n	8008280 <USBH_Process+0x3c8>
      break;
 800827a:	bf00      	nop
 800827c:	e000      	b.n	8008280 <USBH_Process+0x3c8>
      break;
 800827e:	bf00      	nop
  }
  return USBH_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop

0800828c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af04      	add	r7, sp, #16
 8008292:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008294:	2301      	movs	r3, #1
 8008296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008298:	2301      	movs	r3, #1
 800829a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	2b07      	cmp	r3, #7
 80082a2:	f200 81bd 	bhi.w	8008620 <USBH_HandleEnum+0x394>
 80082a6:	a201      	add	r2, pc, #4	@ (adr r2, 80082ac <USBH_HandleEnum+0x20>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	080082cd 	.word	0x080082cd
 80082b0:	08008387 	.word	0x08008387
 80082b4:	080083f1 	.word	0x080083f1
 80082b8:	0800847b 	.word	0x0800847b
 80082bc:	080084e5 	.word	0x080084e5
 80082c0:	08008555 	.word	0x08008555
 80082c4:	0800859b 	.word	0x0800859b
 80082c8:	080085e1 	.word	0x080085e1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80082cc:	2108      	movs	r1, #8
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fa50 	bl	8008774 <USBH_Get_DevDesc>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d12e      	bne.n	800833c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7919      	ldrb	r1, [r3, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008302:	9202      	str	r2, [sp, #8]
 8008304:	2200      	movs	r2, #0
 8008306:	9201      	str	r2, [sp, #4]
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	4603      	mov	r3, r0
 800830c:	2280      	movs	r2, #128	@ 0x80
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 f8e2 	bl	80094d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	7959      	ldrb	r1, [r3, #5]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008328:	9202      	str	r2, [sp, #8]
 800832a:	2200      	movs	r2, #0
 800832c:	9201      	str	r2, [sp, #4]
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	4603      	mov	r3, r0
 8008332:	2200      	movs	r2, #0
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 f8cf 	bl	80094d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800833a:	e173      	b.n	8008624 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	2b03      	cmp	r3, #3
 8008340:	f040 8170 	bne.w	8008624 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800834a:	3301      	adds	r3, #1
 800834c:	b2da      	uxtb	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800835a:	2b03      	cmp	r3, #3
 800835c:	d903      	bls.n	8008366 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	220d      	movs	r2, #13
 8008362:	701a      	strb	r2, [r3, #0]
      break;
 8008364:	e15e      	b.n	8008624 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	795b      	ldrb	r3, [r3, #5]
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 f903 	bl	8009578 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	791b      	ldrb	r3, [r3, #4]
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 f8fd 	bl	8009578 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	701a      	strb	r2, [r3, #0]
      break;
 8008384:	e14e      	b.n	8008624 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008386:	2112      	movs	r1, #18
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f9f3 	bl	8008774 <USBH_Get_DevDesc>
 800838e:	4603      	mov	r3, r0
 8008390:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d103      	bne.n	80083a0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800839e:	e143      	b.n	8008628 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	f040 8140 	bne.w	8008628 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80083ae:	3301      	adds	r3, #1
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d903      	bls.n	80083ca <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	220d      	movs	r2, #13
 80083c6:	701a      	strb	r2, [r3, #0]
      break;
 80083c8:	e12e      	b.n	8008628 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	795b      	ldrb	r3, [r3, #5]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 f8d1 	bl	8009578 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	791b      	ldrb	r3, [r3, #4]
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 f8cb 	bl	8009578 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	701a      	strb	r2, [r3, #0]
      break;
 80083ee:	e11b      	b.n	8008628 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80083f0:	2101      	movs	r1, #1
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa7d 	bl	80088f2 <USBH_SetAddress>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d130      	bne.n	8008464 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008402:	2002      	movs	r0, #2
 8008404:	f001 fbb1 	bl	8009b6a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2203      	movs	r2, #3
 8008414:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	7919      	ldrb	r1, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800842a:	9202      	str	r2, [sp, #8]
 800842c:	2200      	movs	r2, #0
 800842e:	9201      	str	r2, [sp, #4]
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	4603      	mov	r3, r0
 8008434:	2280      	movs	r2, #128	@ 0x80
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 f84e 	bl	80094d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	7959      	ldrb	r1, [r3, #5]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008450:	9202      	str	r2, [sp, #8]
 8008452:	2200      	movs	r2, #0
 8008454:	9201      	str	r2, [sp, #4]
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	4603      	mov	r3, r0
 800845a:	2200      	movs	r2, #0
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f001 f83b 	bl	80094d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008462:	e0e3      	b.n	800862c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	2b03      	cmp	r3, #3
 8008468:	f040 80e0 	bne.w	800862c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	220d      	movs	r2, #13
 8008470:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	705a      	strb	r2, [r3, #1]
      break;
 8008478:	e0d8      	b.n	800862c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800847a:	2109      	movs	r1, #9
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f9a5 	bl	80087cc <USBH_Get_CfgDesc>
 8008482:	4603      	mov	r3, r0
 8008484:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d103      	bne.n	8008494 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2204      	movs	r2, #4
 8008490:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008492:	e0cd      	b.n	8008630 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008494:	7bbb      	ldrb	r3, [r7, #14]
 8008496:	2b03      	cmp	r3, #3
 8008498:	f040 80ca 	bne.w	8008630 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80084a2:	3301      	adds	r3, #1
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d903      	bls.n	80084be <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	220d      	movs	r2, #13
 80084ba:	701a      	strb	r2, [r3, #0]
      break;
 80084bc:	e0b8      	b.n	8008630 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	795b      	ldrb	r3, [r3, #5]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 f857 	bl	8009578 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	791b      	ldrb	r3, [r3, #4]
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f001 f851 	bl	8009578 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	701a      	strb	r2, [r3, #0]
      break;
 80084e2:	e0a5      	b.n	8008630 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f96d 	bl	80087cc <USBH_Get_CfgDesc>
 80084f2:	4603      	mov	r3, r0
 80084f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d103      	bne.n	8008504 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2205      	movs	r2, #5
 8008500:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008502:	e097      	b.n	8008634 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	2b03      	cmp	r3, #3
 8008508:	f040 8094 	bne.w	8008634 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008512:	3301      	adds	r3, #1
 8008514:	b2da      	uxtb	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008522:	2b03      	cmp	r3, #3
 8008524:	d903      	bls.n	800852e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	220d      	movs	r2, #13
 800852a:	701a      	strb	r2, [r3, #0]
      break;
 800852c:	e082      	b.n	8008634 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	795b      	ldrb	r3, [r3, #5]
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 f81f 	bl	8009578 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	791b      	ldrb	r3, [r3, #4]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 f819 	bl	8009578 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	701a      	strb	r2, [r3, #0]
      break;
 8008552:	e06f      	b.n	8008634 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800855a:	2b00      	cmp	r3, #0
 800855c:	d019      	beq.n	8008592 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800856a:	23ff      	movs	r3, #255	@ 0xff
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f957 	bl	8008820 <USBH_Get_StringDesc>
 8008572:	4603      	mov	r3, r0
 8008574:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d103      	bne.n	8008584 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2206      	movs	r2, #6
 8008580:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008582:	e059      	b.n	8008638 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	2b03      	cmp	r3, #3
 8008588:	d156      	bne.n	8008638 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2206      	movs	r2, #6
 800858e:	705a      	strb	r2, [r3, #1]
      break;
 8008590:	e052      	b.n	8008638 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2206      	movs	r2, #6
 8008596:	705a      	strb	r2, [r3, #1]
      break;
 8008598:	e04e      	b.n	8008638 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d019      	beq.n	80085d8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80085b0:	23ff      	movs	r3, #255	@ 0xff
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f934 	bl	8008820 <USBH_Get_StringDesc>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2207      	movs	r2, #7
 80085c6:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80085c8:	e038      	b.n	800863c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d135      	bne.n	800863c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2207      	movs	r2, #7
 80085d4:	705a      	strb	r2, [r3, #1]
      break;
 80085d6:	e031      	b.n	800863c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2207      	movs	r2, #7
 80085dc:	705a      	strb	r2, [r3, #1]
      break;
 80085de:	e02d      	b.n	800863c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d017      	beq.n	800861a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085f6:	23ff      	movs	r3, #255	@ 0xff
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f911 	bl	8008820 <USBH_Get_StringDesc>
 80085fe:	4603      	mov	r3, r0
 8008600:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d102      	bne.n	800860e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800860c:	e018      	b.n	8008640 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	2b03      	cmp	r3, #3
 8008612:	d115      	bne.n	8008640 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	73fb      	strb	r3, [r7, #15]
      break;
 8008618:	e012      	b.n	8008640 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	73fb      	strb	r3, [r7, #15]
      break;
 800861e:	e00f      	b.n	8008640 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008620:	bf00      	nop
 8008622:	e00e      	b.n	8008642 <USBH_HandleEnum+0x3b6>
      break;
 8008624:	bf00      	nop
 8008626:	e00c      	b.n	8008642 <USBH_HandleEnum+0x3b6>
      break;
 8008628:	bf00      	nop
 800862a:	e00a      	b.n	8008642 <USBH_HandleEnum+0x3b6>
      break;
 800862c:	bf00      	nop
 800862e:	e008      	b.n	8008642 <USBH_HandleEnum+0x3b6>
      break;
 8008630:	bf00      	nop
 8008632:	e006      	b.n	8008642 <USBH_HandleEnum+0x3b6>
      break;
 8008634:	bf00      	nop
 8008636:	e004      	b.n	8008642 <USBH_HandleEnum+0x3b6>
      break;
 8008638:	bf00      	nop
 800863a:	e002      	b.n	8008642 <USBH_HandleEnum+0x3b6>
      break;
 800863c:	bf00      	nop
 800863e:	e000      	b.n	8008642 <USBH_HandleEnum+0x3b6>
      break;
 8008640:	bf00      	nop
  }
  return Status;
 8008642:	7bfb      	ldrb	r3, [r7, #15]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800865e:	bf00      	nop
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b082      	sub	sp, #8
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f804 	bl	800868e <USBH_HandleSof>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b0b      	cmp	r3, #11
 800869e:	d10a      	bne.n	80086b6 <USBH_HandleSof+0x28>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d005      	beq.n	80086b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	4798      	blx	r3
  }
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 80086ce:	bf00      	nop
}
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80086f2:	bf00      	nop
}
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80086fe:	b480      	push	{r7}
 8008700:	b083      	sub	sp, #12
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 f8c0 	bl	80098d2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	791b      	ldrb	r3, [r3, #4]
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 ff0d 	bl	8009578 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	795b      	ldrb	r3, [r3, #5]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 ff07 	bl	8009578 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af02      	add	r7, sp, #8
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008780:	887b      	ldrh	r3, [r7, #2]
 8008782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008786:	d901      	bls.n	800878c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008788:	2303      	movs	r3, #3
 800878a:	e01b      	b.n	80087c4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008792:	887b      	ldrh	r3, [r7, #2]
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	4613      	mov	r3, r2
 8008798:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800879c:	2100      	movs	r1, #0
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f872 	bl	8008888 <USBH_GetDescriptor>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d109      	bne.n	80087c2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80087b4:	887a      	ldrh	r2, [r7, #2]
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f929 	bl	8008a10 <USBH_ParseDevDesc>
 80087be:	4603      	mov	r3, r0
 80087c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af02      	add	r7, sp, #8
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	331c      	adds	r3, #28
 80087dc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80087de:	887b      	ldrh	r3, [r7, #2]
 80087e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087e4:	d901      	bls.n	80087ea <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e016      	b.n	8008818 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80087ea:	887b      	ldrh	r3, [r7, #2]
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087f4:	2100      	movs	r1, #0
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f846 	bl	8008888 <USBH_GetDescriptor>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d107      	bne.n	8008816 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008806:	887b      	ldrh	r3, [r7, #2]
 8008808:	461a      	mov	r2, r3
 800880a:	68b9      	ldr	r1, [r7, #8]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f9af 	bl	8008b70 <USBH_ParseCfgDesc>
 8008812:	4603      	mov	r3, r0
 8008814:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008816:	7bfb      	ldrb	r3, [r7, #15]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b088      	sub	sp, #32
 8008824:	af02      	add	r7, sp, #8
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	607a      	str	r2, [r7, #4]
 800882a:	461a      	mov	r2, r3
 800882c:	460b      	mov	r3, r1
 800882e:	72fb      	strb	r3, [r7, #11]
 8008830:	4613      	mov	r3, r2
 8008832:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008834:	893b      	ldrh	r3, [r7, #8]
 8008836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800883a:	d802      	bhi.n	8008842 <USBH_Get_StringDesc+0x22>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008842:	2303      	movs	r3, #3
 8008844:	e01c      	b.n	8008880 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008846:	7afb      	ldrb	r3, [r7, #11]
 8008848:	b29b      	uxth	r3, r3
 800884a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800884e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008856:	893b      	ldrh	r3, [r7, #8]
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	460b      	mov	r3, r1
 800885c:	2100      	movs	r1, #0
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 f812 	bl	8008888 <USBH_GetDescriptor>
 8008864:	4603      	mov	r3, r0
 8008866:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008868:	7dfb      	ldrb	r3, [r7, #23]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d107      	bne.n	800887e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008874:	893a      	ldrh	r2, [r7, #8]
 8008876:	6879      	ldr	r1, [r7, #4]
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fb8c 	bl	8008f96 <USBH_ParseStringDesc>
  }

  return status;
 800887e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	607b      	str	r3, [r7, #4]
 8008892:	460b      	mov	r3, r1
 8008894:	72fb      	strb	r3, [r7, #11]
 8008896:	4613      	mov	r3, r2
 8008898:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	789b      	ldrb	r3, [r3, #2]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d11c      	bne.n	80088dc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80088a2:	7afb      	ldrb	r3, [r7, #11]
 80088a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2206      	movs	r2, #6
 80088b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	893a      	ldrh	r2, [r7, #8]
 80088b8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80088ba:	893b      	ldrh	r3, [r7, #8]
 80088bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80088c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088c4:	d104      	bne.n	80088d0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f240 4209 	movw	r2, #1033	@ 0x409
 80088cc:	829a      	strh	r2, [r3, #20]
 80088ce:	e002      	b.n	80088d6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8b3a      	ldrh	r2, [r7, #24]
 80088da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80088dc:	8b3b      	ldrh	r3, [r7, #24]
 80088de:	461a      	mov	r2, r3
 80088e0:	6879      	ldr	r1, [r7, #4]
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 fba4 	bl	8009030 <USBH_CtlReq>
 80088e8:	4603      	mov	r3, r0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	789b      	ldrb	r3, [r3, #2]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d10f      	bne.n	8008926 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2205      	movs	r2, #5
 8008910:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	b29a      	uxth	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008926:	2200      	movs	r2, #0
 8008928:	2100      	movs	r1, #0
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fb80 	bl	8009030 <USBH_CtlReq>
 8008930:	4603      	mov	r3, r0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	460b      	mov	r3, r1
 8008944:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	789b      	ldrb	r3, [r3, #2]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d10e      	bne.n	800896c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2209      	movs	r2, #9
 8008958:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	887a      	ldrh	r2, [r7, #2]
 800895e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800896c:	2200      	movs	r2, #0
 800896e:	2100      	movs	r1, #0
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fb5d 	bl	8009030 <USBH_CtlReq>
 8008976:	4603      	mov	r3, r0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	789b      	ldrb	r3, [r3, #2]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d10f      	bne.n	80089b4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2203      	movs	r2, #3
 800899e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80089a0:	78fb      	ldrb	r3, [r7, #3]
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80089b4:	2200      	movs	r2, #0
 80089b6:	2100      	movs	r1, #0
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fb39 	bl	8009030 <USBH_CtlReq>
 80089be:	4603      	mov	r3, r0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	789b      	ldrb	r3, [r3, #2]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d10f      	bne.n	80089fc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2202      	movs	r2, #2
 80089e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80089fc:	2200      	movs	r2, #0
 80089fe:	2100      	movs	r1, #0
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fb15 	bl	8009030 <USBH_CtlReq>
 8008a06:	4603      	mov	r3, r0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008a24:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008a30:	2302      	movs	r3, #2
 8008a32:	e094      	b.n	8008b5e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	785a      	ldrb	r2, [r3, #1]
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	3302      	adds	r3, #2
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	3303      	adds	r3, #3
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	021b      	lsls	r3, r3, #8
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	4313      	orrs	r3, r2
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	791a      	ldrb	r2, [r3, #4]
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	795a      	ldrb	r2, [r3, #5]
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	799a      	ldrb	r2, [r3, #6]
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	79da      	ldrb	r2, [r3, #7]
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d004      	beq.n	8008a92 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d11b      	bne.n	8008aca <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	79db      	ldrb	r3, [r3, #7]
 8008a96:	2b20      	cmp	r3, #32
 8008a98:	dc0f      	bgt.n	8008aba <USBH_ParseDevDesc+0xaa>
 8008a9a:	2b08      	cmp	r3, #8
 8008a9c:	db0f      	blt.n	8008abe <USBH_ParseDevDesc+0xae>
 8008a9e:	3b08      	subs	r3, #8
 8008aa0:	4a32      	ldr	r2, [pc, #200]	@ (8008b6c <USBH_ParseDevDesc+0x15c>)
 8008aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bf14      	ite	ne
 8008aae:	2301      	movne	r3, #1
 8008ab0:	2300      	moveq	r3, #0
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d106      	bne.n	8008ac6 <USBH_ParseDevDesc+0xb6>
 8008ab8:	e001      	b.n	8008abe <USBH_ParseDevDesc+0xae>
 8008aba:	2b40      	cmp	r3, #64	@ 0x40
 8008abc:	d003      	beq.n	8008ac6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	2208      	movs	r2, #8
 8008ac2:	71da      	strb	r2, [r3, #7]
        break;
 8008ac4:	e000      	b.n	8008ac8 <USBH_ParseDevDesc+0xb8>
        break;
 8008ac6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008ac8:	e00e      	b.n	8008ae8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d107      	bne.n	8008ae4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	79db      	ldrb	r3, [r3, #7]
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d005      	beq.n	8008ae8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2208      	movs	r2, #8
 8008ae0:	71da      	strb	r2, [r3, #7]
 8008ae2:	e001      	b.n	8008ae8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008ae8:	88fb      	ldrh	r3, [r7, #6]
 8008aea:	2b08      	cmp	r3, #8
 8008aec:	d936      	bls.n	8008b5c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	3308      	adds	r3, #8
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	461a      	mov	r2, r3
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	3309      	adds	r3, #9
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	021b      	lsls	r3, r3, #8
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	4313      	orrs	r3, r2
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	330a      	adds	r3, #10
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	330b      	adds	r3, #11
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	021b      	lsls	r3, r3, #8
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	330c      	adds	r3, #12
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	330d      	adds	r3, #13
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	021b      	lsls	r3, r3, #8
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	4313      	orrs	r3, r2
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	7b9a      	ldrb	r2, [r3, #14]
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	7bda      	ldrb	r2, [r3, #15]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	7c1a      	ldrb	r2, [r3, #16]
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	7c5a      	ldrb	r2, [r3, #17]
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	371c      	adds	r7, #28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	01000101 	.word	0x01000101

08008b70 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08c      	sub	sp, #48	@ 0x30
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008b84:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e0de      	b.n	8008d60 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	2b09      	cmp	r3, #9
 8008bac:	d002      	beq.n	8008bb4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb0:	2209      	movs	r2, #9
 8008bb2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	781a      	ldrb	r2, [r3, #0]
 8008bb8:	6a3b      	ldr	r3, [r7, #32]
 8008bba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	785a      	ldrb	r2, [r3, #1]
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	3302      	adds	r3, #2
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	3303      	adds	r3, #3
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bde:	bf28      	it	cs
 8008be0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	791a      	ldrb	r2, [r3, #4]
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	795a      	ldrb	r2, [r3, #5]
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	799a      	ldrb	r2, [r3, #6]
 8008bfe:	6a3b      	ldr	r3, [r7, #32]
 8008c00:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	79da      	ldrb	r2, [r3, #7]
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	7a1a      	ldrb	r2, [r3, #8]
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c12:	88fb      	ldrh	r3, [r7, #6]
 8008c14:	2b09      	cmp	r3, #9
 8008c16:	f240 80a1 	bls.w	8008d5c <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c1a:	2309      	movs	r3, #9
 8008c1c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c22:	e085      	b.n	8008d30 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c24:	f107 0316 	add.w	r3, r7, #22
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c2c:	f000 f9e6 	bl	8008ffc <USBH_GetNextDesc>
 8008c30:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c34:	785b      	ldrb	r3, [r3, #1]
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	d17a      	bne.n	8008d30 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	2b09      	cmp	r3, #9
 8008c40:	d002      	beq.n	8008c48 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c44:	2209      	movs	r2, #9
 8008c46:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c4c:	221a      	movs	r2, #26
 8008c4e:	fb02 f303 	mul.w	r3, r2, r3
 8008c52:	3308      	adds	r3, #8
 8008c54:	6a3a      	ldr	r2, [r7, #32]
 8008c56:	4413      	add	r3, r2
 8008c58:	3302      	adds	r3, #2
 8008c5a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008c5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c5e:	69f8      	ldr	r0, [r7, #28]
 8008c60:	f000 f882 	bl	8008d68 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c6e:	e043      	b.n	8008cf8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c70:	f107 0316 	add.w	r3, r7, #22
 8008c74:	4619      	mov	r1, r3
 8008c76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c78:	f000 f9c0 	bl	8008ffc <USBH_GetNextDesc>
 8008c7c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c80:	785b      	ldrb	r3, [r3, #1]
 8008c82:	2b05      	cmp	r3, #5
 8008c84:	d138      	bne.n	8008cf8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	795b      	ldrb	r3, [r3, #5]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d113      	bne.n	8008cb6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d003      	beq.n	8008c9e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	799b      	ldrb	r3, [r3, #6]
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d10b      	bne.n	8008cb6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	79db      	ldrb	r3, [r3, #7]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10b      	bne.n	8008cbe <USBH_ParseCfgDesc+0x14e>
 8008ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	2b09      	cmp	r3, #9
 8008cac:	d007      	beq.n	8008cbe <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	2209      	movs	r2, #9
 8008cb2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cb4:	e003      	b.n	8008cbe <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb8:	2207      	movs	r2, #7
 8008cba:	701a      	strb	r2, [r3, #0]
 8008cbc:	e000      	b.n	8008cc0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cbe:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cc4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008cc8:	3201      	adds	r2, #1
 8008cca:	00d2      	lsls	r2, r2, #3
 8008ccc:	211a      	movs	r1, #26
 8008cce:	fb01 f303 	mul.w	r3, r1, r3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	6a3a      	ldr	r2, [r7, #32]
 8008cd8:	4413      	add	r3, r2
 8008cda:	3304      	adds	r3, #4
 8008cdc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008cde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ce0:	69b9      	ldr	r1, [r7, #24]
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 f86f 	bl	8008dc6 <USBH_ParseEPDesc>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008cee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008cf8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d80a      	bhi.n	8008d16 <USBH_ParseCfgDesc+0x1a6>
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	791b      	ldrb	r3, [r3, #4]
 8008d04:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d204      	bcs.n	8008d16 <USBH_ParseCfgDesc+0x1a6>
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	885a      	ldrh	r2, [r3, #2]
 8008d10:	8afb      	ldrh	r3, [r7, #22]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d8ac      	bhi.n	8008c70 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	791b      	ldrb	r3, [r3, #4]
 8008d1a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d201      	bcs.n	8008d26 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e01c      	b.n	8008d60 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8008d26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d805      	bhi.n	8008d44 <USBH_ParseCfgDesc+0x1d4>
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	885a      	ldrh	r2, [r3, #2]
 8008d3c:	8afb      	ldrh	r3, [r7, #22]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	f63f af70 	bhi.w	8008c24 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	791b      	ldrb	r3, [r3, #4]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	bf28      	it	cs
 8008d4c:	2302      	movcs	r3, #2
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d201      	bcs.n	8008d5c <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e001      	b.n	8008d60 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8008d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3730      	adds	r7, #48	@ 0x30
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781a      	ldrb	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	785a      	ldrb	r2, [r3, #1]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	789a      	ldrb	r2, [r3, #2]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	78da      	ldrb	r2, [r3, #3]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	791a      	ldrb	r2, [r3, #4]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	795a      	ldrb	r2, [r3, #5]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	799a      	ldrb	r2, [r3, #6]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	79da      	ldrb	r2, [r3, #7]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	7a1a      	ldrb	r2, [r3, #8]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	721a      	strb	r2, [r3, #8]
}
 8008dba:	bf00      	nop
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b087      	sub	sp, #28
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	781a      	ldrb	r2, [r3, #0]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	785a      	ldrb	r2, [r3, #1]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	789a      	ldrb	r2, [r3, #2]
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	78da      	ldrb	r2, [r3, #3]
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3305      	adds	r3, #5
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	021b      	lsls	r3, r3, #8
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	799a      	ldrb	r2, [r3, #6]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	889b      	ldrh	r3, [r3, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d009      	beq.n	8008e34 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e28:	d804      	bhi.n	8008e34 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e32:	d901      	bls.n	8008e38 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008e34:	2303      	movs	r3, #3
 8008e36:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d136      	bne.n	8008eb0 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	78db      	ldrb	r3, [r3, #3]
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d108      	bne.n	8008e60 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	889b      	ldrh	r3, [r3, #4]
 8008e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e56:	f240 8097 	bls.w	8008f88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	75fb      	strb	r3, [r7, #23]
 8008e5e:	e093      	b.n	8008f88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	78db      	ldrb	r3, [r3, #3]
 8008e64:	f003 0303 	and.w	r3, r3, #3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d107      	bne.n	8008e7c <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	889b      	ldrh	r3, [r3, #4]
 8008e70:	2b40      	cmp	r3, #64	@ 0x40
 8008e72:	f240 8089 	bls.w	8008f88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e76:	2303      	movs	r3, #3
 8008e78:	75fb      	strb	r3, [r7, #23]
 8008e7a:	e085      	b.n	8008f88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	78db      	ldrb	r3, [r3, #3]
 8008e80:	f003 0303 	and.w	r3, r3, #3
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d005      	beq.n	8008e94 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	78db      	ldrb	r3, [r3, #3]
 8008e8c:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d10a      	bne.n	8008eaa <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	799b      	ldrb	r3, [r3, #6]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <USBH_ParseEPDesc+0xde>
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	799b      	ldrb	r3, [r3, #6]
 8008ea0:	2b10      	cmp	r3, #16
 8008ea2:	d970      	bls.n	8008f86 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ea8:	e06d      	b.n	8008f86 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	75fb      	strb	r3, [r7, #23]
 8008eae:	e06b      	b.n	8008f88 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d13c      	bne.n	8008f34 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	78db      	ldrb	r3, [r3, #3]
 8008ebe:	f003 0303 	and.w	r3, r3, #3
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d005      	beq.n	8008ed2 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	78db      	ldrb	r3, [r3, #3]
 8008eca:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d106      	bne.n	8008ee0 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	889b      	ldrh	r3, [r3, #4]
 8008ed6:	2b40      	cmp	r3, #64	@ 0x40
 8008ed8:	d956      	bls.n	8008f88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008eda:	2303      	movs	r3, #3
 8008edc:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008ede:	e053      	b.n	8008f88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	78db      	ldrb	r3, [r3, #3]
 8008ee4:	f003 0303 	and.w	r3, r3, #3
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d10e      	bne.n	8008f0a <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	799b      	ldrb	r3, [r3, #6]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d007      	beq.n	8008f04 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008ef8:	2b10      	cmp	r3, #16
 8008efa:	d803      	bhi.n	8008f04 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008f00:	2b40      	cmp	r3, #64	@ 0x40
 8008f02:	d941      	bls.n	8008f88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008f04:	2303      	movs	r3, #3
 8008f06:	75fb      	strb	r3, [r7, #23]
 8008f08:	e03e      	b.n	8008f88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	78db      	ldrb	r3, [r3, #3]
 8008f0e:	f003 0303 	and.w	r3, r3, #3
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d10b      	bne.n	8008f2e <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	799b      	ldrb	r3, [r3, #6]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d004      	beq.n	8008f28 <USBH_ParseEPDesc+0x162>
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	889b      	ldrh	r3, [r3, #4]
 8008f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f26:	d32f      	bcc.n	8008f88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	75fb      	strb	r3, [r7, #23]
 8008f2c:	e02c      	b.n	8008f88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	75fb      	strb	r3, [r7, #23]
 8008f32:	e029      	b.n	8008f88 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d120      	bne.n	8008f80 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	78db      	ldrb	r3, [r3, #3]
 8008f42:	f003 0303 	and.w	r3, r3, #3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d106      	bne.n	8008f58 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	889b      	ldrh	r3, [r3, #4]
 8008f4e:	2b08      	cmp	r3, #8
 8008f50:	d01a      	beq.n	8008f88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008f52:	2303      	movs	r3, #3
 8008f54:	75fb      	strb	r3, [r7, #23]
 8008f56:	e017      	b.n	8008f88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	78db      	ldrb	r3, [r3, #3]
 8008f5c:	f003 0303 	and.w	r3, r3, #3
 8008f60:	2b03      	cmp	r3, #3
 8008f62:	d10a      	bne.n	8008f7a <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	799b      	ldrb	r3, [r3, #6]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <USBH_ParseEPDesc+0x1ae>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	889b      	ldrh	r3, [r3, #4]
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d909      	bls.n	8008f88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008f74:	2303      	movs	r3, #3
 8008f76:	75fb      	strb	r3, [r7, #23]
 8008f78:	e006      	b.n	8008f88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	75fb      	strb	r3, [r7, #23]
 8008f7e:	e003      	b.n	8008f88 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008f80:	2303      	movs	r3, #3
 8008f82:	75fb      	strb	r3, [r7, #23]
 8008f84:	e000      	b.n	8008f88 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008f86:	bf00      	nop
  }

  return status;
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	371c      	adds	r7, #28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b087      	sub	sp, #28
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	d120      	bne.n	8008ff0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	1e9a      	subs	r2, r3, #2
 8008fb4:	88fb      	ldrh	r3, [r7, #6]
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	bf28      	it	cs
 8008fba:	4613      	movcs	r3, r2
 8008fbc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3302      	adds	r3, #2
 8008fc2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	82fb      	strh	r3, [r7, #22]
 8008fc8:	e00b      	b.n	8008fe2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008fca:	8afb      	ldrh	r3, [r7, #22]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	4413      	add	r3, r2
 8008fd0:	781a      	ldrb	r2, [r3, #0]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008fdc:	8afb      	ldrh	r3, [r7, #22]
 8008fde:	3302      	adds	r3, #2
 8008fe0:	82fb      	strh	r3, [r7, #22]
 8008fe2:	8afa      	ldrh	r2, [r7, #22]
 8008fe4:	8abb      	ldrh	r3, [r7, #20]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d3ef      	bcc.n	8008fca <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2200      	movs	r2, #0
 8008fee:	701a      	strb	r2, [r3, #0]
  }
}
 8008ff0:	bf00      	nop
 8008ff2:	371c      	adds	r7, #28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	881b      	ldrh	r3, [r3, #0]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	7812      	ldrb	r2, [r2, #0]
 800900e:	4413      	add	r3, r2
 8009010:	b29a      	uxth	r2, r3
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4413      	add	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009022:	68fb      	ldr	r3, [r7, #12]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	4613      	mov	r3, r2
 800903c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800903e:	2301      	movs	r3, #1
 8009040:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	789b      	ldrb	r3, [r3, #2]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d002      	beq.n	8009050 <USBH_CtlReq+0x20>
 800904a:	2b02      	cmp	r3, #2
 800904c:	d00f      	beq.n	800906e <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800904e:	e027      	b.n	80090a0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	88fa      	ldrh	r2, [r7, #6]
 800905a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2201      	movs	r2, #1
 8009060:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2202      	movs	r2, #2
 8009066:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009068:	2301      	movs	r3, #1
 800906a:	75fb      	strb	r3, [r7, #23]
      break;
 800906c:	e018      	b.n	80090a0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 f81c 	bl	80090ac <USBH_HandleControl>
 8009074:	4603      	mov	r3, r0
 8009076:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009078:	7dfb      	ldrb	r3, [r7, #23]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <USBH_CtlReq+0x54>
 800907e:	7dfb      	ldrb	r3, [r7, #23]
 8009080:	2b03      	cmp	r3, #3
 8009082:	d106      	bne.n	8009092 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2201      	movs	r2, #1
 8009088:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	761a      	strb	r2, [r3, #24]
      break;
 8009090:	e005      	b.n	800909e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009092:	7dfb      	ldrb	r3, [r7, #23]
 8009094:	2b02      	cmp	r3, #2
 8009096:	d102      	bne.n	800909e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2201      	movs	r2, #1
 800909c:	709a      	strb	r2, [r3, #2]
      break;
 800909e:	bf00      	nop
  }
  return status;
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af02      	add	r7, sp, #8
 80090b2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80090b4:	2301      	movs	r3, #1
 80090b6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	7e1b      	ldrb	r3, [r3, #24]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	2b0a      	cmp	r3, #10
 80090c4:	f200 8157 	bhi.w	8009376 <USBH_HandleControl+0x2ca>
 80090c8:	a201      	add	r2, pc, #4	@ (adr r2, 80090d0 <USBH_HandleControl+0x24>)
 80090ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ce:	bf00      	nop
 80090d0:	080090fd 	.word	0x080090fd
 80090d4:	08009117 	.word	0x08009117
 80090d8:	08009181 	.word	0x08009181
 80090dc:	080091a7 	.word	0x080091a7
 80090e0:	080091e1 	.word	0x080091e1
 80090e4:	0800920b 	.word	0x0800920b
 80090e8:	0800925d 	.word	0x0800925d
 80090ec:	0800927f 	.word	0x0800927f
 80090f0:	080092bb 	.word	0x080092bb
 80090f4:	080092e1 	.word	0x080092e1
 80090f8:	0800931f 	.word	0x0800931f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f103 0110 	add.w	r1, r3, #16
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	795b      	ldrb	r3, [r3, #5]
 8009106:	461a      	mov	r2, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f945 	bl	8009398 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2202      	movs	r2, #2
 8009112:	761a      	strb	r2, [r3, #24]
      break;
 8009114:	e13a      	b.n	800938c <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	795b      	ldrb	r3, [r3, #5]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fcc7 	bl	8009ab0 <USBH_LL_GetURBState>
 8009122:	4603      	mov	r3, r0
 8009124:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009126:	7bbb      	ldrb	r3, [r7, #14]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d11e      	bne.n	800916a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	7c1b      	ldrb	r3, [r3, #16]
 8009130:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009134:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	8adb      	ldrh	r3, [r3, #22]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800913e:	7b7b      	ldrb	r3, [r7, #13]
 8009140:	2b80      	cmp	r3, #128	@ 0x80
 8009142:	d103      	bne.n	800914c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2203      	movs	r2, #3
 8009148:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800914a:	e116      	b.n	800937a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2205      	movs	r2, #5
 8009150:	761a      	strb	r2, [r3, #24]
      break;
 8009152:	e112      	b.n	800937a <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8009154:	7b7b      	ldrb	r3, [r7, #13]
 8009156:	2b80      	cmp	r3, #128	@ 0x80
 8009158:	d103      	bne.n	8009162 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2209      	movs	r2, #9
 800915e:	761a      	strb	r2, [r3, #24]
      break;
 8009160:	e10b      	b.n	800937a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2207      	movs	r2, #7
 8009166:	761a      	strb	r2, [r3, #24]
      break;
 8009168:	e107      	b.n	800937a <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	2b04      	cmp	r3, #4
 800916e:	d003      	beq.n	8009178 <USBH_HandleControl+0xcc>
 8009170:	7bbb      	ldrb	r3, [r7, #14]
 8009172:	2b02      	cmp	r3, #2
 8009174:	f040 8101 	bne.w	800937a <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	220b      	movs	r2, #11
 800917c:	761a      	strb	r2, [r3, #24]
      break;
 800917e:	e0fc      	b.n	800937a <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009186:	b29a      	uxth	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6899      	ldr	r1, [r3, #8]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	899a      	ldrh	r2, [r3, #12]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	791b      	ldrb	r3, [r3, #4]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f93c 	bl	8009416 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2204      	movs	r2, #4
 80091a2:	761a      	strb	r2, [r3, #24]
      break;
 80091a4:	e0f2      	b.n	800938c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	791b      	ldrb	r3, [r3, #4]
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fc7f 	bl	8009ab0 <USBH_LL_GetURBState>
 80091b2:	4603      	mov	r3, r0
 80091b4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d103      	bne.n	80091c4 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2209      	movs	r2, #9
 80091c0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80091c2:	e0dc      	b.n	800937e <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
 80091c6:	2b05      	cmp	r3, #5
 80091c8:	d102      	bne.n	80091d0 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 80091ca:	2303      	movs	r3, #3
 80091cc:	73fb      	strb	r3, [r7, #15]
      break;
 80091ce:	e0d6      	b.n	800937e <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
 80091d2:	2b04      	cmp	r3, #4
 80091d4:	f040 80d3 	bne.w	800937e <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	220b      	movs	r2, #11
 80091dc:	761a      	strb	r2, [r3, #24]
      break;
 80091de:	e0ce      	b.n	800937e <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6899      	ldr	r1, [r3, #8]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	899a      	ldrh	r2, [r3, #12]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	795b      	ldrb	r3, [r3, #5]
 80091ec:	2001      	movs	r0, #1
 80091ee:	9000      	str	r0, [sp, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f8eb 	bl	80093cc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2206      	movs	r2, #6
 8009206:	761a      	strb	r2, [r3, #24]
      break;
 8009208:	e0c0      	b.n	800938c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	795b      	ldrb	r3, [r3, #5]
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fc4d 	bl	8009ab0 <USBH_LL_GetURBState>
 8009216:	4603      	mov	r3, r0
 8009218:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800921a:	7bbb      	ldrb	r3, [r7, #14]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d103      	bne.n	8009228 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2207      	movs	r2, #7
 8009224:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009226:	e0ac      	b.n	8009382 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2b05      	cmp	r3, #5
 800922c:	d105      	bne.n	800923a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	220c      	movs	r2, #12
 8009232:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009234:	2303      	movs	r3, #3
 8009236:	73fb      	strb	r3, [r7, #15]
      break;
 8009238:	e0a3      	b.n	8009382 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800923a:	7bbb      	ldrb	r3, [r7, #14]
 800923c:	2b02      	cmp	r3, #2
 800923e:	d103      	bne.n	8009248 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2205      	movs	r2, #5
 8009244:	761a      	strb	r2, [r3, #24]
      break;
 8009246:	e09c      	b.n	8009382 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8009248:	7bbb      	ldrb	r3, [r7, #14]
 800924a:	2b04      	cmp	r3, #4
 800924c:	f040 8099 	bne.w	8009382 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	220b      	movs	r2, #11
 8009254:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009256:	2302      	movs	r3, #2
 8009258:	73fb      	strb	r3, [r7, #15]
      break;
 800925a:	e092      	b.n	8009382 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	791b      	ldrb	r3, [r3, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	2100      	movs	r1, #0
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f8d6 	bl	8009416 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009270:	b29a      	uxth	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2208      	movs	r2, #8
 800927a:	761a      	strb	r2, [r3, #24]

      break;
 800927c:	e086      	b.n	800938c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	791b      	ldrb	r3, [r3, #4]
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fc13 	bl	8009ab0 <USBH_LL_GetURBState>
 800928a:	4603      	mov	r3, r0
 800928c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800928e:	7bbb      	ldrb	r3, [r7, #14]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d105      	bne.n	80092a0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	220d      	movs	r2, #13
 8009298:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800929e:	e072      	b.n	8009386 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	2b04      	cmp	r3, #4
 80092a4:	d103      	bne.n	80092ae <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	220b      	movs	r2, #11
 80092aa:	761a      	strb	r2, [r3, #24]
      break;
 80092ac:	e06b      	b.n	8009386 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 80092ae:	7bbb      	ldrb	r3, [r7, #14]
 80092b0:	2b05      	cmp	r3, #5
 80092b2:	d168      	bne.n	8009386 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 80092b4:	2303      	movs	r3, #3
 80092b6:	73fb      	strb	r3, [r7, #15]
      break;
 80092b8:	e065      	b.n	8009386 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	795b      	ldrb	r3, [r3, #5]
 80092be:	2201      	movs	r2, #1
 80092c0:	9200      	str	r2, [sp, #0]
 80092c2:	2200      	movs	r2, #0
 80092c4:	2100      	movs	r1, #0
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f880 	bl	80093cc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	220a      	movs	r2, #10
 80092dc:	761a      	strb	r2, [r3, #24]
      break;
 80092de:	e055      	b.n	800938c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	795b      	ldrb	r3, [r3, #5]
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fbe2 	bl	8009ab0 <USBH_LL_GetURBState>
 80092ec:	4603      	mov	r3, r0
 80092ee:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d105      	bne.n	8009302 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	220d      	movs	r2, #13
 80092fe:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009300:	e043      	b.n	800938a <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	2b02      	cmp	r3, #2
 8009306:	d103      	bne.n	8009310 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2209      	movs	r2, #9
 800930c:	761a      	strb	r2, [r3, #24]
      break;
 800930e:	e03c      	b.n	800938a <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8009310:	7bbb      	ldrb	r3, [r7, #14]
 8009312:	2b04      	cmp	r3, #4
 8009314:	d139      	bne.n	800938a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	220b      	movs	r2, #11
 800931a:	761a      	strb	r2, [r3, #24]
      break;
 800931c:	e035      	b.n	800938a <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	7e5b      	ldrb	r3, [r3, #25]
 8009322:	3301      	adds	r3, #1
 8009324:	b2da      	uxtb	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	765a      	strb	r2, [r3, #25]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	7e5b      	ldrb	r3, [r3, #25]
 800932e:	2b02      	cmp	r3, #2
 8009330:	d806      	bhi.n	8009340 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800933e:	e025      	b.n	800938c <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009346:	2106      	movs	r1, #6
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	795b      	ldrb	r3, [r3, #5]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f90d 	bl	8009578 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	791b      	ldrb	r3, [r3, #4]
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f907 	bl	8009578 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009370:	2302      	movs	r3, #2
 8009372:	73fb      	strb	r3, [r7, #15]
      break;
 8009374:	e00a      	b.n	800938c <USBH_HandleControl+0x2e0>

    default:
      break;
 8009376:	bf00      	nop
 8009378:	e008      	b.n	800938c <USBH_HandleControl+0x2e0>
      break;
 800937a:	bf00      	nop
 800937c:	e006      	b.n	800938c <USBH_HandleControl+0x2e0>
      break;
 800937e:	bf00      	nop
 8009380:	e004      	b.n	800938c <USBH_HandleControl+0x2e0>
      break;
 8009382:	bf00      	nop
 8009384:	e002      	b.n	800938c <USBH_HandleControl+0x2e0>
      break;
 8009386:	bf00      	nop
 8009388:	e000      	b.n	800938c <USBH_HandleControl+0x2e0>
      break;
 800938a:	bf00      	nop
  }

  return status;
 800938c:	7bfb      	ldrb	r3, [r7, #15]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop

08009398 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af04      	add	r7, sp, #16
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	4613      	mov	r3, r2
 80093a4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093a6:	79f9      	ldrb	r1, [r7, #7]
 80093a8:	2300      	movs	r3, #0
 80093aa:	9303      	str	r3, [sp, #12]
 80093ac:	2308      	movs	r3, #8
 80093ae:	9302      	str	r3, [sp, #8]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	2300      	movs	r3, #0
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	2300      	movs	r3, #0
 80093ba:	2200      	movs	r2, #0
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 fb46 	bl	8009a4e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af04      	add	r7, sp, #16
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	4611      	mov	r1, r2
 80093d8:	461a      	mov	r2, r3
 80093da:	460b      	mov	r3, r1
 80093dc:	80fb      	strh	r3, [r7, #6]
 80093de:	4613      	mov	r3, r2
 80093e0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093f0:	7979      	ldrb	r1, [r7, #5]
 80093f2:	7e3b      	ldrb	r3, [r7, #24]
 80093f4:	9303      	str	r3, [sp, #12]
 80093f6:	88fb      	ldrh	r3, [r7, #6]
 80093f8:	9302      	str	r3, [sp, #8]
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	2301      	movs	r3, #1
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	2300      	movs	r3, #0
 8009404:	2200      	movs	r2, #0
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f000 fb21 	bl	8009a4e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b088      	sub	sp, #32
 800941a:	af04      	add	r7, sp, #16
 800941c:	60f8      	str	r0, [r7, #12]
 800941e:	60b9      	str	r1, [r7, #8]
 8009420:	4611      	mov	r1, r2
 8009422:	461a      	mov	r2, r3
 8009424:	460b      	mov	r3, r1
 8009426:	80fb      	strh	r3, [r7, #6]
 8009428:	4613      	mov	r3, r2
 800942a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800942c:	7979      	ldrb	r1, [r7, #5]
 800942e:	2300      	movs	r3, #0
 8009430:	9303      	str	r3, [sp, #12]
 8009432:	88fb      	ldrh	r3, [r7, #6]
 8009434:	9302      	str	r3, [sp, #8]
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	9301      	str	r3, [sp, #4]
 800943a:	2301      	movs	r3, #1
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	2300      	movs	r3, #0
 8009440:	2201      	movs	r2, #1
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 fb03 	bl	8009a4e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009448:	2300      	movs	r3, #0

}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b088      	sub	sp, #32
 8009456:	af04      	add	r7, sp, #16
 8009458:	60f8      	str	r0, [r7, #12]
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	4611      	mov	r1, r2
 800945e:	461a      	mov	r2, r3
 8009460:	460b      	mov	r3, r1
 8009462:	80fb      	strh	r3, [r7, #6]
 8009464:	4613      	mov	r3, r2
 8009466:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009476:	7979      	ldrb	r1, [r7, #5]
 8009478:	7e3b      	ldrb	r3, [r7, #24]
 800947a:	9303      	str	r3, [sp, #12]
 800947c:	88fb      	ldrh	r3, [r7, #6]
 800947e:	9302      	str	r3, [sp, #8]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	9301      	str	r3, [sp, #4]
 8009484:	2301      	movs	r3, #1
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	2302      	movs	r3, #2
 800948a:	2200      	movs	r2, #0
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 fade 	bl	8009a4e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af04      	add	r7, sp, #16
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	4611      	mov	r1, r2
 80094a8:	461a      	mov	r2, r3
 80094aa:	460b      	mov	r3, r1
 80094ac:	80fb      	strh	r3, [r7, #6]
 80094ae:	4613      	mov	r3, r2
 80094b0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094b2:	7979      	ldrb	r1, [r7, #5]
 80094b4:	2300      	movs	r3, #0
 80094b6:	9303      	str	r3, [sp, #12]
 80094b8:	88fb      	ldrh	r3, [r7, #6]
 80094ba:	9302      	str	r3, [sp, #8]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	2301      	movs	r3, #1
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	2302      	movs	r3, #2
 80094c6:	2201      	movs	r2, #1
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 fac0 	bl	8009a4e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af04      	add	r7, sp, #16
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	4608      	mov	r0, r1
 80094e2:	4611      	mov	r1, r2
 80094e4:	461a      	mov	r2, r3
 80094e6:	4603      	mov	r3, r0
 80094e8:	70fb      	strb	r3, [r7, #3]
 80094ea:	460b      	mov	r3, r1
 80094ec:	70bb      	strb	r3, [r7, #2]
 80094ee:	4613      	mov	r3, r2
 80094f0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80094f2:	7878      	ldrb	r0, [r7, #1]
 80094f4:	78ba      	ldrb	r2, [r7, #2]
 80094f6:	78f9      	ldrb	r1, [r7, #3]
 80094f8:	8b3b      	ldrh	r3, [r7, #24]
 80094fa:	9302      	str	r3, [sp, #8]
 80094fc:	7d3b      	ldrb	r3, [r7, #20]
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	7c3b      	ldrb	r3, [r7, #16]
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	4603      	mov	r3, r0
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa53 	bl	80099b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009522:	78fb      	ldrb	r3, [r7, #3]
 8009524:	4619      	mov	r1, r3
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fa72 	bl	8009a10 <USBH_LL_ClosePipe>

  return USBH_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	460b      	mov	r3, r1
 8009540:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f836 	bl	80095b4 <USBH_GetFreePipe>
 8009548:	4603      	mov	r3, r0
 800954a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800954c:	89fb      	ldrh	r3, [r7, #14]
 800954e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009552:	4293      	cmp	r3, r2
 8009554:	d00a      	beq.n	800956c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009556:	78fa      	ldrb	r2, [r7, #3]
 8009558:	89fb      	ldrh	r3, [r7, #14]
 800955a:	f003 030f 	and.w	r3, r3, #15
 800955e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009562:	6879      	ldr	r1, [r7, #4]
 8009564:	33e0      	adds	r3, #224	@ 0xe0
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	440b      	add	r3, r1
 800956a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800956c:	89fb      	ldrh	r3, [r7, #14]
 800956e:	b2db      	uxtb	r3, r3
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009584:	78fb      	ldrb	r3, [r7, #3]
 8009586:	2b0f      	cmp	r3, #15
 8009588:	d80d      	bhi.n	80095a6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	33e0      	adds	r3, #224	@ 0xe0
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4413      	add	r3, r2
 8009594:	685a      	ldr	r2, [r3, #4]
 8009596:	78fb      	ldrb	r3, [r7, #3]
 8009598:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800959c:	6879      	ldr	r1, [r7, #4]
 800959e:	33e0      	adds	r3, #224	@ 0xe0
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	440b      	add	r3, r1
 80095a4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80095c0:	2300      	movs	r3, #0
 80095c2:	73fb      	strb	r3, [r7, #15]
 80095c4:	e00f      	b.n	80095e6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	33e0      	adds	r3, #224	@ 0xe0
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d102      	bne.n	80095e0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	b29b      	uxth	r3, r3
 80095de:	e007      	b.n	80095f0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	3301      	adds	r3, #1
 80095e4:	73fb      	strb	r3, [r7, #15]
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	2b0f      	cmp	r3, #15
 80095ea:	d9ec      	bls.n	80095c6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80095ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009600:	2201      	movs	r2, #1
 8009602:	490e      	ldr	r1, [pc, #56]	@ (800963c <MX_USB_HOST_Init+0x40>)
 8009604:	480e      	ldr	r0, [pc, #56]	@ (8009640 <MX_USB_HOST_Init+0x44>)
 8009606:	f7fe fb0f 	bl	8007c28 <USBH_Init>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009610:	f7f7 fa6e 	bl	8000af0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009614:	490b      	ldr	r1, [pc, #44]	@ (8009644 <MX_USB_HOST_Init+0x48>)
 8009616:	480a      	ldr	r0, [pc, #40]	@ (8009640 <MX_USB_HOST_Init+0x44>)
 8009618:	f7fe fbb1 	bl	8007d7e <USBH_RegisterClass>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009622:	f7f7 fa65 	bl	8000af0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009626:	4806      	ldr	r0, [pc, #24]	@ (8009640 <MX_USB_HOST_Init+0x44>)
 8009628:	f7fe fc35 	bl	8007e96 <USBH_Start>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009632:	f7f7 fa5d 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009636:	bf00      	nop
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	0800965d 	.word	0x0800965d
 8009640:	20000270 	.word	0x20000270
 8009644:	2000000c 	.word	0x2000000c

08009648 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800964c:	4802      	ldr	r0, [pc, #8]	@ (8009658 <MX_USB_HOST_Process+0x10>)
 800964e:	f7fe fc33 	bl	8007eb8 <USBH_Process>
}
 8009652:	bf00      	nop
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	20000270 	.word	0x20000270

0800965c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	3b01      	subs	r3, #1
 800966c:	2b04      	cmp	r3, #4
 800966e:	d819      	bhi.n	80096a4 <USBH_UserProcess+0x48>
 8009670:	a201      	add	r2, pc, #4	@ (adr r2, 8009678 <USBH_UserProcess+0x1c>)
 8009672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009676:	bf00      	nop
 8009678:	080096a5 	.word	0x080096a5
 800967c:	08009695 	.word	0x08009695
 8009680:	080096a5 	.word	0x080096a5
 8009684:	0800969d 	.word	0x0800969d
 8009688:	0800968d 	.word	0x0800968d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800968c:	4b09      	ldr	r3, [pc, #36]	@ (80096b4 <USBH_UserProcess+0x58>)
 800968e:	2203      	movs	r2, #3
 8009690:	701a      	strb	r2, [r3, #0]
  break;
 8009692:	e008      	b.n	80096a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009694:	4b07      	ldr	r3, [pc, #28]	@ (80096b4 <USBH_UserProcess+0x58>)
 8009696:	2202      	movs	r2, #2
 8009698:	701a      	strb	r2, [r3, #0]
  break;
 800969a:	e004      	b.n	80096a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800969c:	4b05      	ldr	r3, [pc, #20]	@ (80096b4 <USBH_UserProcess+0x58>)
 800969e:	2201      	movs	r2, #1
 80096a0:	701a      	strb	r2, [r3, #0]
  break;
 80096a2:	e000      	b.n	80096a6 <USBH_UserProcess+0x4a>

  default:
  break;
 80096a4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	20000648 	.word	0x20000648

080096b8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08a      	sub	sp, #40	@ 0x28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096c0:	f107 0314 	add.w	r3, r7, #20
 80096c4:	2200      	movs	r2, #0
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	605a      	str	r2, [r3, #4]
 80096ca:	609a      	str	r2, [r3, #8]
 80096cc:	60da      	str	r2, [r3, #12]
 80096ce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096d8:	d147      	bne.n	800976a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096da:	2300      	movs	r3, #0
 80096dc:	613b      	str	r3, [r7, #16]
 80096de:	4b25      	ldr	r3, [pc, #148]	@ (8009774 <HAL_HCD_MspInit+0xbc>)
 80096e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e2:	4a24      	ldr	r2, [pc, #144]	@ (8009774 <HAL_HCD_MspInit+0xbc>)
 80096e4:	f043 0301 	orr.w	r3, r3, #1
 80096e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80096ea:	4b22      	ldr	r3, [pc, #136]	@ (8009774 <HAL_HCD_MspInit+0xbc>)
 80096ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	613b      	str	r3, [r7, #16]
 80096f4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80096f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096fc:	2300      	movs	r3, #0
 80096fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009700:	2300      	movs	r3, #0
 8009702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009704:	f107 0314 	add.w	r3, r7, #20
 8009708:	4619      	mov	r1, r3
 800970a:	481b      	ldr	r0, [pc, #108]	@ (8009778 <HAL_HCD_MspInit+0xc0>)
 800970c:	f7f7 fe84 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009710:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009716:	2302      	movs	r3, #2
 8009718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800971a:	2300      	movs	r3, #0
 800971c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800971e:	2300      	movs	r3, #0
 8009720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009722:	230a      	movs	r3, #10
 8009724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009726:	f107 0314 	add.w	r3, r7, #20
 800972a:	4619      	mov	r1, r3
 800972c:	4812      	ldr	r0, [pc, #72]	@ (8009778 <HAL_HCD_MspInit+0xc0>)
 800972e:	f7f7 fe73 	bl	8001418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009732:	4b10      	ldr	r3, [pc, #64]	@ (8009774 <HAL_HCD_MspInit+0xbc>)
 8009734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009736:	4a0f      	ldr	r2, [pc, #60]	@ (8009774 <HAL_HCD_MspInit+0xbc>)
 8009738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800973c:	6353      	str	r3, [r2, #52]	@ 0x34
 800973e:	2300      	movs	r3, #0
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	4b0c      	ldr	r3, [pc, #48]	@ (8009774 <HAL_HCD_MspInit+0xbc>)
 8009744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009746:	4a0b      	ldr	r2, [pc, #44]	@ (8009774 <HAL_HCD_MspInit+0xbc>)
 8009748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800974c:	6453      	str	r3, [r2, #68]	@ 0x44
 800974e:	4b09      	ldr	r3, [pc, #36]	@ (8009774 <HAL_HCD_MspInit+0xbc>)
 8009750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009756:	60fb      	str	r3, [r7, #12]
 8009758:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800975a:	2200      	movs	r2, #0
 800975c:	2100      	movs	r1, #0
 800975e:	2043      	movs	r0, #67	@ 0x43
 8009760:	f7f7 fe23 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009764:	2043      	movs	r0, #67	@ 0x43
 8009766:	f7f7 fe3c 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800976a:	bf00      	nop
 800976c:	3728      	adds	r7, #40	@ 0x28
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	40023800 	.word	0x40023800
 8009778:	40020000 	.word	0x40020000

0800977c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800978a:	4618      	mov	r0, r3
 800978c:	f7fe ff6d 	bl	800866a <USBH_LL_IncTimer>
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fe ffa9 	bl	80086fe <USBH_LL_Connect>
}
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fe ffb2 	bl	800872c <USBH_LL_Disconnect>
}
 80097c8:	bf00      	nop
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	70fb      	strb	r3, [r7, #3]
 80097dc:	4613      	mov	r3, r2
 80097de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe ff5f 	bl	80086be <USBH_LL_PortEnabled>
}
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009816:	4618      	mov	r0, r3
 8009818:	f7fe ff5f 	bl	80086da <USBH_LL_PortDisabled>
}
 800981c:	bf00      	nop
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009832:	2b01      	cmp	r3, #1
 8009834:	d12a      	bne.n	800988c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009836:	4a18      	ldr	r2, [pc, #96]	@ (8009898 <USBH_LL_Init+0x74>)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a15      	ldr	r2, [pc, #84]	@ (8009898 <USBH_LL_Init+0x74>)
 8009842:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009846:	4b14      	ldr	r3, [pc, #80]	@ (8009898 <USBH_LL_Init+0x74>)
 8009848:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800984c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800984e:	4b12      	ldr	r3, [pc, #72]	@ (8009898 <USBH_LL_Init+0x74>)
 8009850:	2208      	movs	r2, #8
 8009852:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009854:	4b10      	ldr	r3, [pc, #64]	@ (8009898 <USBH_LL_Init+0x74>)
 8009856:	2201      	movs	r2, #1
 8009858:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800985a:	4b0f      	ldr	r3, [pc, #60]	@ (8009898 <USBH_LL_Init+0x74>)
 800985c:	2200      	movs	r2, #0
 800985e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009860:	4b0d      	ldr	r3, [pc, #52]	@ (8009898 <USBH_LL_Init+0x74>)
 8009862:	2202      	movs	r2, #2
 8009864:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009866:	4b0c      	ldr	r3, [pc, #48]	@ (8009898 <USBH_LL_Init+0x74>)
 8009868:	2200      	movs	r2, #0
 800986a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800986c:	480a      	ldr	r0, [pc, #40]	@ (8009898 <USBH_LL_Init+0x74>)
 800986e:	f7f7 ffbb 	bl	80017e8 <HAL_HCD_Init>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009878:	f7f7 f93a 	bl	8000af0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800987c:	4806      	ldr	r0, [pc, #24]	@ (8009898 <USBH_LL_Init+0x74>)
 800987e:	f7f8 fc1b 	bl	80020b8 <HAL_HCD_GetCurrentFrame>
 8009882:	4603      	mov	r3, r0
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7fe fee0 	bl	800864c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	2000064c 	.word	0x2000064c

0800989c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7f8 fb88 	bl	8001fc8 <HAL_HCD_Start>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 f95e 	bl	8009b80 <USBH_Get_USB_Status>
 80098c4:	4603      	mov	r3, r0
 80098c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b084      	sub	sp, #16
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7f8 fb90 	bl	800200e <HAL_HCD_Stop>
 80098ee:	4603      	mov	r3, r0
 80098f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 f943 	bl	8009b80 <USBH_Get_USB_Status>
 80098fa:	4603      	mov	r3, r0
 80098fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009910:	2301      	movs	r3, #1
 8009912:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800991a:	4618      	mov	r0, r3
 800991c:	f7f8 fbda 	bl	80020d4 <HAL_HCD_GetCurrentSpeed>
 8009920:	4603      	mov	r3, r0
 8009922:	2b02      	cmp	r3, #2
 8009924:	d00c      	beq.n	8009940 <USBH_LL_GetSpeed+0x38>
 8009926:	2b02      	cmp	r3, #2
 8009928:	d80d      	bhi.n	8009946 <USBH_LL_GetSpeed+0x3e>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d002      	beq.n	8009934 <USBH_LL_GetSpeed+0x2c>
 800992e:	2b01      	cmp	r3, #1
 8009930:	d003      	beq.n	800993a <USBH_LL_GetSpeed+0x32>
 8009932:	e008      	b.n	8009946 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]
    break;
 8009938:	e008      	b.n	800994c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800993a:	2301      	movs	r3, #1
 800993c:	73fb      	strb	r3, [r7, #15]
    break;
 800993e:	e005      	b.n	800994c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009940:	2302      	movs	r3, #2
 8009942:	73fb      	strb	r3, [r7, #15]
    break;
 8009944:	e002      	b.n	800994c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009946:	2301      	movs	r3, #1
 8009948:	73fb      	strb	r3, [r7, #15]
    break;
 800994a:	bf00      	nop
  }
  return  speed;
 800994c:	7bfb      	ldrb	r3, [r7, #15]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800996c:	4618      	mov	r0, r3
 800996e:	f7f8 fb6b 	bl	8002048 <HAL_HCD_ResetPort>
 8009972:	4603      	mov	r3, r0
 8009974:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009976:	7bfb      	ldrb	r3, [r7, #15]
 8009978:	4618      	mov	r0, r3
 800997a:	f000 f901 	bl	8009b80 <USBH_Get_USB_Status>
 800997e:	4603      	mov	r3, r0
 8009980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009982:	7bbb      	ldrb	r3, [r7, #14]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800999e:	78fa      	ldrb	r2, [r7, #3]
 80099a0:	4611      	mov	r1, r2
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f8 fb73 	bl	800208e <HAL_HCD_HC_GetXferCount>
 80099a8:	4603      	mov	r3, r0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099b2:	b590      	push	{r4, r7, lr}
 80099b4:	b089      	sub	sp, #36	@ 0x24
 80099b6:	af04      	add	r7, sp, #16
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	4608      	mov	r0, r1
 80099bc:	4611      	mov	r1, r2
 80099be:	461a      	mov	r2, r3
 80099c0:	4603      	mov	r3, r0
 80099c2:	70fb      	strb	r3, [r7, #3]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70bb      	strb	r3, [r7, #2]
 80099c8:	4613      	mov	r3, r2
 80099ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80099da:	787c      	ldrb	r4, [r7, #1]
 80099dc:	78ba      	ldrb	r2, [r7, #2]
 80099de:	78f9      	ldrb	r1, [r7, #3]
 80099e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80099e2:	9302      	str	r3, [sp, #8]
 80099e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80099e8:	9301      	str	r3, [sp, #4]
 80099ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	4623      	mov	r3, r4
 80099f2:	f7f7 ff60 	bl	80018b6 <HAL_HCD_HC_Init>
 80099f6:	4603      	mov	r3, r0
 80099f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 f8bf 	bl	8009b80 <USBH_Get_USB_Status>
 8009a02:	4603      	mov	r3, r0
 8009a04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd90      	pop	{r4, r7, pc}

08009a10 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a2a:	78fa      	ldrb	r2, [r7, #3]
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7f7 fff9 	bl	8001a26 <HAL_HCD_HC_Halt>
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f000 f8a0 	bl	8009b80 <USBH_Get_USB_Status>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009a4e:	b590      	push	{r4, r7, lr}
 8009a50:	b089      	sub	sp, #36	@ 0x24
 8009a52:	af04      	add	r7, sp, #16
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	4608      	mov	r0, r1
 8009a58:	4611      	mov	r1, r2
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	70fb      	strb	r3, [r7, #3]
 8009a60:	460b      	mov	r3, r1
 8009a62:	70bb      	strb	r3, [r7, #2]
 8009a64:	4613      	mov	r3, r2
 8009a66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009a76:	787c      	ldrb	r4, [r7, #1]
 8009a78:	78ba      	ldrb	r2, [r7, #2]
 8009a7a:	78f9      	ldrb	r1, [r7, #3]
 8009a7c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a80:	9303      	str	r3, [sp, #12]
 8009a82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009a84:	9302      	str	r3, [sp, #8]
 8009a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	4623      	mov	r3, r4
 8009a92:	f7f7 ffeb 	bl	8001a6c <HAL_HCD_HC_SubmitRequest>
 8009a96:	4603      	mov	r3, r0
 8009a98:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009a9a:	7bfb      	ldrb	r3, [r7, #15]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 f86f 	bl	8009b80 <USBH_Get_USB_Status>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd90      	pop	{r4, r7, pc}

08009ab0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009ac2:	78fa      	ldrb	r2, [r7, #3]
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7f8 facc 	bl	8002064 <HAL_HCD_HC_GetURBState>
 8009acc:	4603      	mov	r3, r0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b082      	sub	sp, #8
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	460b      	mov	r3, r1
 8009ae0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d103      	bne.n	8009af4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009aec:	78fb      	ldrb	r3, [r7, #3]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 f872 	bl	8009bd8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009af4:	20c8      	movs	r0, #200	@ 0xc8
 8009af6:	f7f7 fb59 	bl	80011ac <HAL_Delay>
  return USBH_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	70fb      	strb	r3, [r7, #3]
 8009b10:	4613      	mov	r3, r2
 8009b12:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009b1a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009b1c:	78fa      	ldrb	r2, [r7, #3]
 8009b1e:	68f9      	ldr	r1, [r7, #12]
 8009b20:	4613      	mov	r3, r2
 8009b22:	011b      	lsls	r3, r3, #4
 8009b24:	1a9b      	subs	r3, r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	440b      	add	r3, r1
 8009b2a:	3317      	adds	r3, #23
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00a      	beq.n	8009b48 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009b32:	78fa      	ldrb	r2, [r7, #3]
 8009b34:	68f9      	ldr	r1, [r7, #12]
 8009b36:	4613      	mov	r3, r2
 8009b38:	011b      	lsls	r3, r3, #4
 8009b3a:	1a9b      	subs	r3, r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	440b      	add	r3, r1
 8009b40:	333c      	adds	r3, #60	@ 0x3c
 8009b42:	78ba      	ldrb	r2, [r7, #2]
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	e009      	b.n	8009b5c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009b48:	78fa      	ldrb	r2, [r7, #3]
 8009b4a:	68f9      	ldr	r1, [r7, #12]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	011b      	lsls	r3, r3, #4
 8009b50:	1a9b      	subs	r3, r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	440b      	add	r3, r1
 8009b56:	333d      	adds	r3, #61	@ 0x3d
 8009b58:	78ba      	ldrb	r2, [r7, #2]
 8009b5a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b082      	sub	sp, #8
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7f7 fb1a 	bl	80011ac <HAL_Delay>
}
 8009b78:	bf00      	nop
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	4603      	mov	r3, r0
 8009b88:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b8e:	79fb      	ldrb	r3, [r7, #7]
 8009b90:	2b03      	cmp	r3, #3
 8009b92:	d817      	bhi.n	8009bc4 <USBH_Get_USB_Status+0x44>
 8009b94:	a201      	add	r2, pc, #4	@ (adr r2, 8009b9c <USBH_Get_USB_Status+0x1c>)
 8009b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9a:	bf00      	nop
 8009b9c:	08009bad 	.word	0x08009bad
 8009ba0:	08009bb3 	.word	0x08009bb3
 8009ba4:	08009bb9 	.word	0x08009bb9
 8009ba8:	08009bbf 	.word	0x08009bbf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb0:	e00b      	b.n	8009bca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb6:	e008      	b.n	8009bca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	73fb      	strb	r3, [r7, #15]
    break;
 8009bbc:	e005      	b.n	8009bca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc2:	e002      	b.n	8009bca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc8:	bf00      	nop
  }
  return usb_status;
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009be2:	79fb      	ldrb	r3, [r7, #7]
 8009be4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009be6:	79fb      	ldrb	r3, [r7, #7]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d102      	bne.n	8009bf2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009bec:	2300      	movs	r3, #0
 8009bee:	73fb      	strb	r3, [r7, #15]
 8009bf0:	e001      	b.n	8009bf6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	4803      	ldr	r0, [pc, #12]	@ (8009c0c <MX_DriverVbusFS+0x34>)
 8009bfe:	f7f7 fda7 	bl	8001750 <HAL_GPIO_WritePin>
}
 8009c02:	bf00      	nop
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	40020800 	.word	0x40020800

08009c10 <malloc>:
 8009c10:	4b02      	ldr	r3, [pc, #8]	@ (8009c1c <malloc+0xc>)
 8009c12:	4601      	mov	r1, r0
 8009c14:	6818      	ldr	r0, [r3, #0]
 8009c16:	f000 b82d 	b.w	8009c74 <_malloc_r>
 8009c1a:	bf00      	nop
 8009c1c:	2000002c 	.word	0x2000002c

08009c20 <free>:
 8009c20:	4b02      	ldr	r3, [pc, #8]	@ (8009c2c <free+0xc>)
 8009c22:	4601      	mov	r1, r0
 8009c24:	6818      	ldr	r0, [r3, #0]
 8009c26:	f000 b8f5 	b.w	8009e14 <_free_r>
 8009c2a:	bf00      	nop
 8009c2c:	2000002c 	.word	0x2000002c

08009c30 <sbrk_aligned>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	4e0f      	ldr	r6, [pc, #60]	@ (8009c70 <sbrk_aligned+0x40>)
 8009c34:	460c      	mov	r4, r1
 8009c36:	6831      	ldr	r1, [r6, #0]
 8009c38:	4605      	mov	r5, r0
 8009c3a:	b911      	cbnz	r1, 8009c42 <sbrk_aligned+0x12>
 8009c3c:	f000 f8ae 	bl	8009d9c <_sbrk_r>
 8009c40:	6030      	str	r0, [r6, #0]
 8009c42:	4621      	mov	r1, r4
 8009c44:	4628      	mov	r0, r5
 8009c46:	f000 f8a9 	bl	8009d9c <_sbrk_r>
 8009c4a:	1c43      	adds	r3, r0, #1
 8009c4c:	d103      	bne.n	8009c56 <sbrk_aligned+0x26>
 8009c4e:	f04f 34ff 	mov.w	r4, #4294967295
 8009c52:	4620      	mov	r0, r4
 8009c54:	bd70      	pop	{r4, r5, r6, pc}
 8009c56:	1cc4      	adds	r4, r0, #3
 8009c58:	f024 0403 	bic.w	r4, r4, #3
 8009c5c:	42a0      	cmp	r0, r4
 8009c5e:	d0f8      	beq.n	8009c52 <sbrk_aligned+0x22>
 8009c60:	1a21      	subs	r1, r4, r0
 8009c62:	4628      	mov	r0, r5
 8009c64:	f000 f89a 	bl	8009d9c <_sbrk_r>
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d1f2      	bne.n	8009c52 <sbrk_aligned+0x22>
 8009c6c:	e7ef      	b.n	8009c4e <sbrk_aligned+0x1e>
 8009c6e:	bf00      	nop
 8009c70:	20000a2c 	.word	0x20000a2c

08009c74 <_malloc_r>:
 8009c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c78:	1ccd      	adds	r5, r1, #3
 8009c7a:	f025 0503 	bic.w	r5, r5, #3
 8009c7e:	3508      	adds	r5, #8
 8009c80:	2d0c      	cmp	r5, #12
 8009c82:	bf38      	it	cc
 8009c84:	250c      	movcc	r5, #12
 8009c86:	2d00      	cmp	r5, #0
 8009c88:	4606      	mov	r6, r0
 8009c8a:	db01      	blt.n	8009c90 <_malloc_r+0x1c>
 8009c8c:	42a9      	cmp	r1, r5
 8009c8e:	d904      	bls.n	8009c9a <_malloc_r+0x26>
 8009c90:	230c      	movs	r3, #12
 8009c92:	6033      	str	r3, [r6, #0]
 8009c94:	2000      	movs	r0, #0
 8009c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d70 <_malloc_r+0xfc>
 8009c9e:	f000 f869 	bl	8009d74 <__malloc_lock>
 8009ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ca6:	461c      	mov	r4, r3
 8009ca8:	bb44      	cbnz	r4, 8009cfc <_malloc_r+0x88>
 8009caa:	4629      	mov	r1, r5
 8009cac:	4630      	mov	r0, r6
 8009cae:	f7ff ffbf 	bl	8009c30 <sbrk_aligned>
 8009cb2:	1c43      	adds	r3, r0, #1
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	d158      	bne.n	8009d6a <_malloc_r+0xf6>
 8009cb8:	f8d8 4000 	ldr.w	r4, [r8]
 8009cbc:	4627      	mov	r7, r4
 8009cbe:	2f00      	cmp	r7, #0
 8009cc0:	d143      	bne.n	8009d4a <_malloc_r+0xd6>
 8009cc2:	2c00      	cmp	r4, #0
 8009cc4:	d04b      	beq.n	8009d5e <_malloc_r+0xea>
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	4639      	mov	r1, r7
 8009cca:	4630      	mov	r0, r6
 8009ccc:	eb04 0903 	add.w	r9, r4, r3
 8009cd0:	f000 f864 	bl	8009d9c <_sbrk_r>
 8009cd4:	4581      	cmp	r9, r0
 8009cd6:	d142      	bne.n	8009d5e <_malloc_r+0xea>
 8009cd8:	6821      	ldr	r1, [r4, #0]
 8009cda:	1a6d      	subs	r5, r5, r1
 8009cdc:	4629      	mov	r1, r5
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f7ff ffa6 	bl	8009c30 <sbrk_aligned>
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d03a      	beq.n	8009d5e <_malloc_r+0xea>
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	442b      	add	r3, r5
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	f8d8 3000 	ldr.w	r3, [r8]
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	bb62      	cbnz	r2, 8009d50 <_malloc_r+0xdc>
 8009cf6:	f8c8 7000 	str.w	r7, [r8]
 8009cfa:	e00f      	b.n	8009d1c <_malloc_r+0xa8>
 8009cfc:	6822      	ldr	r2, [r4, #0]
 8009cfe:	1b52      	subs	r2, r2, r5
 8009d00:	d420      	bmi.n	8009d44 <_malloc_r+0xd0>
 8009d02:	2a0b      	cmp	r2, #11
 8009d04:	d917      	bls.n	8009d36 <_malloc_r+0xc2>
 8009d06:	1961      	adds	r1, r4, r5
 8009d08:	42a3      	cmp	r3, r4
 8009d0a:	6025      	str	r5, [r4, #0]
 8009d0c:	bf18      	it	ne
 8009d0e:	6059      	strne	r1, [r3, #4]
 8009d10:	6863      	ldr	r3, [r4, #4]
 8009d12:	bf08      	it	eq
 8009d14:	f8c8 1000 	streq.w	r1, [r8]
 8009d18:	5162      	str	r2, [r4, r5]
 8009d1a:	604b      	str	r3, [r1, #4]
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f000 f82f 	bl	8009d80 <__malloc_unlock>
 8009d22:	f104 000b 	add.w	r0, r4, #11
 8009d26:	1d23      	adds	r3, r4, #4
 8009d28:	f020 0007 	bic.w	r0, r0, #7
 8009d2c:	1ac2      	subs	r2, r0, r3
 8009d2e:	bf1c      	itt	ne
 8009d30:	1a1b      	subne	r3, r3, r0
 8009d32:	50a3      	strne	r3, [r4, r2]
 8009d34:	e7af      	b.n	8009c96 <_malloc_r+0x22>
 8009d36:	6862      	ldr	r2, [r4, #4]
 8009d38:	42a3      	cmp	r3, r4
 8009d3a:	bf0c      	ite	eq
 8009d3c:	f8c8 2000 	streq.w	r2, [r8]
 8009d40:	605a      	strne	r2, [r3, #4]
 8009d42:	e7eb      	b.n	8009d1c <_malloc_r+0xa8>
 8009d44:	4623      	mov	r3, r4
 8009d46:	6864      	ldr	r4, [r4, #4]
 8009d48:	e7ae      	b.n	8009ca8 <_malloc_r+0x34>
 8009d4a:	463c      	mov	r4, r7
 8009d4c:	687f      	ldr	r7, [r7, #4]
 8009d4e:	e7b6      	b.n	8009cbe <_malloc_r+0x4a>
 8009d50:	461a      	mov	r2, r3
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	d1fb      	bne.n	8009d50 <_malloc_r+0xdc>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	6053      	str	r3, [r2, #4]
 8009d5c:	e7de      	b.n	8009d1c <_malloc_r+0xa8>
 8009d5e:	230c      	movs	r3, #12
 8009d60:	6033      	str	r3, [r6, #0]
 8009d62:	4630      	mov	r0, r6
 8009d64:	f000 f80c 	bl	8009d80 <__malloc_unlock>
 8009d68:	e794      	b.n	8009c94 <_malloc_r+0x20>
 8009d6a:	6005      	str	r5, [r0, #0]
 8009d6c:	e7d6      	b.n	8009d1c <_malloc_r+0xa8>
 8009d6e:	bf00      	nop
 8009d70:	20000a30 	.word	0x20000a30

08009d74 <__malloc_lock>:
 8009d74:	4801      	ldr	r0, [pc, #4]	@ (8009d7c <__malloc_lock+0x8>)
 8009d76:	f000 b84b 	b.w	8009e10 <__retarget_lock_acquire_recursive>
 8009d7a:	bf00      	nop
 8009d7c:	20000b70 	.word	0x20000b70

08009d80 <__malloc_unlock>:
 8009d80:	4801      	ldr	r0, [pc, #4]	@ (8009d88 <__malloc_unlock+0x8>)
 8009d82:	f000 b846 	b.w	8009e12 <__retarget_lock_release_recursive>
 8009d86:	bf00      	nop
 8009d88:	20000b70 	.word	0x20000b70

08009d8c <memset>:
 8009d8c:	4402      	add	r2, r0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d100      	bne.n	8009d96 <memset+0xa>
 8009d94:	4770      	bx	lr
 8009d96:	f803 1b01 	strb.w	r1, [r3], #1
 8009d9a:	e7f9      	b.n	8009d90 <memset+0x4>

08009d9c <_sbrk_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4d06      	ldr	r5, [pc, #24]	@ (8009db8 <_sbrk_r+0x1c>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	4604      	mov	r4, r0
 8009da4:	4608      	mov	r0, r1
 8009da6:	602b      	str	r3, [r5, #0]
 8009da8:	f7f7 f91c 	bl	8000fe4 <_sbrk>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	d102      	bne.n	8009db6 <_sbrk_r+0x1a>
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	b103      	cbz	r3, 8009db6 <_sbrk_r+0x1a>
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	20000b6c 	.word	0x20000b6c

08009dbc <__errno>:
 8009dbc:	4b01      	ldr	r3, [pc, #4]	@ (8009dc4 <__errno+0x8>)
 8009dbe:	6818      	ldr	r0, [r3, #0]
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	2000002c 	.word	0x2000002c

08009dc8 <__libc_init_array>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	4d0d      	ldr	r5, [pc, #52]	@ (8009e00 <__libc_init_array+0x38>)
 8009dcc:	4c0d      	ldr	r4, [pc, #52]	@ (8009e04 <__libc_init_array+0x3c>)
 8009dce:	1b64      	subs	r4, r4, r5
 8009dd0:	10a4      	asrs	r4, r4, #2
 8009dd2:	2600      	movs	r6, #0
 8009dd4:	42a6      	cmp	r6, r4
 8009dd6:	d109      	bne.n	8009dec <__libc_init_array+0x24>
 8009dd8:	4d0b      	ldr	r5, [pc, #44]	@ (8009e08 <__libc_init_array+0x40>)
 8009dda:	4c0c      	ldr	r4, [pc, #48]	@ (8009e0c <__libc_init_array+0x44>)
 8009ddc:	f000 f864 	bl	8009ea8 <_init>
 8009de0:	1b64      	subs	r4, r4, r5
 8009de2:	10a4      	asrs	r4, r4, #2
 8009de4:	2600      	movs	r6, #0
 8009de6:	42a6      	cmp	r6, r4
 8009de8:	d105      	bne.n	8009df6 <__libc_init_array+0x2e>
 8009dea:	bd70      	pop	{r4, r5, r6, pc}
 8009dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009df0:	4798      	blx	r3
 8009df2:	3601      	adds	r6, #1
 8009df4:	e7ee      	b.n	8009dd4 <__libc_init_array+0xc>
 8009df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dfa:	4798      	blx	r3
 8009dfc:	3601      	adds	r6, #1
 8009dfe:	e7f2      	b.n	8009de6 <__libc_init_array+0x1e>
 8009e00:	08009ee4 	.word	0x08009ee4
 8009e04:	08009ee4 	.word	0x08009ee4
 8009e08:	08009ee4 	.word	0x08009ee4
 8009e0c:	08009ee8 	.word	0x08009ee8

08009e10 <__retarget_lock_acquire_recursive>:
 8009e10:	4770      	bx	lr

08009e12 <__retarget_lock_release_recursive>:
 8009e12:	4770      	bx	lr

08009e14 <_free_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4605      	mov	r5, r0
 8009e18:	2900      	cmp	r1, #0
 8009e1a:	d041      	beq.n	8009ea0 <_free_r+0x8c>
 8009e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e20:	1f0c      	subs	r4, r1, #4
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bfb8      	it	lt
 8009e26:	18e4      	addlt	r4, r4, r3
 8009e28:	f7ff ffa4 	bl	8009d74 <__malloc_lock>
 8009e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea4 <_free_r+0x90>)
 8009e2e:	6813      	ldr	r3, [r2, #0]
 8009e30:	b933      	cbnz	r3, 8009e40 <_free_r+0x2c>
 8009e32:	6063      	str	r3, [r4, #4]
 8009e34:	6014      	str	r4, [r2, #0]
 8009e36:	4628      	mov	r0, r5
 8009e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e3c:	f7ff bfa0 	b.w	8009d80 <__malloc_unlock>
 8009e40:	42a3      	cmp	r3, r4
 8009e42:	d908      	bls.n	8009e56 <_free_r+0x42>
 8009e44:	6820      	ldr	r0, [r4, #0]
 8009e46:	1821      	adds	r1, r4, r0
 8009e48:	428b      	cmp	r3, r1
 8009e4a:	bf01      	itttt	eq
 8009e4c:	6819      	ldreq	r1, [r3, #0]
 8009e4e:	685b      	ldreq	r3, [r3, #4]
 8009e50:	1809      	addeq	r1, r1, r0
 8009e52:	6021      	streq	r1, [r4, #0]
 8009e54:	e7ed      	b.n	8009e32 <_free_r+0x1e>
 8009e56:	461a      	mov	r2, r3
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	b10b      	cbz	r3, 8009e60 <_free_r+0x4c>
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	d9fa      	bls.n	8009e56 <_free_r+0x42>
 8009e60:	6811      	ldr	r1, [r2, #0]
 8009e62:	1850      	adds	r0, r2, r1
 8009e64:	42a0      	cmp	r0, r4
 8009e66:	d10b      	bne.n	8009e80 <_free_r+0x6c>
 8009e68:	6820      	ldr	r0, [r4, #0]
 8009e6a:	4401      	add	r1, r0
 8009e6c:	1850      	adds	r0, r2, r1
 8009e6e:	4283      	cmp	r3, r0
 8009e70:	6011      	str	r1, [r2, #0]
 8009e72:	d1e0      	bne.n	8009e36 <_free_r+0x22>
 8009e74:	6818      	ldr	r0, [r3, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	6053      	str	r3, [r2, #4]
 8009e7a:	4408      	add	r0, r1
 8009e7c:	6010      	str	r0, [r2, #0]
 8009e7e:	e7da      	b.n	8009e36 <_free_r+0x22>
 8009e80:	d902      	bls.n	8009e88 <_free_r+0x74>
 8009e82:	230c      	movs	r3, #12
 8009e84:	602b      	str	r3, [r5, #0]
 8009e86:	e7d6      	b.n	8009e36 <_free_r+0x22>
 8009e88:	6820      	ldr	r0, [r4, #0]
 8009e8a:	1821      	adds	r1, r4, r0
 8009e8c:	428b      	cmp	r3, r1
 8009e8e:	bf04      	itt	eq
 8009e90:	6819      	ldreq	r1, [r3, #0]
 8009e92:	685b      	ldreq	r3, [r3, #4]
 8009e94:	6063      	str	r3, [r4, #4]
 8009e96:	bf04      	itt	eq
 8009e98:	1809      	addeq	r1, r1, r0
 8009e9a:	6021      	streq	r1, [r4, #0]
 8009e9c:	6054      	str	r4, [r2, #4]
 8009e9e:	e7ca      	b.n	8009e36 <_free_r+0x22>
 8009ea0:	bd38      	pop	{r3, r4, r5, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20000a30 	.word	0x20000a30

08009ea8 <_init>:
 8009ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eaa:	bf00      	nop
 8009eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eae:	bc08      	pop	{r3}
 8009eb0:	469e      	mov	lr, r3
 8009eb2:	4770      	bx	lr

08009eb4 <_fini>:
 8009eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb6:	bf00      	nop
 8009eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eba:	bc08      	pop	{r3}
 8009ebc:	469e      	mov	lr, r3
 8009ebe:	4770      	bx	lr
